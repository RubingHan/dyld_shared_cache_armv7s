/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:03:48 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /usr/lib/libmecabra.dylib
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <libmecabra.dylib/libmecabra.dylib-Structs.h>
#import <CoreFoundation/NSCopying.h>

@class NSString;

@interface MecabraCandidate : NSObject <NSCopying> {

	void* _rawCandidate;

}

@property (nonatomic,readonly) bool isConversionCandidate; 
@property (nonatomic,readonly) bool isExtensionCandidate; 
@property (nonatomic,readonly) bool isEmojiCandidate; 
@property (nonatomic,readonly) bool isLearningDictionaryCandidate; 
@property (nonatomic,readonly) bool isUserWordCandidate; 
@property (nonatomic,readonly) bool isPredictionCandidate; 
@property (nonatomic,readonly) bool isFuzzyMatchCandidate; 
@property (nonatomic,readonly) int type; 
@property (nonatomic,readonly) unsigned long long wordCount; 
@property (nonatomic,readonly) NSString * surface; 
@property (nonatomic,readonly) NSString * analysisString; 
@property (nonatomic,readonly) NSString * convertedAnalysisString; 
@property (nonatomic,readonly) NSString * dictionaryReading; 
@property (nonatomic,readonly) MecabraCandidateBase* rawCandidate; 
@property (nonatomic,readonly) ConversionCandidate* rawConversionCandidate; 
+(id)createSyntheticCandidate:(id)arg1 withLexicon:(void*)arg2 language:(int)arg3 ;
-(void)dealloc;
-(bool)isEqual:(id)arg1 ;
-(id)description;
-(int)type;
-(id)copyWithZone:(NSZone)arg1 ;
-(bool)isExtensionCandidate;
-(unsigned short)kind;
-(unsigned long long)weight;
-(void)setWeight:(unsigned long long)arg1 ;
-(id)dictionaryReading;
-(id)initWithCandidate:(MecabraCandidateBase*)arg1 ;
-(ConversionCandidate*)rawConversionCandidate;
-(MecabraCandidateBase*)rawCandidate;
-(id)surface;
-(unsigned long long)wordCount;
-(id)analysisString;
-(bool)isConversionCandidate;
-(id)convertedAnalysisString;
-(bool)isEmojiCandidate;
-(bool)isLearningDictionaryCandidate;
-(bool)isUserWordCandidate;
-(bool)isPredictionCandidate;
-(bool)isFuzzyMatchCandidate;
-(unsigned short)wordLengthAtIndex:(unsigned long long)arg1 ;
-(unsigned short)wordReadingLengthAtIndex:(unsigned long long)arg1 ;
-(bool)wordIsFromSystemDictionaryAtIndex:(unsigned long long)arg1 ;
-(CFArrayRef)copySyllableLengthArrayForWordAtIndex:(unsigned long long)arg1 ;
-(unsigned short)lcAttrAtIndex:(unsigned long long)arg1 ;
-(unsigned short)rcAttrAtIndex:(unsigned long long)arg1 ;
-(unsigned long long)trieValueAtIndex:(unsigned long long)arg1 ;
-(unsigned short)lastPrefixValue;
-(unsigned short)matchType;
-(CFArrayRef)copySyllableLengthArrayInAnalysisString;
-(CFArrayRef)copySyllableLengthArrayInConvertedAnalysisString;
-(CFArrayRef)copySyllableLengthArrayInDictionaryReading;
-(SCD_Struct_Me2)wordRangeAtIndex:(long long)arg1 ;
-(long long)alternateWordCountAtIndex:(long long)arg1 ;
-(CFArrayRef)createAlternateWordArrayForWordAtIndex:(long long)arg1 ;
-(id)syllablesInAnalysisString;
-(id)syllablesInConvertedAnalysisString;
-(id)syllablesInDictionaryReading;
-(id)syllablesInString:(id)arg1 syllableLengths:(id)arg2 ;
-(unsigned short)matchedLengthType;
-(id)convertedAnalysisStringForFirstSyllable;
-(id)syllabifiedAnalysisString;
-(id)syllabifiedConvertedAnalysisString;
-(id)syllabifiedDictionaryReading;
-(id)words;
-(id)wordReadings;
@end

