/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:03:49 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /usr/lib/libobjc.A.dylib
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <libobjc.A.dylib/libobjc.A.dylib-Structs.h>
#import <libobjc.A.dylib/NSObject.h>

@protocol NSObject
@optional
-(id)debugDescription;

@required
-(oneway void)release;
-(id)retain;
-(Class)class;
-(bool)respondsToSelector:(SEL)arg1;
-(bool)isKindOfClass:(Class)arg1;
-(id)autorelease;
-(bool)isEqual:(id)arg1;
-(unsigned long long)hash;
-(Class)superclass;
-(id)self;
-(NSZone)zone;
-(id)performSelector:(SEL)arg1;
-(id)performSelector:(SEL)arg1 withObject:(id)arg2;
-(id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
-(bool)isProxy;
-(bool)isMemberOfClass:(Class)arg1;
-(bool)conformsToProtocol:(id)arg1;
-(unsigned long long)retainCount;
-(id)description;
@end


@class NSString, UIBezierPath;

@interface NSObject <NSObject> {

	Class isa;

}

@property (assign,nonatomic,@dynamic) bool isAccessibilityElement; 
@property (nonatomic,@dynamic,copy) NSString * accessibilityLabel; 
@property (nonatomic,@dynamic,copy) NSString * accessibilityHint; 
@property (nonatomic,@dynamic,copy) NSString * accessibilityValue; 
@property (assign,nonatomic,@dynamic) unsigned long long accessibilityTraits; 
@property (assign,nonatomic,@dynamic) CGRect accessibilityFrame; 
@property (nonatomic,copy) UIBezierPath * accessibilityPath; 
@property (assign,nonatomic,@dynamic) CGPoint accessibilityActivationPoint; 
@property (nonatomic,@dynamic,retain) NSString * accessibilityLanguage; 
@property (assign,nonatomic,@dynamic) bool accessibilityElementsHidden; 
@property (assign,nonatomic,@dynamic) bool accessibilityViewIsModal; 
@property (assign,nonatomic,@dynamic) bool shouldGroupAccessibilityChildren; 
+(bool)overridesSelector:(SEL)arg1 ofBaseClass:(Class)arg2 ;
+(bool)overridesClassSelector:(SEL)arg1 ofBaseClass:(Class)arg2 ;
+(void)_accessibilityConvertDecimalDegreeToDMS:(double)arg1 degreesPtr:(long long*)arg2 minutesPtr:(long long*)arg3 secondsPtr:(double*)arg4 ;
+(void)mf_clearLocks;
+(bool)_gk_swizzleSelector:(SEL)arg1 toUseImplementationFromSelector:(SEL)arg2 originalImplementation:(/*function pointer*/ void**)arg3 ;
+(id)_gkDefaultKeymap;
+(void)_accessibilityCalDetailStringForEvent:(id)arg1 inDateString:(id*)arg2 inTimeString:(id*)arg3 ;
+(void)_accessibilityCalGetHourDesignatorsForAM:(id*)arg1 andPM:(id*)arg2 ;
+(bool)_accessibilityCalSpaceBetweenDesignatorsAndHour;
+(bool)_accessibilityCalHourDesignatorsAreBeforeHour;
+(bool)_accessibilityCalShow24Hours;
+(id)_accessibilityStringForDayOfWeek:(int)arg1 ;
+(id)_accessibilityStringForDate:(SCD_Struct_NS1)arg1 ;
+(void)performSelectorWithNonRetainedTarget:(id)arg1 selector:(SEL)arg2 withObject:(id)arg3 afterDelay:(double)arg4 ;
+(void)cancelPreviousPerformRequestsWithNonRetainedTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3 ;
+(void)cancelPreviousPerformRequestsWithNonRetainedTarget:(id)arg1 ;
+(id)_accessibilityTextChecker;
+(id)accessibilityBundles;
+(void)accessibilityInitializeBundle;
+(void)_installAppearanceSwizzlesForSetter:(id)arg1 ;
+(bool)__accessibilityGuidedAccessStateEnabled;
+(long long)__accessibilityGuidedAccessRestrictionStateForIdentifier:(id)arg1 ;
+(void)__accessibilityRequestGuidedAccessSession:(bool)arg1 completion:(/*^block*/ id)arg2 ;
+(id)_alternateUISwitchableSelectorPairs;
+(void)_accessibilityPerformValidations:(id)arg1 ;
+(bool)isSelectorExcludedFromWebScript:(SEL)arg1 ;
+(bool)isKeyExcludedFromWebScript:(const char*)arg1 ;
+(id)_webkit_invokeOnMainThread;
+(double)performSelector:(SEL)arg1 withThreadKey:(id)arg2 waitTime:(double)arg3 cancelMask:(unsigned)arg4 count:(unsigned)arg5 objects:(id)arg6 ;
+(double)performSelector:(SEL)arg1 withThreadKey:(id)arg2 count:(unsigned)arg3 objects:(id)arg4 ;
+(bool)CA_automaticallyNotifiesObservers:(Class)arg1 ;
+(bool)CA_encodesPropertyConditionally:(unsigned)arg1 type:(int)arg2 ;
+(/*function pointer*/ void*)CA_setterForProperty:(const CAPropertyInfo*)arg1 ;
+(/*function pointer*/ void*)CA_getterForProperty:(const CAPropertyInfo*)arg1 ;
+(id)CA_CAMLPropertyForKey:(id)arg1 ;
+(bool)sbs_synchronousWrapper:(/*^block*/ id)arg1 dispatchTimeout:(unsigned long long)arg2 ;
+(id)sbs_dataFromObject:(id)arg1 ;
+(id)sbs_objectFromData:(id)arg1 ;
+(bool)sbs_synchronousWrapper:(/*^block*/ id)arg1 ;
+(bool)sbs_synchronousWrapper:(/*^block*/ id)arg1 timeout:(double)arg2 ;
+(id)sbs_dataWithValue:(id)arg1 ;
+(id)sbs_valueFromData:(id)arg1 ofType:(const char*)arg2 ;
+(bool)bks_synchronousWrapper:(/*^block*/ id)arg1 timeout:(unsigned long long)arg2 ;
+(id)bks_objectFromData:(id)arg1 ;
+(id)bks_dataFromObject:(id)arg1 ;
+(void)bks_waitAsynchronouslyForNotification:(id)arg1 object:(id)arg2 forDuration:(double)arg3 andPerformBlock:(/*^block*/ id)arg4 onQueue:(id)arg5 ;
+(id)replacementObjectForPortCoder:(id)arg1 ;
+(void)cancelPreviousPerformRequestsWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3 ;
+(void)cancelPreviousPerformRequestsWithTarget:(id)arg1 ;
+(bool)implementsSelector:(SEL)arg1 ;
+(bool)instancesImplementSelector:(SEL)arg1 ;
+(void)load;
+(void)setVersion:(long long)arg1 ;
+(long long)version;
+(Class)classForKeyedUnarchiver;
+(id)classFallbacksForKeyedArchiver;
+(bool)_shouldAddObservationForwardersForKey:(id)arg1 ;
+(void)setKeys:(id)arg1 triggerChangeNotificationsForDependentKey:(id)arg2 ;
+(id)_keysForValuesAffectingValueForKey:(id)arg1 ;
+(bool)automaticallyNotifiesObserversForKey:(id)arg1 ;
+(id)keyPathsForValuesAffectingValueForKey:(id)arg1 ;
+(id)_createValueGetterWithContainerClassID:(id)arg1 key:(id)arg2 ;
+(id)_createValueSetterWithContainerClassID:(id)arg1 key:(id)arg2 ;
+(id)_createValuePrimitiveGetterWithContainerClassID:(id)arg1 key:(id)arg2 ;
+(id)_createValuePrimitiveSetterWithContainerClassID:(id)arg1 key:(id)arg2 ;
+(id)_createMutableOrderedSetValueGetterWithContainerClassID:(id)arg1 key:(id)arg2 ;
+(id)_createMutableSetValueGetterWithContainerClassID:(id)arg1 key:(id)arg2 ;
+(id)_createOtherValueGetterWithContainerClassID:(id)arg1 key:(id)arg2 ;
+(id)_createOtherValueSetterWithContainerClassID:(id)arg1 key:(id)arg2 ;
+(bool)accessInstanceVariablesDirectly;
+(id)_createMutableArrayValueGetterWithContainerClassID:(id)arg1 key:(id)arg2 ;
+(id)__allocWithZone_OA:(NSZone)arg1 ;
+(id)_copyDescription;
+(void)dealloc;
+(id)init;
+(id)description;
+(id)methodSignatureForSelector:(SEL)arg1 ;
+(id)instanceMethodSignatureForSelector:(SEL)arg1 ;
+(void)load;
+(void)doesNotRecognizeSelector:(SEL)arg1 ;
+(void)finalize;
+(bool)resolveClassMethod:(SEL)arg1 ;
+(bool)resolveInstanceMethod:(SEL)arg1 ;
+(bool)isAncestorOfObject:(id)arg1 ;
+(oneway void)release;
+(id)retain;
+(void)dealloc;
+(Class)class;
+(id)alloc;
+(bool)respondsToSelector:(SEL)arg1 ;
+(id)init;
+(bool)isKindOfClass:(Class)arg1 ;
+(id)copy;
+(id)autorelease;
+(id)new;
+(bool)isEqual:(id)arg1 ;
+(unsigned long long)hash;
+(Class)superclass;
+(id)self;
+(NSZone)zone;
+(id)performSelector:(SEL)arg1 ;
+(id)performSelector:(SEL)arg1 withObject:(id)arg2 ;
+(id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3 ;
+(bool)isProxy;
+(bool)isMemberOfClass:(Class)arg1 ;
+(bool)conformsToProtocol:(id)arg1 ;
+(unsigned long long)retainCount;
+(id)description;
+(id)debugDescription;
+(bool)isSubclassOfClass:(Class)arg1 ;
+(id)methodSignatureForSelector:(SEL)arg1 ;
+(id)mutableCopy;
+(id)allocWithZone:(NSZone)arg1 ;
+(id)copyWithZone:(NSZone)arg1 ;
+(/*function pointer*/ void*)instanceMethodForSelector:(SEL)arg1 ;
+(void)initialize;
+(bool)_tryRetain;
+(bool)_isDeallocating;
+(/*function pointer*/ void*)methodForSelector:(SEL)arg1 ;
+(bool)instancesRespondToSelector:(SEL)arg1 ;
+(id)forwardingTargetForSelector:(SEL)arg1 ;
+(id)instanceMethodSignatureForSelector:(SEL)arg1 ;
+(void)forwardInvocation:(id)arg1 ;
+(bool)allowsWeakReference;
+(bool)retainWeakReference;
+(void)load;
+(id)mutableCopyWithZone:(NSZone)arg1 ;
+(void)doesNotRecognizeSelector:(SEL)arg1 ;
+(bool)isFault;
+(void)finalize;
-(void)appendJsonStringToString:(id)arg1 ;
-(void)performSelector:(SEL)arg1 withValue:(id)arg2 ;
-(id)responderChainProxy:(id)arg1 ;
-(bool)_mapkit_isInternalAnnotationView;
-(bool)_mapkit_internalAnnotationAllowsCustomView;
-(bool)_mapkit_isInternalAnnotation;
-(id)_gkAuthenticatedPlayerID;
-(void)_gkSetupAccountWithParamaters:(id)arg1 completionHandler:(/*^block*/ id)arg2 ;
-(void)_gkRefreshPhotoForPlayer:(id)arg1 completionHandler:(/*^block*/ id)arg2 ;
-(bool)isNull;
-(bool)isNull;
-(void)smsComposeControllerAppeared:(id)arg1 ;
-(void)smsComposeControllerDataInserted:(id)arg1 ;
-(void)smsComposeControllerCancelled:(id)arg1 ;
-(void)smsComposeControllerSendStarted:(id)arg1 ;
-(id)mf_objectWithHighest:(/*^block*/ id)arg1 ;
-(void)mf_performOnewaySelectorInMainThread:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3 ;
-(void)addNullRunLoopSourceAndPerformSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 inModes:(id)arg4 ;
-(id)mf_strictLockOrdering;
-(id)mf_exclusiveLocks;
-(id)_mf_lockOrderingForType:(int)arg1 ;
-(void)_mf_dumpLockCallStacks:(unsigned long long)arg1 ordering:(id)arg2 ;
-(bool)_mf_ntsIsLocked;
-(void)_mf_checkToAllowOrderingWithLock:(id)arg1 ;
-(void)_mf_checkToAllowStrictProgressionWithLock:(id)arg1 ;
-(void)_mf_checkToAllowExclusiveLocksWithLock:(id)arg1 ;
-(void)_mf_checkToAllowLock:(id)arg1 ;
-(bool)mf_tryLockWithPriority;
-(void)mf_lockWithPriority;
-(bool)mf_tryLock;
-(id)mf_lockOrdering;
-(void)mf_lock;
-(void)mf_unlock;
-(void)_gkRemoveObserverWithBlockToken:(id)arg1 ;
-(id)_gkAddObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 withBlock:(/*^block*/ id)arg3 ;
-(void)_gk_observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)_gk_addObservationDelegate:(id)arg1 forKey:(id)arg2 ;
-(void)_gk_removeObservationDelegate:(id)arg1 forKey:(id)arg2 ;
-(id)_gkViewDebuggingChildren;
-(id)_gkViewDebuggingChildKeys;
-(id)_gkDescriptionWithChildren:(int)arg1 ;
-(id)_gkRecursiveDescription;
-(id)_gkDescription;
-(void)_gkPopulateWithObject:(id)arg1 keymap:(id)arg2 ;
-(void)_ICSStringWithOptions:(unsigned long long)arg1 appendingToString:(id)arg2 ;
-(id)_ICSStringWithOptions:(unsigned long long)arg1 ;
-(id)MPMediaLibraryDataProviderSystemML3CoercedString;
-(void)__crossedTimeMarkerNotification:(id)arg1 ;
-(void)registerForTimeMarkerNotificationsIfNecessaryForPlayer:(id)arg1 ;
-(void)unregisterForTimeMarkerNotifications;
-(void)_nonRetainingPerformSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 inModes:(id)arg4 ;
-(id)_MPCancellableDispatchAccessQueue;
-(bool)cancelPreviousDispatchAsyncWithCancellationIdentifier:(id)arg1 ;
-(void)dispatchAsyncWithCancellationIdentifier:(id)arg1 delay:(double)arg2 queue:(id)arg3 block:(/*^block*/ id)arg4 ;
-(id)ml_stringValueForSQL;
-(void)ml_bindToSQLiteStatement:(sqlite3_stmtRef)arg1 atPosition:(int)arg2 ;
-(bool)setAudioVideoControllerRepeatMode:(long long)arg1 ;
-(long long)audioVideoControllerRepeatMode;
-(void)accessibilityExpandMathEquation;
-(id)_accessibilityUserTestingElementAttributes;
-(id)_accessibilityUserTestingElementBaseType;
-(id)_accessibilityUserTestingChildrenWithRange:(NSRange)arg1 ;
-(id)_accessibilityAncestry;
-(id)_accessibilityUserTestingChildren;
-(long long)_accessibilityUserTestingChildrenCount;
-(id)_accessibilityUserTestingParent;
-(id)_accessibilityAbsoluteValue;
-(id)_accessibilityUserTestingElementType;
-(id)_accessibilityKeyboardKeyEnteredString;
-(bool)_accessibilityUserTestingIsDefaultButton;
-(bool)_accessibilityUserTestingIsCancelButton;
-(bool)_accessibilityUserTestingIsBackNavButton;
-(bool)_accessibilityUserTestingIsRightNavButton;
-(id)_accessibilityUserTestingSupplementaryViews:(bool)arg1 ;
-(void)_accessibilitySetUserTestingIsDefaultButton:(bool)arg1 ;
-(void)_accessibilitySetUserTestingIsCancelButton:(bool)arg1 ;
-(id)_accessibilityVisibleElementsForHostedWindowWithContextID:(unsigned)arg1 grouped:(bool)arg2 ;
-(bool)_accessibilityIsScannerElement;
-(id)_accessibilityScannerRootGroup;
-(id)_accessibilityVisibleElements;
-(id)_accessibilityVisibleElementsGrouped:(bool)arg1 ;
-(id)_accessibilityRemoteVisibleElementsGrouped:(bool)arg1 ;
-(void)_accessibilitySetIsScannerElement:(bool)arg1 ;
-(void)_accessibilityProcessScannerGroupElementPieces:(id)arg1 ;
-(id)_accessibilityScannerGroupElements;
-(bool)_accessibilityIsScannerGroup;
-(int)_accessibilityScannerGroupTraits;
-(void)_accessibilitySetIsScannerGroup:(bool)arg1 ;
-(void)_accessibilitySetScannerGroupTraits:(int)arg1 ;
-(bool)accessibilityPerformAction:(int)arg1 withValue:(id)arg2 ;
-(bool)_accessibilityHandleMagicTap;
-(void)_accessibilitySetActionBlock:(/*^block*/ id)arg1 withValue:(id)arg2 forKey:(unsigned)arg3 ;
-(bool)_accessibilityHasActionBlockForKey:(unsigned)arg1 ;
-(void)_accessibilityActionBlock:(/*^block*/ id*)arg1 andValue:(id*)arg2 forKey:(unsigned)arg3 ;
-(bool)_accessibilityInternalHandleStartStopToggle;
-(void)_accessibilityRemoveAllActionBlocks;
-(void)_accessibilityRemoveActionBlockForKey:(unsigned)arg1 ;
-(id)_accessibilityAutoscrollTarget;
-(int)_accessibilityAvailableAutoscrollDirections;
-(bool)_accessibilityIsAutoscrolling;
-(void)_accessibilitySetAutoscrollTarget:(id)arg1 ;
-(void)_accessibilityAutoscrollInDirection:(int)arg1 ;
-(void)_accessibilityPauseAutoscrolling;
-(void)_accessibilityIncreaseAutoscrollSpeed;
-(void)_accessibilityDecreaseAutoscrollSpeed;
-(void)_accessibilityAutoscrollScrollToTop;
-(void)_accessibilityAutoscrollScrollToBottom;
-(void)accessibilitySetIdentification:(id)arg1 ;
-(void)accessibilityElementDidBecomeFocused;
-(void)accessibilityElementDidLoseFocus;
-(bool)accessibilityElementIsFocused;
-(void)accessibilityIncrement;
-(void)accessibilityDecrement;
-(bool)accessibilityActivate;
-(long long)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(long long)arg1 ;
-(long long)indexOfAccessibilityElement:(id)arg1 ;
-(void)_accessibilityPostAnnouncement:(id)arg1 ;
-(bool)_accessibilityElementShouldBeInvalid;
-(id)accessibilityAttributeValue:(int)arg1 ;
-(bool)_accessibilityIsNotFirstElement;
-(bool)_accessibilityIsTouchContainer;
-(bool)isAccessibilityOpaqueElementProvider;
-(id)_accessibilitySupplementaryFooterViews;
-(id)_accessibilitySupplementaryHeaderViews;
-(void)accessibilityEnumerateContainerElementsUsingBlock:(/*^block*/ id)arg1 ;
-(bool)accessibilityShouldEnumerateContainerElementsArrayDirectly;
-(id)accessibilityContainerElements;
-(id)accessibilityAttributeValue:(int)arg1 forParameter:(id)arg2 ;
-(bool)_accessibilityHitTestsStatusBar;
-(id)_accessibilityHitTest:(CGPoint)arg1 withEvent:(id)arg2 ;
-(id)_accessibilityTouchContainer;
-(void)_accessibilitySetValue:(id)arg1 forAttribute:(int)arg2 ;
-(id)_accessibilityBaseHitTest:(CGPoint)arg1 withEvent:(id)arg2 ;
-(bool)_accessibilityHitTestShouldFallbackToNearestChild;
-(CGRect)_accessibilityClassicModeFrame:(CGRect)arg1 ;
-(bool)_accessibilityIsFrameOutOfBounds;
-(id)_accessibilityHitTestSupplementaryViews:(id)arg1 point:(CGPoint)arg2 withEvent:(id)arg3 ;
-(id)_accessibilityFuzzyHitTestElements;
-(bool)_accessibilityHitTestReverseOrder;
-(bool)_accessibilityOverridesInvisibility;
-(bool)_accessibilityIsMap;
-(bool)_accessibilityHasOrderedChildren;
-(bool)_accessibilityIsDescendantOfElement:(id)arg1 ;
-(id)accessibilityUserDefinedWindowVisible;
-(id)accessibilityUserDefinedIsMainWindow;
-(void)_accessibilityIterateScrollParentsUsingBlock:(/*^block*/ id)arg1 includeSelf:(bool)arg2 ;
-(bool)_accessibilityShouldUseViewHierarchyForFindingScrollParent;
-(id)_accessibilityParentForFindingScrollParent;
-(CGPoint)_accessibilityVisibleScrollArea:(bool)arg1 ;
-(void)_accessibilityIterateScrollParentsUsingBlock:(/*^block*/ id)arg1 ;
-(id)_accessibilityScrollAncestorForSelector:(SEL)arg1 ;
-(bool)_accessibilityShouldSpeakScrollStatusOnEntry;
-(id)_accessibilityScrollStatus;
-(bool)_accessibilityIsScrollAncestor;
-(id)_accessibilityScrollAncestor;
-(bool)_accessibilityCanPerformEscapeAction;
-(bool)_accessibilityIterateParentsForTestBlock:(/*^block*/ id)arg1 ;
-(id)_accessibilityAncestorIsKindOf:(Class)arg1 ;
-(bool)_accessibilityCanPerformAction:(int)arg1 ;
-(bool)_accessibilityScrollingEnabled;
-(bool)_accessibilityShouldAttemptScrollToFrameOnParentView;
-(CGRect)accessibilityFrameForScrolling;
-(bool)_accessibilityScrollToFrame:(CGRect)arg1 forView:(id)arg2 ;
-(bool)_accessibilityHandlePublicScroll:(long long)arg1 ;
-(void)accessibilityScrollLeftPage;
-(void)accessibilityScrollRightPage;
-(void)accessibilityScrollUpPage;
-(void)accessibilityScrollDownPage;
-(void)accessibilityEnumerateContainerElementsWithOptions:(unsigned long long)arg1 usingBlock:(/*^block*/ id)arg2 ;
-(bool)_accessibilityServesAsContainingParentForOrdering;
-(id)_accessibilityParentView;
-(id)_accessibilityContainerInDirection:(bool)arg1 originalElement:(id)arg2 ;
-(id)_accessibilityNextElementsWithCount:(unsigned)arg1 originalElement:(id)arg2 ;
-(id)_accessibilityPreviousElementsWithCount:(unsigned)arg1 originalElement:(id)arg2 ;
-(bool)_accessibilitySupportsActivateAction;
-(bool)accessibilityScrollToTopSupported;
-(CGPoint)_accessibilityVisiblePointHitTestingAnyElement:(bool)arg1 ;
-(unsigned)_accessibilityContextId;
-(id)_accessibilityWindow;
-(CGPoint)_accessibilityVisiblePoint;
-(id)accessibilityUserDefinedServesAsFirstElement;
-(id)accessibilityUserDefinedNotFirstElement;
-(id)accessibilityCustomRotorTitles;
-(id)_accessibilityContainerForAccumulatingCustomRotorItems;
-(void)_accessibilityEnumerateAllCustomRotorTitlesWithAccumulator:(id*)arg1 usingBlock:(/*^block*/ id)arg2 ;
-(id)accessibilityCustomRotorItemsAtIndex:(long long)arg1 ;
-(id)_accessibilityFirstVisibleItem;
-(bool)_accessibilityIsInTableCell;
-(id)accessibilityLabelForRange:(NSRange*)arg1 ;
-(id)_accessibilityLineNumberAndColumnForPoint:(CGPoint)arg1 ;
-(NSRange)_accessibilityRangeForLineNumberAndColumn:(id)arg1 ;
-(NSRange)_accessibilityRangeForTextMarker:(id)arg1 ;
-(id)_accessibilityTableViewCellWithRowIndex:(long long)arg1 andColumn:(long long)arg2 ;
-(id)_accessibilityValueForRange:(NSRange*)arg1 ;
-(id)_accessibilityAttributedValueForRange:(NSRange*)arg1 ;
-(id)_accessibilityAllCustomRotorItemsAtIndex:(long long)arg1 ;
-(bool)_accessibilityIsFirstSiblingForTrait:(unsigned long long)arg1 ;
-(bool)_accessibilityIsLastSiblingForTrait:(unsigned long long)arg1 ;
-(id)_accessibilityAncestorForSiblingsWithTraits:(unsigned long long)arg1 ;
-(id)_accessibilityOpaqueElementsFrom:(id)arg1 direction:(int)arg2 searchTraits:(unsigned long long)arg3 ;
-(id)_accessibilityElementsForSearchParameter:(id)arg1 ;
-(CGRect)_accessibilityBoundsForRange:(NSRange)arg1 ;
-(CGPoint)_accessibilityConvertPointToViewSpace:(CGPoint)arg1 ;
-(long long)accessibilityLineNumberForPoint:(CGPoint)arg1 ;
-(CGRect)accessibilityFrameForLineNumber:(long long)arg1 ;
-(id)accessibilityContentForLineNumber:(long long)arg1 ;
-(id)_accessibilityLineStartMarker:(id)arg1 ;
-(void)_accessibilityMoveSelectionToMarker:(id)arg1 ;
-(id)_accessibilityMarkerForPoint:(CGPoint)arg1 ;
-(id)_accessibilityMarkersForPoints:(id)arg1 ;
-(id)_accessibilityMarkersForRange:(NSRange)arg1 ;
-(id)_accessibilityMarkerLineEndsForMarkers:(id)arg1 ;
-(id)_accessibilityLineEndMarker:(id)arg1 ;
-(id)_accessibilityNextMarker:(id)arg1 ;
-(id)_accessibilityPreviousMarker:(id)arg1 ;
-(id)accessibilityStringForTextMarkers:(id)arg1 ;
-(id)_accessibilityObjectForTextMarker:(id)arg1 ;
-(CGRect)accessibilityBoundsForTextMarkers:(id)arg1 ;
-(id)_accessibilityUpcomingRoadForPoint:(CGPoint)arg1 forAngle:(float)arg2 ;
-(float)_accessibilityDistanceFromEndOfRoad:(CGPoint)arg1 forAngle:(float)arg2 ;
-(bool)_accessibilityRoadContainsTrackingPoint:(CGPoint)arg1 ;
-(id)_accessibilityMapDetailedInfoAtPoint:(CGPoint)arg1 ;
-(id)accessibilityArrayOfTextForTextMarkers:(id)arg1 ;
-(NSRange)_accessibilityLineRangeForPosition:(unsigned long long)arg1 ;
-(id)_accessibilityKeyboardKeyForString:(id)arg1 ;
-(long long)_accessibilityIndexForPickerString:(id)arg1 ;
-(id)_accessibilityDataDetectorScheme:(CGPoint)arg1 ;
-(CGRect)_accessibilityVisibleFrame;
-(id)_accessibilityString:(id)arg1 withSpeechHint:(id)arg2 ;
-(id)accessibilitySecondaryLabel;
-(bool)_accessibilityIsScrollable;
-(bool)_accessibilityHasTextOperations;
-(bool)_accessibilityReadAllContinuesWithScroll;
-(bool)_accessibilityIsUserInteractionEnabled;
-(id)_accessibilityDOMAttributes;
-(NSRange)_accessibilitySelectedTextRange;
-(CGRect)_accessibilityTextCursorFrame;
-(id)accessibilityMathEquation;
-(id)accessibilityMathMLSource;
-(bool)_accessibilityShouldSpeakMathEquationTrait;
-(bool)_accessibilityIsTourGuideRunning;
-(bool)_accessibilityOverridesInstructionsHint;
-(id)_accessibilityBundleIdentifier;
-(int)_accessibilityMapFeatureType;
-(bool)_accessibilityLastHitTestNearBorder;
-(bool)_accessibilityRetainsCustomRotorActionSetting;
-(id)_accessibilityOpaqueElementParent;
-(id)_accessibilitySupportedLanguages;
-(bool)_allowCustomActionHintSpeakOverride;
-(id)_accessibilityHandwritingAncestor;
-(id)_accessibilityHandwritingAttributes;
-(bool)_accessibilityIsTableCell;
-(id)_accessibilityTextOperations;
-(id)_accessibilityStatusBar;
-(float)_accessibilityActivationDelay;
-(bool)_accessibilityIsInAppSwitcher;
-(CGRect)_accessibilityGesturePracticeRegion;
-(id)_accessibilitySupportGesturesAttributes;
-(long long)_accessibilityLineStartPosition;
-(long long)_accessibilityLineEndPosition;
-(bool)_accessibilityShouldAvoidAnnouncing;
-(id)_accessibilityPageTextMarkerRange;
-(id)_accessibilityTextMarkerRange;
-(id)_accessibilityTextMarkerRangeForSelection;
-(NSRange)_accessibilitySelectedNSRangeForObject;
-(id)_accessibilityUserTestingVisibleCells;
-(id)_accessibilityUserTestingVisibleSections;
-(CGPoint)_accessibilityMinScrubberPosition;
-(CGPoint)_accessibilityMaxScrubberPosition;
-(bool)_accessibilityCameraIrisOpen;
-(id)_accessibilityVisibleItemInList;
-(bool)__accessibilityReadAllOnFocus;
-(bool)_accessibilityIsAwayAlertElement;
-(bool)_accessibilityIsAwayAlertElementNew;
-(id)_accessibilityApplication;
-(bool)_accessibilityAnimationsInProgress;
-(bool)__accessibilitySupportsActivateAction;
-(bool)_accessibilityIsEscapable;
-(CGPoint)__accessibilityVisibleScrollArea:(bool)arg1 ;
-(int)_accessibilityPickerType;
-(unsigned long long)_accessibilityDatePickerComponentType;
-(id)_accessibilityDateTimePickerValues;
-(id)_accessibilityAutomaticIdentifier;
-(id)accessibilityPageContent;
-(id)_accessibilityPageContent;
-(bool)_accessibilityIncludeDuringContentReading;
-(bool)_accessibilityWebSearchResultsActive;
-(bool)_accessibilityIsFirstSibling;
-(bool)_accessibilityIsLastSibling;
-(long long)_accessibilityPageControlIndex;
-(long long)_accessibilityPageControlCount;
-(bool)_accessibilityIsVisible;
-(bool)_accessibilityBackingElementIsValid;
-(id)_accessibilityInputIdentifierForKeyboard;
-(bool)_accessibilityBookShowsDualPages;
-(id)_accessibiltyAvailableKeyplanes;
-(id)_accessibilityAllCustomRotorTitles;
-(id)accessibilityCustomActions;
-(bool)_accessibilityShouldAnnounceFontInfo;
-(bool)_accessibilityKeyboardKeyAllowsTouchTyping;
-(bool)_accessibilityAllowsAlternativeCharacterActivation;
-(id)_accessibilityPhotoDescription;
-(id)_accessibilityElementStoredUserLabel;
-(bool)_accessibilityElementVisibilityAffectsLayout;
-(id)_accessibilityVariantKeys;
-(bool)_accessibilityHasVariantKeys;
-(bool)_accessibilityCanScrollInAtLeastOneDirection;
-(bool)_accessibilityUpdatesOnActivationAfterDelay;
-(id)_accessibilityEquivalenceTag;
-(void)_accessibilityInsertText:(id)arg1 atPosition:(long long)arg2 ;
-(bool)_accessibilityHandwritingAttributeShouldEchoCharacter;
-(void)_accessibilitySetSelectedTextRange:(NSRange)arg1 ;
-(void)_accessibilitySetValue:(id)arg1 ;
-(void)_accessibilityHandleATFocused:(bool)arg1 ;
-(void)_accessibilitySetWantsOpaqueElementProviders:(bool)arg1 ;
-(void)_accessibilitySetCurrentWordInPageContext:(id)arg1 ;
-(bool)_accessibilityUsesSpecialKeyboardDismiss;
-(bool)_accessibilityOpaqueElementScrollsContentIntoView;
-(void)_accessibilityOpaqueElementScrollToDirection:(int)arg1 ;
-(id)_accessibilitySortedElementsWithin;
-(id)_accessibilityFindElementInDirection:(int)arg1 searchTraits:(unsigned long long)arg2 allowOutOfBoundsChild:(bool)arg3 ;
-(void)_accessibilityScrollOpaqueElementIntoView:(int)arg1 previousScroller:(id)arg2 ;
-(id)_accessibilityFindDescendant:(/*^block*/ id)arg1 ;
-(id)_accessibilityFindAncestor:(/*^block*/ id)arg1 startWithSelf:(bool)arg2 ;
-(long long)accessibilityCompareGeometry:(id)arg1 ;
-(id)_accessibilityFindAnyAXDescendant:(/*^block*/ id)arg1 byAddingElements:(/*^block*/ id)arg2 ;
-(id)_accessibilityFindAXDescendants:(/*^block*/ id)arg1 byAddingElements:(/*^block*/ id)arg2 ;
-(id)_accessibilityFindSubviewDescendant:(/*^block*/ id)arg1 ;
-(long long)_accessibilitySortPriority;
-(long long)_accessibilitySortPriorityWithReturningView:(id*)arg1 ;
-(CGRect)_accessibilityContentFrame;
-(id)_accessibilityContainingParentForOrdering;
-(CGRect)_accessibilityCompareFrameForScrollParent:(id)arg1 frame:(CGRect)arg2 ;
-(bool)_accessibilityIgnoresScrollParentOffsetForSorting;
-(bool)_accessibilityAlwaysOrderedFirst;
-(double)_accessibilityAllowedGeometryOverlap;
-(bool)_accessibilityOnlyComparesByXAxis;
-(CGRect)_accessibilityConvertFrameForRemoteView:(CGRect)arg1 orientation:(long long)arg2 ;
-(bool)_accessibilityOverridesInvalidFrames;
-(id)_accessibilityScrollParent;
-(id)_accessibilityHeaderElement;
-(void)accessibilityZoomInAtPoint:(CGPoint)arg1 ;
-(void)accessibilityZoomOutAtPoint:(CGPoint)arg1 ;
-(id)_accessibilityTextViewTextOperationResponder;
-(bool)accessibilityEditOperationAction:(id)arg1 ;
-(void)_accessibilityCut;
-(void)_accessibilityPaste;
-(void)_accessibilitySelectAll;
-(void)_accessibilitySelect;
-(void)_accessibilityDelete;
-(void)_accessibilityReplace;
-(void)_accessibilityPlaySystemSound:(int)arg1 ;
-(bool)_accessibilityShouldReleaseAfterUnregistration;
-(id)_accessibilityTextMarkerForPosition:(long long)arg1 ;
-(bool)_accessibilityReadAllOnFocus;
-(id)_accessibilityTextChecker;
-(void)_accessibilityAddMispellingsToAttributedString:(id)arg1 ;
-(bool)_accessibilitySupportsHandwriting;
-(id)_accessibilityViewController;
-(int)_accessibilityHandwritingAttributePreferredCharacterSet;
-(bool)_accessibilityHandwritingAttributeCanDeleteCharacter;
-(bool)_accessibilityHandwritingAttributeShouldPlayKeyboardSecureClickSound;
-(bool)_accessibilityHandwritingAttributeAcceptsRawInput;
-(int)_accessibilityHandwritingAttributeAllowedCharacterSets;
-(int)_accessibilityHandwritingAttributePreferredCharacterSetForKeyboardType:(long long)arg1 ;
-(int)_accessibilityHandwritingAttributeAllowedCharacterSetsForKeyboardType:(long long)arg1 ;
-(bool)_accessibilityDispatchKeyboardAction:(id)arg1 ;
-(void)_accessibilityPostNotificationHelper:(id)arg1 ;
-(bool)accessibilityStartStopToggle;
-(bool)_accessibilitySelfFoundByHitTesting;
-(bool)accessibilityIsWindow;
-(void)setIsAccessibilityWindow:(bool)arg1 ;
-(bool)_accessibilityWindowVisible;
-(void)_setAccessibilityWindowVisible:(bool)arg1 ;
-(bool)_accessibilityIsMainWindow;
-(void)_setAccessibilityIsMainWindow:(bool)arg1 ;
-(bool)accessibilityScrollLeftPageSupported;
-(bool)accessibilityScrollRightPageSupported;
-(bool)accessibilityScrollDownPageSupported;
-(bool)accessibilityScrollUpPageSupported;
-(void)setIsAccessibilityScrollAncestor:(bool)arg1 ;
-(bool)_accessibilityScrollToVisible;
-(void)_accessibilityScrollToPoint:(CGPoint)arg1 ;
-(void)_accessibilityScrollLeftPage;
-(bool)_accessibilityScrollNextPage;
-(bool)_accessibilityScrollPreviousPage;
-(void)_accessibilityScrollRightPage;
-(void)_accessibilityScrollUpPage;
-(void)_accessibilityScrollDownPage;
-(bool)_accessibilityUsesScrollParentForOrdering;
-(void)_accessibilityResetContainerElements;
-(bool)_accessibilityIsTitleElement;
-(id)_accessibilityLaunchableApps;
-(id)_accessibilityAppSwitcherApps;
-(bool)_accessibilitySupportsMultipleCustomRotorTitles;
-(bool)_accessibilityIsMathTouchExplorationView;
-(bool)_accessibilityOpaqueElementProvider;
-(void)_accessibilityRemoveTrait:(unsigned long long)arg1 ;
-(void)_accessibilityAddTrait:(unsigned long long)arg1 ;
-(bool)_accessibilityServesAsFirstElement;
-(void)_setAccessibilityServesAsFirstElement:(bool)arg1 ;
-(void)_setAccessibilityIsNotFirstElement:(bool)arg1 ;
-(id)_accessibilityFirstElementForFocus;
-(void)_setAccessibilityUpdatesOnActivationAfterDelay:(bool)arg1 ;
-(id)_accessibilityBriefLabel;
-(bool)_accessibilityIsFirstElementForFocus;
-(bool)_accessibilityServesAsFirstResponder;
-(id)_accessibilityResponderElement;
-(void)_accessibilityFindSearchResult:(bool)arg1 withString:(id)arg2 ;
-(void)_accessibilityJumpToTableIndex:(id)arg1 ;
-(bool)_accessibilityPerformLabelling:(id)arg1 ;
-(void)_accessibilitySwitchOrderedChildrenFrom:(id)arg1 ;
-(bool)_accessibilityCanDismissPopoverController:(id)arg1 ;
-(bool)_accessibilityContainedByTableLogicIsEnabledOutsideOfWebContext;
-(bool)_accessibilityCanDeleteTableViewCell;
-(bool)_accessibilityDidDeleteTableViewCell;
-(bool)_accessibilityRespectsTableScrollEnabledFlag;
-(void)_accessibilityChangeToKeyplane:(id)arg1 ;
-(bool)_accessibilityTableCellUsesDetailTextAsValue;
-(void)_setAccessibilityTableCellUsesDetailTextAsValue:(bool)arg1 ;
-(id)_accessibilityRetrieveImagePathLabel:(id)arg1 ;
-(bool)_accessibilitySortCollectionViewLogically;
-(id)_accessibilityFirstOpaqueElement;
-(id)_accessibilityLastOpaqueElement;
-(bool)_accessibilityDidSetOpaqueElementProvider;
-(void)setIsAccessibilityOpaqueElementProvider:(bool)arg1 ;
-(bool)_accessibilityWantsOpaqueElementProviders;
-(id)_accessibilitySearchSubtreesAfterChildElement:(id)arg1 direction:(int)arg2 searchTraits:(unsigned long long)arg3 allowOutOfBoundsChild:(bool)arg4 ;
-(id)_accessibilityDescendantOfType:(Class)arg1 ;
-(bool)_accessibilityHasDescendantOfType:(Class)arg1 ;
-(id)_accessibilityUnignoredDescendant;
-(id)accessibilityViewWithIdentifier:(id)arg1 ;
-(id)_accessibilityViewAncestorIsKindOf:(Class)arg1 ;
-(id)_accessibilityAncestorIsAccessibilityElementsHidden;
-(id)_accessibilityFindSubviewDescendantsPassingTest:(/*^block*/ id)arg1 ;
-(id)_accessibilityControlDescendantWithTarget:(id)arg1 ;
-(id)_accessibilityControlDescendantWithAction:(SEL)arg1 ;
-(void)setAccessibilitySize:(CGSize)arg1 ;
-(void)_accessibilitySetAllowedGeometryOverlap:(double)arg1 ;
-(void)_accessibilitySetOverridesInvisibility:(bool)arg1 ;
-(void)_accessibilitySetIgnoresScrollParentOffsetForSorting:(bool)arg1 ;
-(long long)_accessibilityCompareGeometryForViewOrDictionary:(id)arg1 ;
-(UIEdgeInsets)_accessibilityContentInset;
-(void)_accessibilitySetSortPriority:(long long)arg1 ;
-(void)_setAccessibilityObscuresScreen:(bool)arg1 ;
-(bool)_accessibilityObscuresScreen;
-(id)accessibilityMenuActions;
-(void)_accessibilitySetCurrentGesture:(id)arg1 ;
-(bool)accessibilityPerformCustomAction:(long long)arg1 ;
-(bool)_accessibilityTextOperationAction:(id)arg1 ;
-(void)_accessibilitySetCameraIrisOpen:(bool)arg1 ;
-(void)_accessibilitySetIsTourGuideRunning:(bool)arg1 ;
-(void)_accessibilityPlayKeyboardClickSound;
-(void)_accessibilityLoadAccessibilityInformation;
-(void)__accessibilityUnregister:(void*)arg1 shouldRelease:(bool)arg2 ;
-(void)_accessibilitySetAnimationsInProgress:(bool)arg1 ;
-(bool)_accessibilityTriggerDictationFromPath:(id)arg1 ;
-(void)_accessibilityReplaceCharacterAtCursor:(id)arg1 ;
-(bool)_accessibilityHandwritingActivateKeyboardReturnKey;
-(bool)_accessibilityHandwritingActivateKeyboardDeleteKey;
-(void)_accessibilityDecreaseSelection:(id)arg1 ;
-(void)_accessibilityIncreaseSelection:(id)arg1 ;
-(bool)_accessibilityLanguageOverriddesUser;
-(id)_axSuperviews;
-(id)_axDebugTraits;
-(void)_accessibilityAnnouncementComplete:(id)arg1 ;
-(void)_accessibilityIgnoreNextNotification:(unsigned)arg1 ;
-(void)accessibilityPostNotification:(unsigned)arg1 withObject:(id)arg2 afterDelay:(double)arg3 ;
-(id)isAccessibilityUserDefinedWindow;
-(id)isAccessibilityUserDefinedScrollAncestor;
-(id)accessibilityIdentification;
-(id)accessibilityUserDefinedSize;
-(void)_accessibilityUnregister;
-(id)accessibilityHitTest:(CGPoint)arg1 ;
-(double)_accessibilityMinValue;
-(double)_accessibilityMaxValue;
-(id)accessibilityTitleElement;
-(id)accessibilityHeaderElements;
-(id)accessibilityElementForRow:(long long)arg1 andColumn:(long long)arg2 ;
-(NSRange)accessibilityRowRange;
-(NSRange)accessibilityColumnRange;
-(id)accessibilityPlaceholderValue;
-(bool)accessibilityIsComboBox;
-(id)accessibilityURL;
-(bool)accessibilityRequired;
-(id)accessibilityFlowToElements;
-(id)accessibilityLinkedElement;
-(id)accessibilitySpeechHint;
-(id)accessibilityInvalidStatus;
-(bool)_accessibilityPerformEscape;
-(id)deepMutableObject;
-(bool)isAXAttributedString;
-(id)delayedProxy:(double)arg1 ;
-(id)mainThreadProxy;
-(id)blockingMainThreadProxy;
-(id)className;
-(id)_uikit_disconnect;
-(id)proxyWithNewTarget:(id)arg1 queue:(id)arg2 errorHandler:(/*^block*/ id)arg3 ;
-(void)setRemoteProtocol:(id)arg1 ;
-(id)proxyWithNewTarget:(id)arg1 label:(id)arg2 errorHandler:(/*^block*/ id)arg3 ;
-(id)proxyWithRemoteProtocol:(id)arg1 ;
-(unsigned long long)defaultAccessibilityTraits;
-(bool)isAccessibilityElementByDefault;
-(bool)isElementAccessibilityExposedToInterfaceBuilder;
-(void)_accessibilityFinalize;
-(void)accessibilitySetIdentification:(id)arg1 ;
-(long long)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(long long)arg1 ;
-(long long)indexOfAccessibilityElement:(id)arg1 ;
-(void)accessibilityIncrement;
-(void)accessibilityDecrement;
-(bool)accessibilityScroll:(long long)arg1 ;
-(bool)accessibilityPerformEscape;
-(bool)accessibilityPerformMagicTap;
-(bool)accessibilityActivate;
-(void)accessibilityElementDidBecomeFocused;
-(void)accessibilityElementDidLoseFocus;
-(bool)accessibilityElementIsFocused;
-(id)accessibilityLabel;
-(CGRect)accessibilityFrame;
-(id)storedAccessibilityViewIsModal;
-(id)storedAccessibilityElementsHidden;
-(id)storedShouldGroupAccessibilityChildren;
-(id)accessibilityValue;
-(id)accessibilityHint;
-(CGPoint)accessibilityActivationPoint;
-(unsigned long long)accessibilityTraits;
-(bool)isAccessibilityElement;
-(id)accessibilityContainer;
-(id)accessibilityLanguage;
-(id)accessibilityPath;
-(id)accessibilityIdentifier;
-(bool)accessibilityViewIsModal;
-(bool)accessibilityElementsHidden;
-(bool)shouldGroupAccessibilityChildren;
-(id)storedAccessibilityTraits;
-(id)storedIsAccessibilityElement;
-(id)storedAccessibilityFrame;
-(id)storedAccessibilityActivationPoint;
-(void)setAccessibilityElementsHidden:(bool)arg1 ;
-(void)setAccessibilityViewIsModal:(bool)arg1 ;
-(void)setAccessibilityLabel:(id)arg1 ;
-(void)setAccessibilityValue:(id)arg1 ;
-(void)setAccessibilityHint:(id)arg1 ;
-(void)setAccessibilityFrame:(CGRect)arg1 ;
-(void)setAccessibilityPath:(id)arg1 ;
-(void)setAccessibilityActivationPoint:(CGPoint)arg1 ;
-(void)setAccessibilityTraits:(unsigned long long)arg1 ;
-(void)setIsAccessibilityElement:(bool)arg1 ;
-(void)setAccessibilityContainer:(id)arg1 ;
-(void)setAccessibilityLanguage:(id)arg1 ;
-(void)setAccessibilityIdentifier:(id)arg1 ;
-(void)setShouldGroupAccessibilityChildren:(bool)arg1 ;
-(void)awakeFromNib;
-(void)_connectInterfaceBuilderEventConnection:(id)arg1 ;
-(id)__ivarDescriptionForClass:(Class)arg1 ;
-(id)__methodDescriptionForClass:(Class)arg1 ;
-(id)_ivarDescription;
-(id)_methodDescription;
-(id)_shortMethodDescription;
-(id)ax_prettyDescription;
-(void)_ax_appendPrettyDescriptionToString:(id)arg1 indentationString:(id)arg2 visitedCollections:(id)arg3 ;
-(id)axTrampolineForClass:(Class)arg1 ;
-(id)axSuperTrampoline;
-(id)_accessibilityValueForKey:(id)arg1 ;
-(void)_accessibilitySetValue:(id)arg1 forKey:(id)arg2 storageMode:(int)arg3 ;
-(void)_accessibilitySetRetainedValue:(id)arg1 forKey:(id)arg2 ;
-(bool)_accessibilityBoolValueForKey:(id)arg1 ;
-(long long)_accessibilityIntegerValueForKey:(id)arg1 ;
-(unsigned long long)_accessibilityUnsignedIntegerValueForKey:(id)arg1 ;
-(void)_accessibilitySetAssignedValue:(id)arg1 forKey:(id)arg2 ;
-(void)_accessibilitySetBoolValue:(bool)arg1 forKey:(id)arg2 ;
-(void)_accessibilitySetIntegerValue:(long long)arg1 forKey:(id)arg2 ;
-(void)_accessibilitySetUnsignedIntegerValue:(unsigned long long)arg1 forKey:(id)arg2 ;
-(void)_accessibilityRemoveValueForKey:(id)arg1 ;
-(void*)safeIvarForKey:(id)arg1 ;
-(bool)safeBoolForKey:(id)arg1 ;
-(id)safeValueForKeyPath:(id)arg1 ;
-(void)handleFailoversForClassNamed:(id)arg1 ;
-(id)safeValueForKey:(id)arg1 ;
-(id)_webkit_invokeOnMainThread;
-(id)threadDescription;
-(id)performSelector:(SEL)arg1 withObjectsAsArray:(id)arg2 ;
-(void)_scr_safeGetValueForKeyPath:(id)arg1 lock:(id)arg2 ;
-(void)_scr_safeGetValueForKeyPath:(id)arg1 ;
-(id)_getRetainedValueForKeyPathOnMainThread:(id)arg1 copy:(bool)arg2 ;
-(double)performSelector:(SEL)arg1 withThreadKey:(id)arg2 waitTime:(double)arg3 cancelMask:(unsigned)arg4 count:(unsigned)arg5 objects:(id)arg6 ;
-(id)valueForKeyPath:(id)arg1 forThreadKey:(id)arg2 waitTime:(double)arg3 ;
-(id)_getRetainedValueForKeyPath:(id)arg1 forThreadKey:(id)arg2 waitTime:(double)arg3 copy:(bool)arg4 ;
-(id)copyValueForKeyPath:(id)arg1 forThreadKey:(id)arg2 waitTime:(double)arg3 ;
-(void)_scr_safeGetValueForSelector:(id)arg1 lock:(id)arg2 ;
-(void)_scr_safeGetValueForBlock:(id)arg1 lock:(id)arg2 ;
-(double)performSelector:(SEL)arg1 withThreadKey:(id)arg2 count:(unsigned)arg3 objects:(id)arg4 ;
-(id)valueForKeyPathOnMainThread:(id)arg1 ;
-(id)copyValueForKeyPathOnMainThread:(id)arg1 ;
-(id)valueForKeyPath:(id)arg1 forThreadKey:(id)arg2 ;
-(id)copyValueForKeyPath:(id)arg1 forThreadKey:(id)arg2 ;
-(id)valueForSelector:(SEL)arg1 forThreadKey:(id)arg2 waitTime:(double)arg3 copyValue:(bool)arg4 withObjects:(id)arg5 ;
-(id)valueForBlock:(/*^block*/ id)arg1 forThreadKey:(id)arg2 waitTime:(double)arg3 ;
-(void)releaseOnMainThread;
-(id)__im_afterDelay:(double)arg1 ;
-(id)__im_afterDelay:(double)arg1 modes:(id)arg2 ;
-(id)__im_onThread:(id)arg1 ;
-(id)__im_onThread:(id)arg1 immediateForMatchingThread:(bool)arg2 ;
-(id)__im_onMainThread;
-(id)__im_onMainThreadIfNecessary;
-(id)__im_onDetachedThread;
-(id)__im_getInvocation:(id*)arg1 ;
-(void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 ignoreMenuTracking:(bool)arg4 ;
-(bool)isNull;
-(void)postNotificationWithDescription:(id)arg1 ;
-(bool)okToNotifyFromThisThread;
-(void)fromNotifySafeThreadPerformSelector:(SEL)arg1 withObject:(id)arg2 ;
-(void)allowSafePerformSelector;
-(void)disallowSafePerformSelector;
-(void)fromNotifySafeThreadPostNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3 ;
-(void)fromMainThreadPostNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3 ;
-(void)encodeWithCAMLWriter:(id)arg1 ;
-(id)CAMLTypeForKey:(id)arg1 ;
-(id)CAMLType;
-(id)CA_roundToIntegerFromValue:(id)arg1 ;
-(id)CA_interpolateValues:(id)arg1 :(id)arg2 :(id)arg3 interpolator:(const ValueInterpolator*)arg4 ;
-(double)CA_distanceToValue:(id)arg1 ;
-(id)CA_addValue:(id)arg1 multipliedBy:(int)arg2 ;
-(id)CA_interpolateValue:(id)arg1 byFraction:(float)arg2 ;
-(Object*)CA_copyRenderValue;
-(void)CA_prepareRenderValue;
-(bool)sbs_isPlistableType;
-(bool)bks_isPlistableType;
-(id)pep_onMainThread;
-(id)pep_afterDelay:(double)arg1 ;
-(id)pep_onMainThreadIfNecessary;
-(id)pep_onThread:(id)arg1 immediateForMatchingThread:(bool)arg2 ;
-(id)pep_onOperationQueue:(id)arg1 priority:(long long)arg2 ;
-(id)pep_onDetachedThread;
-(id)pep_onOperationQueue:(id)arg1 ;
-(id)pep_onThread:(id)arg1 ;
-(id)pep_getInvocation:(id*)arg1 ;
-(id)replacementObjectForPortCoder:(id)arg1 ;
-(Class)classForPortCoder;
-(void)performSelector:(SEL)arg1 onThread:(id)arg2 withObject:(id)arg3 waitUntilDone:(bool)arg4 modes:(id)arg5 ;
-(void)performSelectorOnMainThread:(SEL)arg1 withObject:(id)arg2 waitUntilDone:(bool)arg3 modes:(id)arg4 ;
-(void)performSelectorInBackground:(SEL)arg1 withObject:(id)arg2 ;
-(void)performSelectorOnMainThread:(SEL)arg1 withObject:(id)arg2 waitUntilDone:(bool)arg3 ;
-(void)performSelector:(SEL)arg1 onThread:(id)arg2 withObject:(id)arg3 waitUntilDone:(bool)arg4 ;
-(void)performSelector:(SEL)arg1 object:(id)arg2 afterDelay:(double)arg3 ;
-(void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 inModes:(id)arg4 ;
-(void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 ;
-(id)autoContentAccessingProxy;
-(id)replacementObjectForCoder:(id)arg1 ;
-(bool)implementsSelector:(SEL)arg1 ;
-(bool)_allowsDirectEncoding;
-(Class)classForCoder;
-(id)awakeAfterUsingCoder:(id)arg1 ;
-(Class)classForKeyedArchiver;
-(id)replacementObjectForKeyedArchiver:(id)arg1 ;
-(void)_willChangeValuesForKeys:(id)arg1 ;
-(void)_didChangeValuesForKeys:(id)arg1 ;
-(id)_implicitObservationInfo;
-(void)_changeValueForKey:(id)arg1 key:(id)arg2 key:(id)arg3 usingBlock:(/*^block*/ id)arg4 ;
-(void)_notifyObserversForKeyPath:(id)arg1 change:(id)arg2 ;
-(void)_changeValueForKey:(id)arg1 usingBlock:(/*^block*/ id)arg2 ;
-(void)setObservationInfo:(void*)arg1 ;
-(void*)observationInfo;
-(void)willChangeValueForKey:(id)arg1 withSetMutation:(unsigned long long)arg2 usingObjects:(id)arg3 ;
-(void)didChangeValueForKey:(id)arg1 withSetMutation:(unsigned long long)arg2 usingObjects:(id)arg3 ;
-(void)willChangeValueForKey:(id)arg1 ;
-(void)didChangeValueForKey:(id)arg1 ;
-(void)willChange:(unsigned long long)arg1 valuesAtIndexes:(id)arg2 forKey:(id)arg3 ;
-(void)didChange:(unsigned long long)arg1 valuesAtIndexes:(id)arg2 forKey:(id)arg3 ;
-(void)_addObserver:(id)arg1 forProperty:(id)arg2 options:(unsigned long long)arg3 context:(void*)arg4 ;
-(void)_removeObserver:(id)arg1 forProperty:(id)arg2 ;
-(void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void*)arg4 ;
-(void)removeObserver:(id)arg1 forKeyPath:(id)arg2 context:(void*)arg3 ;
-(void)removeObserver:(id)arg1 forKeyPath:(id)arg2 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(bool)_isKVOA;
-(id)mutableArrayValueForKey:(id)arg1 ;
-(bool)validateValue:(inout id*)arg1 forKey:(id)arg2 error:(out id*)arg3 ;
-(void)setNilValueForKey:(id)arg1 ;
-(bool)validateValue:(inout id*)arg1 forKeyPath:(id)arg2 error:(out id*)arg3 ;
-(id)mutableOrderedSetValueForKeyPath:(id)arg1 ;
-(id)mutableSetValueForKeyPath:(id)arg1 ;
-(void)setValue:(id)arg1 forKey:(id)arg2 ;
-(id)valueForKey:(id)arg1 ;
-(id)valueForKeyPath:(id)arg1 ;
-(void)setValue:(id)arg1 forKeyPath:(id)arg2 ;
-(void)setValuesForKeysWithDictionary:(id)arg1 ;
-(id)valueForUndefinedKey:(id)arg1 ;
-(id)dictionaryWithValuesForKeys:(id)arg1 ;
-(id)mutableArrayValueForKeyPath:(id)arg1 ;
-(id)mutableOrderedSetValueForKey:(id)arg1 ;
-(id)mutableSetValueForKey:(id)arg1 ;
-(void)setValue:(id)arg1 forUndefinedKey:(id)arg2 ;
-(Class)classForArchiver;
-(id)replacementObjectForArchiver:(id)arg1 ;
-(unsigned long long)_cfTypeID;
-(bool)isNSString__;
-(bool)isNSArray__;
-(bool)isNSSet__;
-(bool)isNSOrderedSet__;
-(bool)isNSDictionary__;
-(bool)isNSNumber__;
-(bool)isNSDate__;
-(bool)isNSData__;
-(bool)isNSTimeZone__;
-(bool)isNSValue__;
-(void)__dealloc_zombie;
-(id)__retain_OA;
-(oneway void)__release_OA;
-(id)__autorelease_OA;
-(bool)___tryRetain_OA;
-(id)_copyDescription;
-(id)description;
-(id)methodSignatureForSelector:(SEL)arg1 ;
-(void)doesNotRecognizeSelector:(SEL)arg1 ;
-(oneway void)release;
-(id)retain;
-(void)dealloc;
-(Class)class;
-(bool)respondsToSelector:(SEL)arg1 ;
-(id)init;
-(bool)isKindOfClass:(Class)arg1 ;
-(id)copy;
-(id)autorelease;
-(bool)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(Class)superclass;
-(id)self;
-(NSZone)zone;
-(id)performSelector:(SEL)arg1 ;
-(id)performSelector:(SEL)arg1 withObject:(id)arg2 ;
-(id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3 ;
-(bool)isProxy;
-(bool)isMemberOfClass:(Class)arg1 ;
-(bool)conformsToProtocol:(id)arg1 ;
-(unsigned long long)retainCount;
-(id)description;
-(id)debugDescription;
-(id)methodSignatureForSelector:(SEL)arg1 ;
-(id)mutableCopy;
-(bool)_tryRetain;
-(bool)_isDeallocating;
-(/*function pointer*/ void*)methodForSelector:(SEL)arg1 ;
-(id)forwardingTargetForSelector:(SEL)arg1 ;
-(void)forwardInvocation:(id)arg1 ;
-(bool)allowsWeakReference;
-(bool)retainWeakReference;
-(void)doesNotRecognizeSelector:(SEL)arg1 ;
-(bool)isFault;
-(void)finalize;
@end

