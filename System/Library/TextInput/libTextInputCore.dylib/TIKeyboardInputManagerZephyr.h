/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:03:40 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/TextInput/libTextInputCore.dylib
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <libTextInputCore.dylib/libTextInputCore.dylib-Structs.h>
#import <libTextInputCore.dylib/TIKeyboardInputManager.h>
#import <libTextInputCore.dylib/TIRevisionHistoryDelegate.h>

@class NSMutableString, TIKeyboardInputManagerConfig, CPLRUDictionary, TITextCheckerExemptions, TIRevisionHistory;

@interface TIKeyboardInputManagerZephyr : TIKeyboardInputManager <TIRevisionHistoryDelegate> {

	TIInputManagerZephyr* m_impl;
	NSMutableString* m_composedText;
	unsigned long long m_initialSelectedIndex;
	RefPtr<TIAutoshiftRegularExpression>* m_autoshift_regex;
	RefPtr<KB::TypologyLogger>* m_typology_recorder;
	bool _isEditingWordPrefix;
	TIKeyboardInputManagerConfig* _config;
	CPLRUDictionary* _autocorrectionHistory;
	CPLRUDictionary* _rejectedAutocorrections;
	CPLRUDictionary* _autocorrectionsSuggestedForCurrentInput;
	TITextCheckerExemptions* _textCheckerExemptions;
	USetRef _acceptableCharacterSet;
	TIRevisionHistory* _revisionHistory;

}

@property (nonatomic,readonly) TIKeyboardInputManagerConfig * config;                                  //@synthesize config=_config - In the implementation block
@property (nonatomic,readonly) TIRevisionHistory * revisionHistory;                                    //@synthesize revisionHistory=_revisionHistory - In the implementation block
@property (nonatomic,readonly) CPLRUDictionary * autocorrectionHistory;                                //@synthesize autocorrectionHistory=_autocorrectionHistory - In the implementation block
@property (nonatomic,readonly) CPLRUDictionary * rejectedAutocorrections;                              //@synthesize rejectedAutocorrections=_rejectedAutocorrections - In the implementation block
@property (nonatomic,readonly) CPLRUDictionary * autocorrectionsSuggestedForCurrentInput;              //@synthesize autocorrectionsSuggestedForCurrentInput=_autocorrectionsSuggestedForCurrentInput - In the implementation block
@property (assign,nonatomic) bool isEditingWordPrefix;                                                 //@synthesize isEditingWordPrefix=_isEditingWordPrefix - In the implementation block
@property (nonatomic,readonly) TITextCheckerExemptions * textCheckerExemptions;                        //@synthesize textCheckerExemptions=_textCheckerExemptions - In the implementation block
@property (nonatomic,readonly) USetRef acceptableCharacterSet;                                         //@synthesize acceptableCharacterSet=_acceptableCharacterSet - In the implementation block
-(void)setInput:(id)arg1 ;
-(void)dealloc;
-(void)suspend;
-(id)candidates;
-(id)keyboardBehaviors;
-(bool)usesCandidateSelection;
-(id)candidateResultSet;
-(unsigned long long)initialSelectedIndex;
-(void)setTypologyLoggingEnabled:(bool)arg1 ;
-(id)autocorrection;
-(void)clearInput;
-(unsigned)inputCount;
-(id)inputString;
-(void)textAccepted:(id)arg1 ;
-(unsigned)inputIndex;
-(void)resume;
-(bool)nextInputWouldStartSentence;
-(id)shadowTyping;
-(void)setOriginalInput:(id)arg1 ;
-(id)defaultCandidate;
-(void)setInHardwareKeyboardMode:(bool)arg1 ;
-(void)candidateRejected:(id)arg1 ;
-(void)setKeyboardEventsLagging:(bool)arg1 ;
-(bool)canHandleKeyHitTest;
-(bool)needsKeyHitTestResults;
-(id)autocorrectionRecordForWord:(id)arg1 ;
-(id).cxx_construct;
-(long long)keyHitTest:(id)arg1 ;
-(void).cxx_destruct;
-(id)config;
-(id)initWithInputMode:(id)arg1 ;
-(id)terminatorsPreventingAutocorrection;
-(id)wordCharacters;
-(bool)shouldAddModifierSymbolsToWordCharacters;
-(void)setInputIndex:(unsigned)arg1 ;
-(void)increaseUserFrequency:(id)arg1 usageFlags:(unsigned)arg2 ;
-(void)decreaseUserFrequency:(id)arg1 usageFlags:(unsigned)arg2 ;
-(void)rejectRevisitedWord;
-(void)setAutoCorrects:(bool)arg1 ;
-(TIInputManagerZephyr*)initImplementation;
-(bool)usesRetrocorrection;
-(void)loadDictionaries;
-(bool)doesComposeText;
-(void)deltaPathsChanged:(id)arg1 ;
-(id)initWithConfig:(id)arg1 ;
-(id)textCheckerExemptions;
-(void)setCollatorLocale;
-(void)syncToKeyboardState:(id)arg1 afterContextChange:(bool)arg2 ;
-(void)refreshInputManagerState;
-(id)internalStringToExternal:(id)arg1 ;
-(id)externalStringToInternal:(id)arg1 ;
-(bool)dictionaryUsesExternalEncoding;
-(id)pathToDeltaStaticDictionary;
-(void)loadFavoniusLanguageModel;
-(unsigned)simulateAutoshiftIfNecessaryForFlags:(unsigned)arg1 ;
-(id)revisionHistory;
-(void)trimInputBeforeIndex:(unsigned)arg1 ;
-(void)dropInputPrefix:(unsigned)arg1 ;
-(bool)hasLegacyInputStem;
-(bool)canStartSentenceAfterString:(id)arg1 ;
-(bool)canRetrocorrectInput:(id)arg1 withFlags:(unsigned)arg2 ;
-(bool)canTrimInputAtIndex:(unsigned)arg1 ;
-(void)checkAutocorrectionDictionaries;
-(void)setAutoshiftFromInputContext;
-(void)updateForRevisitedString:(id)arg1 ;
-(unsigned long long)deleteLengthForString:(id)arg1 ;
-(id)autocorrectionsSuggestedForCurrentInput;
-(unsigned)externalIndexToInternal:(unsigned)arg1 ;
-(unsigned)internalIndexToExternal:(unsigned)arg1 ;
-(id)inputStem;
-(void)recordAcceptedAutocorrection:(id)arg1 ;
-(void)recordRejectedAutocorrectionForAcceptedText:(id)arg1 ;
-(bool)shouldAllowCorrectionOfAcceptedCandidate:(id)arg1 ;
-(id)dictionaryStringForExternalString:(id)arg1 ;
-(void)acceptInput;
-(id)autocorrectionHistory;
-(id)rejectedAutocorrections;
-(id)nonstopPunctuationCharacters;
-(id)sentencePrefixingCharacters;
-(id)sentenceDelimitingCharacters;
-(id)sentenceTrailingCharacters;
-(id)inputContext;
-(id)phraseCandidateCompletedByWord:(const String*)arg1 allowNoSuggest:(bool)arg2 ;
-(id)autocorrectionCandidateForInput:(id)arg1 withCandidate:(const Candidate*)arg2 ;
-(void)recordSuggestedAutocorrection:(id)arg1 ;
-(bool)shouldSkipShortcutConversionForDocumentState:(id)arg1 ;
-(NSRange)shortcutSearchRangeForString:(id)arg1 ;
-(void)enumerateWordSuffixesOfString:(id)arg1 inRange:(NSRange)arg2 usingBlock:(/*^block*/ id)arg3 ;
-(id)shortcutConversionForString:(id)arg1 stringStartsInMiddleOfWord:(bool)arg2 ;
-(USetRef)createAcceptableCharacterSet;
-(void)setLearnsCorrection:(bool)arg1 ;
-(bool)inHardwareKeyboardMode;
-(void)clearDynamicDictionary;
-(id)addInput:(id)arg1 flags:(unsigned)arg2 point:(CGPoint)arg3 firstDelete:(unsigned long long*)arg4 fromVariantKey:(bool)arg5 ;
-(bool)hasLegacyInputString;
-(id)deleteFromInput:(unsigned long long*)arg1 ;
-(id)internalInputContext;
-(void)setInputContext:(id)arg1 ;
-(void)inputLocationChanged;
-(bool)supportsShortcutConversion;
-(unsigned long long)maximumShortcutLengthAllowed;
-(id)shortcutCompletionsForDocumentState:(id)arg1 ;
-(id)shortcutConversionForDocumentState:(id)arg1 ;
-(id)shortcutConversionForInput:(id)arg1 andExistingString:(id)arg2 existingStringStartsInMiddleOfWord:(bool)arg3 ;
-(void)_setUsesCandidateSelection:(bool)arg1 ;
-(id)candidatesForString:(id)arg1 ;
-(void)clearKeyAreas;
-(void)registerKeyArea:(CGRect)arg1 keyCode:(short)arg2 keyString:(const char*)arg3 ;
-(bool)acceptsCharacter:(unsigned)arg1 ;
-(bool)isEditingWordPrefix;
-(void)setIsEditingWordPrefix:(bool)arg1 ;
-(USetRef)acceptableCharacterSet;
@end

