/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:59:43 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <CoreFoundation/NSSecureCoding.h>

@protocol MPMediaLibraryDataProviderPrivate, OS_dispatch_queue;
@class NSObject, QueryCriteriaResultsCache, NSMutableDictionary, NSMutableArray, NSHashTable, CADisplayLink, NSString, NSURL, NSDate;

@interface MPMediaLibrary : NSObject <NSSecureCoding> {

	<MPMediaLibraryDataProviderPrivate>* _libraryDataProvider;
	long long _libraryChangeObservers;
	NSObject<OS_dispatch_queue>* _entityCacheQueue;
	NSObject<OS_dispatch_queue>* _fixedQueue;
	QueryCriteriaResultsCache* _itemsForCriteriaCache;
	QueryCriteriaResultsCache* _hasItemsForCriteriaCache;
	QueryCriteriaResultsCache* _countOfItemsForCriteriaCache;
	QueryCriteriaResultsCache* _itemResultSetsForCriteriaCache;
	QueryCriteriaResultsCache* _collectionsForCriteriaCache;
	QueryCriteriaResultsCache* _hasCollectionsForCriteriaCache;
	QueryCriteriaResultsCache* _countOfCollectionsForCriteriaCache;
	QueryCriteriaResultsCache* _collectionsResultSetsForCriteriaCache;
	NSMutableDictionary* _hasItemsDidLoadForCriteria;
	NSMutableDictionary* _hasCollectionsDidLoadForCriteria;
	NSMutableDictionary* _countOfCollectionsDidLoadForCriteria;
	NSMutableDictionary* _countOfItemsDidLoadForCriteria;
	NSMutableArray* _additionalLibraryFilterPredicates;
	NSObject<OS_dispatch_queue>* _additionalLibraryFilterPredicatesAccessQueue;
	NSHashTable* _connectionAssertions;
	bool _disconnectAfterReleasingAssertions;
	float _connectionProgress;
	CADisplayLink* _connectionProgressDisplayLink;
	double _connectionProgressStartTime;
	long long _removalReason;
	unsigned _determinedHasMedia : 1;
	unsigned _hasMedia : 1;
	unsigned _determinedHasSongs : 1;
	unsigned _hasSongs : 1;
	unsigned _determinedHasGeniusMixes : 1;
	unsigned _hasGeniusMixes : 1;
	unsigned _determinedHasPlaylists : 1;
	unsigned _hasPlaylists : 1;
	unsigned _determinedHasComposers : 1;
	unsigned _hasComposers : 1;
	unsigned _determinedHasPodcasts : 1;
	unsigned _hasPodcasts : 1;
	unsigned _determinedHasUbiquitousBookmarkableItems : 1;
	unsigned _hasUbiquitousBookmarkableContent : 1;
	unsigned _determinedHasAudiobooks : 1;
	unsigned _hasAudiobooks : 1;
	long long _cloudFilteringType;
	bool _filteringDisabled;
	bool _hasVideos;
	bool _determinedHasVideos;
	bool _hasMusicVideos;
	bool _determinedHasMusicVideos;
	bool _hasAudibleAudioBooks;
	bool _determinedHasAudibleAudioBooks;
	bool _hasMovies;
	bool _determinedHasMovies;
	bool _hasCompilations;
	bool _determinedHasCompilations;
	bool _hasITunesU;
	bool _determinedHasITunesU;
	bool _hasVideoITunesU;
	bool _determinedHasVideoITunesU;
	bool _hasMovieRentals;
	bool _determinedHasMovieRentals;
	bool _hasTVShows;
	bool _determinedHasTVShows;
	bool _hasHomeVideos;
	bool _determinedHasHomeVideos;
	bool _hasVideoPodcasts;
	bool _determinedHasVideoPodcasts;
	unsigned char _originalCellNetworkFlags;
	unsigned char _originalWiFiNetworkFlags;

}

@property (nonatomic,readonly) NSString * _syncValidity; 
@property (nonatomic,readonly) NSURL * protectedContentSupportStorageURL; 
@property (nonatomic,readonly) NSDate * lastModifiedDate; 
@property (assign,nonatomic) long long removalReason; 
+(id)deviceMediaLibrary;
+(id)defaultMediaLibrary;
+(void)setRunLoopForNotifications:(id)arg1 ;
+(id)mediaLibraries;
+(id)_mediaLibraries;
+(id)_libraryDataProviders;
+(id)_libraryForDataProvider:(id)arg1 ;
+(void)setDefaultMediaLibrary:(id)arg1 ;
+(void)beginDiscoveringMediaLibraries;
+(void)endDiscoveringMediaLibraries;
+(bool)isLibraryServerDisabled;
+(void)setLibraryServerDisabled:(bool)arg1 ;
+(id)mediaLibraryWithUniqueIdentifier:(id)arg1 ;
+(id)libraryDataProviders;
+(void)addLibraryDataProvider:(id)arg1 ;
+(void)removeLibraryDataProvider:(id)arg1 removalReason:(long long)arg2 ;
+(void)reloadLibraryDataProvider:(id)arg1 ;
+(void)reloadDynamicPropertiesForLibraryDataProvider:(id)arg1 ;
+(void)reloadInvisiblePropertiesForLibraryDataProvider:(id)arg1 ;
+(void)reloadDisplayValuesForLibraryDataProvider:(id)arg1 ;
+(void)syncGenerationDidChangeForLibraryDataProvider:(id)arg1 ;
+(void)uniqueIdentifierDidChangeForLibraryDataProvider:(id)arg1 ;
+(bool)supportsSecureCoding;
+(void)initialize;
-(id)errorResolverForMediaItem:(id)arg1 ;
-(void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 maximumRevisionType:(int)arg2 usingBlock:(/*^block*/ id)arg3 ;
-(id)_syncValidity;
-(void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 usingBlock:(/*^block*/ id)arg2 ;
-(id)protectedContentSupportStorageURL;
-(id)playlistWithPersistentID:(unsigned long long)arg1 ;
-(id)_itemsForQueryCriteria:(id)arg1 ;
-(id)_collectionsForQueryCriteria:(id)arg1 ;
-(bool)_hasItemsForQueryCriteria:(id)arg1 ;
-(bool)_hasCollectionsForQueryCriteria:(id)arg1 ;
-(unsigned long long)_countOfItemsForQueryCriteria:(id)arg1 ;
-(unsigned long long)_countOfCollectionsForQueryCriteria:(id)arg1 ;
-(id)_itemPersistentIdentifiersForQueryCriteria:(id)arg1 ;
-(id)_collectionPersistentIdentifiersForQueryCriteria:(id)arg1 ;
-(id)libraryDataProvider;
-(id)itemWithPersistentID:(unsigned long long)arg1 ;
-(id)itemWithPersistentID:(unsigned long long)arg1 verifyExistence:(bool)arg2 ;
-(void)populateLocationPropertiesOfItem:(id)arg1 withPath:(id)arg2 ;
-(void)endGeneratingLibraryChangeNotifications;
-(void)beginGeneratingLibraryChangeNotifications;
-(void)_clearPendingDisconnection;
-(void)_reloadLibraryForContentsChangeWithNotificationInfo:(id)arg1 ;
-(void)_canShowCloudTracksDidChangeNotification:(id)arg1 ;
-(void)_displayValuesDidChangeNotification:(id)arg1 ;
-(void)_reloadLibraryForRestrictionsChange;
-(void)setLibraryFilterPredicates;
-(void)_clearCachedEntitiesIncludingResultSets:(bool)arg1 ;
-(void)_clearCachedContentDataAndResultSets:(bool)arg1 ;
-(void)_scheduleLibraryChangeNotificationPostingBlock:(/*^block*/ id)arg1 ;
-(void)_stopConnectionProgressDisplayLink;
-(void)_connectionProgressDisplayLinkCallback:(id)arg1 ;
-(unsigned long long)currentEntityRevision;
-(long long)playlistGeneration;
-(bool)writable;
-(bool)hasMediaOfType:(unsigned long long)arg1 ;
-(bool)hasGeniusMixes;
-(bool)hasSongs;
-(bool)hasUbiquitousBookmarkableItems;
-(bool)_checkHasContent:(bool*)arg1 determined:(bool*)arg2 mediaType:(unsigned long long)arg3 queryHasEntitiesBlock:(/*^block*/ id)arg4 ;
-(bool)_checkHasContent:(bool*)arg1 determined:(bool*)arg2 queryHasEntitiesBlock:(/*^block*/ id)arg3 ;
-(id)newPlaylistWithPersistentID:(unsigned long long)arg1 ;
-(id)addPlaylistWithName:(id)arg1 activeGeniusPlaylist:(bool)arg2 ;
-(bool)removeItems:(id)arg1 hideFromPurchaseHistory:(bool)arg2 ;
-(bool)isGeniusEnabled;
-(id)preferredAudioLanguages;
-(id)preferredSubtitleLanguages;
-(bool)requiresAuthentication;
-(void)connectWithCompletionHandler:(/*^block*/ id)arg1 ;
-(void)performReadTransactionWithBlock:(/*^block*/ id)arg1 ;
-(id)syncValidity;
-(id)entityCache;
-(unsigned long long)_persistentIDForAssetURL:(id)arg1 ;
-(bool)itemExistsWithPersistentID:(unsigned long long)arg1 ;
-(bool)playlistExistsWithPersistentID:(unsigned long long)arg1 ;
-(id)_getCachedValueForQueryCritiera:(id)arg1 valueCriteriaCache:(id)arg2 entitiesForCriteriaCache:(id)arg3 didLoadBlocksByQueryCriteria:(id)arg4 valueLoadedFromEntitiesArrayBlock:(/*^block*/ id)arg5 loadValueFromDataProviderBlock:(/*^block*/ id)arg6 ;
-(id)additionalLibraryFilterPredicates;
-(long long)cloudFilteringType;
-(id)_initWithLibraryDataProvider:(id)arg1 ;
-(void)setRemovalReason:(long long)arg1 ;
-(void)_reloadLibraryForDynamicPropertyChangeWithNotificationInfo:(id)arg1 ;
-(void)_reloadLibraryForInvisiblePropertyChangeWithNotificationInfo:(id)arg1 ;
-(void)addLibraryFilterPredicate:(id)arg1 ;
-(void)removeLibraryFilterPredicate:(id)arg1 ;
-(long long)removalReason;
-(id)modificationToken;
-(bool)libraryHasBeenModifiedWithToken:(id)arg1 ;
-(bool)hasMedia;
-(bool)hasPlaylists;
-(bool)hasArtists;
-(bool)hasAlbums;
-(bool)hasPodcasts;
-(bool)hasGenres;
-(bool)hasComposers;
-(bool)hasAudiobooks;
-(bool)hasVideos;
-(bool)hasMusicVideos;
-(bool)hasAudibleAudioBooks;
-(bool)hasMovies;
-(bool)hasCompilations;
-(bool)hasITunesUContent;
-(bool)hasAudioITunesUContent;
-(bool)hasVideoITunesUContent;
-(bool)hasMovieRentals;
-(bool)hasTVShows;
-(bool)hasHomeVideos;
-(bool)hasVideoPodcasts;
-(id)itemWithStoreID:(unsigned long long)arg1 ;
-(id)addPlaylistWithName:(id)arg1 ;
-(bool)removeItems:(id)arg1 ;
-(bool)removePlaylist:(id)arg1 ;
-(bool)isArtworkIdenticalForItem:(id)arg1 otherItem:(id)arg2 compareRepresentativeItemArtwork:(bool)arg3 missingAlwaysComparesEqual:(bool)arg4 ;
-(void)downloadAsset:(id)arg1 completionHandler:(/*^block*/ id)arg2 ;
-(void)connectWithAuthenticationData:(id)arg1 completionBlock:(/*^block*/ id)arg2 ;
-(id)connectionAssertionWithIdentifier:(id)arg1 ;
-(float)connectionProgress;
-(bool)isValidAssetURL:(id)arg1 ;
-(id)pathForAssetURL:(id)arg1 ;
-(void)setCloudFilteringType:(long long)arg1 ;
-(void)_removeConnectionAssertion:(id)arg1 ;
-(void)dealloc;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(id)init;
-(bool)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)name;
-(void)_didReceiveMemoryWarning:(id)arg1 ;
-(void).cxx_destruct;
-(id)uniqueIdentifier;
-(void)disconnect;
-(long long)status;
-(id)valueForDatabaseProperty:(id)arg1 ;
-(bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2 ;
-(bool)performTransactionWithBlock:(/*^block*/ id)arg1 ;
-(bool)isCurrentThreadInTransaction;
-(unsigned long long)syncGenerationID;
-(id)localizedSectionIndexTitles;
-(id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1 ;
-(id)databasePath;
-(id)lastModifiedDate;
@end

