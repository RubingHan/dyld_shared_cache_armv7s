/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:59:42 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <MediaPlayer/MediaPlayer-Structs.h>
#import <MediaPlayer/AVAudioSessionDelegateMediaPlayerOnly.h>
#import <MediaPlayer/MPAVRoutingControllerDelegate.h>
#import <MediaPlayer/MPAVErrorResolverDelegate.h>
#import <MediaPlayer/MPAVControllerProtocol.h>

@protocol OS_dispatch_source;
@class MPMediaItem, MPMediaQuery, MPAVPlaylistManager, MPAVRoutingController, MPAVRoute, MPQueueFeeder, MPAVErrorResolver, AVPlayerLayer, MPVideoView, NSArray, NSNotification, NSObject, NSMutableArray, MPAVControllerToAggregateDCommunicator, NSString, NSMutableSet, NSDate, MPAVItem, MPQueuePlayer, CALayer;

@interface MPAVController : NSObject <AVAudioSessionDelegateMediaPlayerOnly, MPAVRoutingControllerDelegate, MPAVErrorResolverDelegate, MPAVControllerProtocol> {

	MPAVPlaylistManager* _avPlaylistManager;
	bool _forceSynchronousQueueFilling;
	bool _managesSystemDownloads;
	int _playbackMode;
	bool _valid;
	MPAVRoutingController* _routingController;
	MPAVRoute* _pickedRoute;
	MPQueueFeeder* _feeder;
	MPAVErrorResolver* _itemErrorResolver;
	AVPlayerLayer* _videoLayer;
	unsigned long long _videoLayerUsageCount;
	MPVideoView* _videoView;
	unsigned long long _tickTimerEnabled;
	CFRunLoopTimerRef _tickTimer;
	double _tickInterval;
	CFRunLoopTimerRef _currentItemBookkeepingTimer;
	long long _indexChangeDirection;
	unsigned long long _itemIndexAtDeath;
	long long _lastDisconnectReason;
	double _lastKnownTimeBeforeDeath;
	double _lastPlaybackIndexChangeTime;
	double _lastSetTime;
	double _lastSetTimeChangeTime;
	unsigned _hasDelayedCurrentTimeToSet : 1;
	unsigned _forceDelayedCurrentTimeToSet : 1;
	double _delayedCurrentTimeToSet;
	long long _delayedCurrentTimeOptions;
	unsigned long long _lastSetTimeMarker;
	double _temporaryChapterTime;
	unsigned _autoPlayWhenLikelyToKeepUp : 1;
	unsigned _autoplayDisabledForCurrentItem : 1;
	long long _eqPreset;
	double _nextFadeOutDuration;
	id _boundaryTimeObserver;
	NSArray* _boundaryTimes;
	unsigned long long _boundaryTimeIndexLastPosted;
	float _rateBeforeSeek;
	float _inflightSeekRate;
	unsigned long long _scanLevel;
	long long _scanDirection;
	long long _resetRateAfterSeekingUpdateDisabled;
	unsigned long long _seeklessState;
	unsigned _isSeekingOrScrubbing : 1;
	unsigned _resetRateAfterSeeking : 1;
	unsigned _activeRewindHoldingAtStart : 1;
	double _lastSeekableEnd;
	double _whenSawSeekableEnd;
	double _maxSeekableFwd;
	double _seekFwdSlop;
	double _lastSeekableStart;
	double _whenSawSeekableStart;
	double _maxSeekableRev;
	double _seekRevSlop;
	unsigned _canSeekRev : 1;
	unsigned _canSeekFwd : 1;
	unsigned _alwaysPlayWheneverPossible : 1;
	unsigned _stopAtEnd : 1;
	unsigned _didReachEnd : 1;
	unsigned _pausedDuringInterruption : 1;
	unsigned _resumePlaybackWhenActive : 1;
	unsigned _useApplicationAudioSession : 1;
	unsigned _playInBackgroundUserDefaultEnabled : 1;
	unsigned _canPlayFastForward : 1;
	unsigned _canPlayFastReverse : 1;
	unsigned long long _state;
	unsigned long long _displayOverridePlaybackState;
	unsigned long long _bufferingState;
	NSNotification* _delayedPlaybackStateNotification;
	NSObject<OS_dispatch_source>* _stallTimerSource;
	NSMutableArray* _queueFeederStateStack;
	int _feederMode;
	MPAVControllerToAggregateDCommunicator* _aggregateDCommunicator;
	double _itemInitialBookmarkTime;
	float _rateBeforeResignActive;
	long long _ubiquitousBookkeepingDisabledCount;
	double _secondsSinceUbiquitousCheckpoint;
	Class _videoViewClass;
	NSString* _audioSessionModeOverride;
	double _lastInterruptionEnd;
	bool _shouldEnforceHDCP;
	NSMutableSet* _clientsWantingAirPlayVideo;
	bool _currentItemDidLoad;
	bool _didResolveError;
	bool _disallowsAMRAudio;
	bool _disableAirPlayMirroringDuringPlayback;
	NSDate* _itemDidChangeDate;
	unsigned long long _stallBackgroundTaskIdentifier;
	bool _shouldSkipToNextTrackOnResumeFromInterruption;

}

@property (assign,nonatomic) unsigned RTCReportingFlags; 
@property (assign,nonatomic) bool shouldSkipToNextTrackOnResumeFromInterruption;                                           //@synthesize shouldSkipToNextTrackOnResumeFromInterruption=_shouldSkipToNextTrackOnResumeFromInterruption - In the implementation block
@property (nonatomic,readonly) MPQueueFeeder * feeder;                                                                     //@synthesize feeder=_feeder - In the implementation block
@property (assign,nonatomic) bool autoPlayWhenLikelyToKeepUp; 
@property (assign,nonatomic) bool closedCaptioningEnabled; 
@property (assign,nonatomic) double nextFadeOutDuration;                                                                   //@synthesize nextFadeOutDuration=_nextFadeOutDuration - In the implementation block
@property (assign,nonatomic) unsigned long long repeatType; 
@property (getter=isShuffled,nonatomic,readonly) bool shuffled; 
@property (assign,nonatomic) unsigned long long shuffleType; 
@property (nonatomic,readonly) bool hasVolumeControl; 
@property (assign,nonatomic) float volume; 
@property (nonatomic,readonly) bool muted; 
@property (nonatomic,readonly) NSString * routeNameForVolumeControl; 
@property (nonatomic,readonly) unsigned long long activeRepeatType; 
@property (nonatomic,readonly) unsigned long long activeShuffleType; 
@property (nonatomic,readonly) MPAVItem * currentItem; 
@property (assign,nonatomic) double currentTime; 
@property (nonatomic,readonly) double currentMonotonousTime; 
@property (nonatomic,readonly) double durationOfCurrentItemIfAvailable; 
@property (nonatomic,readonly) double playableDurationOfCurrentItemIfAvailable; 
@property (nonatomic,readonly) unsigned long long numberOfItems; 
@property (nonatomic,readonly) unsigned long long bufferingState;                                                          //@synthesize bufferingState=_bufferingState - In the implementation block
@property (getter=isPlaying,nonatomic,readonly) bool playing; 
@property (getter=isRewindHoldingAtStart,nonatomic,readonly) bool rewindHoldingAtStart; 
@property (getter=isValid,nonatomic,readonly) bool valid; 
@property (assign,nonatomic) bool alwaysPlayWheneverPossible; 
@property (assign,nonatomic) int feederMode;                                                                               //@synthesize feederMode=_feederMode - In the implementation block
@property (getter=isFullScreenVideoMode,nonatomic,readonly) bool fullScreenVideoMode; 
@property (assign,nonatomic) int playbackMode; 
@property (assign,nonatomic) bool stopAtEnd; 
@property (nonatomic,readonly) MPAVRoutingController * routingController;                                                  //@synthesize routingController=_routingController - In the implementation block
@property (assign,nonatomic) bool useApplicationAudioSession; 
@property (nonatomic,readonly) bool isCurrentItemReady; 
@property (assign,nonatomic) bool ubiquitousBookkeepingEnabled; 
@property (nonatomic,readonly) bool isExternalPlaybackActive; 
@property (assign,nonatomic) bool disableAirPlayMirroringDuringPlayback; 
@property (nonatomic,readonly) MPQueuePlayer * avPlayer; 
@property (assign,nonatomic) bool shouldEnforceHDCP;                                                                       //@synthesize shouldEnforceHDCP=_shouldEnforceHDCP - In the implementation block
@property (nonatomic,retain) NSString * audioSessionModeOverride;                                                          //@synthesize audioSessionModeOverride=_audioSessionModeOverride - In the implementation block
@property (assign,nonatomic) long long EQPreset;                                                                           //@synthesize eqPreset=_eqPreset - In the implementation block
@property (nonatomic,readonly) MPVideoView * videoView; 
@property (nonatomic,readonly) CALayer * videoLayer; 
@property (nonatomic,copy) NSString * externalPlaybackVideoGravity; 
@property (nonatomic,readonly) long long externalPlaybackType; 
@property (assign,nonatomic) bool usesAudioOnlyModeForExternalPlayback; 
@property (assign,setter=setDestinationIsTVOut:,getter=destinationIsTVOut,nonatomic) bool destinationIsTVOut; 
@property (nonatomic,readonly) bool showPlaybackStateOverlaysOnTVOut; 
@property (assign,nonatomic) unsigned long long state;                                                                     //@synthesize state=_state - In the implementation block
@property (nonatomic,readonly) bool currentItemIsRental; 
@property (assign,nonatomic) bool managesSystemDownloads;                                                                  //@synthesize managesSystemDownloads=_managesSystemDownloads - In the implementation block
@property (assign,nonatomic) bool forceSynchronousQueueFilling;                                                            //@synthesize forceSynchronousQueueFilling=_forceSynchronousQueueFilling - In the implementation block
@property (nonatomic,readonly) id _playerAVAudioSession; 
@property (assign,nonatomic) bool disallowsAMRAudio; 
@property (nonatomic,readonly) MPMediaItem * currentMediaItem; 
@property (nonatomic,readonly) MPMediaQuery * currentMediaQuery; 
@property (assign,nonatomic) unsigned long long displayOverridePlaybackState;                                              //@synthesize displayOverridePlaybackState=_displayOverridePlaybackState - In the implementation block
+(bool)outputSupportsAC3;
+(bool)isNetworkSupportedPath:(id)arg1 ;
+(id)_itemKeysToObserve;
+(id)_controllerKeysToObserve;
+(id)_playerKeysToObserve;
+(id)sharedInstance;
+(void)initialize;
-(unsigned)RTCReportingFlags;
-(void)setRTCReportingFlags:(unsigned)arg1 ;
-(bool)showPlaybackStateOverlaysOnTVOut;
-(void)play;
-(void)setStopAtEnd:(bool)arg1 ;
-(void)_itemPlaybackDidEndNotification:(id)arg1 ;
-(unsigned long long)bufferingState;
-(void)setAutoPlayWhenLikelyToKeepUp:(bool)arg1 ;
-(id)avPlayer;
-(bool)isExternalPlaybackActive;
-(void)endPlayback;
-(double)currentTime;
-(void)beginSeek:(int)arg1 ;
-(void)endSeek;
-(void)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2 ;
-(void)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2 ignoreElapsedTime:(bool)arg3 ;
-(int)playbackMode;
-(void)setPlaybackMode:(int)arg1 ;
-(void)beginUsingVideoLayer;
-(id)feeder;
-(void)changePlaybackIndexBy:(long long)arg1 ;
-(id)videoView;
-(void)setCurrentTime:(double)arg1 options:(long long)arg2 ;
-(id)audioSessionModeOverride;
-(bool)disallowsAMRAudio;
-(double)timeOfPlayableEnd;
-(double)timeOfPlayableStart;
-(double)timeOfSeekableEnd;
-(double)timeOfSeekableStart;
-(void)setAudioSessionModeOverride:(id)arg1 ;
-(void)setDisplayOverridePlaybackState:(unsigned long long)arg1 ;
-(void)setDisallowsAMRAudio:(bool)arg1 ;
-(void)setShouldEnforceHDCP:(bool)arg1 ;
-(bool)shouldEnforceHDCP;
-(void)setPlaybackIndex:(long long)arg1 ;
-(void)switchToFeeder:(id)arg1 mode:(int)arg2 index:(unsigned long long)arg3 play:(bool)arg4 ;
-(void)setUseApplicationAudioSession:(bool)arg1 ;
-(void)setNextFadeOutDuration:(double)arg1 ;
-(void)setCurrentTime:(double)arg1 ;
-(void)endUsingVideoLayer;
-(bool)useApplicationAudioSession;
-(void)setForceSynchronousQueueFilling:(bool)arg1 ;
-(void)_setVideoViewClass:(Class)arg1 ;
-(bool)closedCaptioningEnabled;
-(void)setClosedCaptioningEnabled:(bool)arg1 ;
-(bool)isLiveStreaming;
-(double)durationOfCurrentItemIfAvailable;
-(double)playableDurationOfCurrentItemIfAvailable;
-(bool)stopAtEnd;
-(bool)muted;
-(void)disableAutoplayForCurrentItem;
-(id)routingController;
-(bool)isPlaying;
-(void)togglePlayback;
-(void)enableAutoplayForCurrentItem;
-(void)_volumeDidChangeNotification:(id)arg1 ;
-(void)setDestinationIsTVOut:(bool)arg1 ;
-(bool)isCurrentItemReady;
-(void)notifyAVPlayerItemWillChange:(id)arg1 ;
-(void)notifyAVPlayerItemDidChange:(id)arg1 ;
-(void)setUbiquitousBookkeepingEnabled:(bool)arg1 ;
-(void)setAutoclearingDisplayOverridePlaybackState:(unsigned long long)arg1 ;
-(void)feederChangedContents:(id)arg1 ;
-(void)reloadFeederWithStartQueueIndex:(unsigned long long)arg1 ;
-(unsigned long long)repeatType;
-(unsigned long long)shuffleType;
-(void)contentsDidChangeByRemovingRange:(NSRange)arg1 ;
-(void)contentInvalidatedWithCurrentItemMovedToIndex:(unsigned long long)arg1 ;
-(void)contentInvalidated;
-(void)ensureFeederIsClass:(Class)arg1 ;
-(void)setRepeatType:(unsigned long long)arg1 ;
-(void)setShuffleType:(unsigned long long)arg1 ;
-(unsigned long long)activeShuffleType;
-(void)_resetInternalState;
-(void)_itemTimeMarkersAvailableNotification:(id)arg1 ;
-(void)_mediaLibraryDynamicPropertiesDidChangeNotification:(id)arg1 ;
-(void)_applicationDidEnterBackgroundNotification:(id)arg1 ;
-(void)_applicationSuspendedEventsOnly:(id)arg1 ;
-(void)_applicationSuspended:(id)arg1 ;
-(void)_applicationWillEnterForegroundNotification:(id)arg1 ;
-(void)_cancelStallTimer;
-(void)_cancelUpdateCurrentItemBookkeepingTimer;
-(void)_unregisterForAVItemNotifications:(id)arg1 ;
-(void)_unregisterForAVPlaylistManagerObservation:(id)arg1 ;
-(bool)currentItemIsRental;
-(id)_playerAVAudioSession;
-(void)_updateScanningRate;
-(id)_avPlaylistManager;
-(void)_updateCurrentTimeToNextStartTimeForQueueFeeder:(id)arg1 withItemIndex:(long long)arg2 ;
-(void)updateBookkeepingNow;
-(void)setPlaybackIndex:(long long)arg1 selectionDirection:(long long)arg2 ;
-(void)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2 ignoreElapsedTime:(bool)arg3 allowSkippingUnskippableContent:(bool)arg4 ;
-(bool)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2 ignoreElapsedTime:(bool)arg3 allowSkippingUnskippableContent:(bool)arg4 error:(id*)arg5 ;
-(void)_delayedPlaybackIndexChange;
-(bool)_changeChapterTimeMarkerIndexBy:(long long)arg1 ;
-(unsigned long long)_playbackIndexForDelta:(long long)arg1 fromIndex:(unsigned long long)arg2 ignoreElapsedTime:(bool)arg3 ;
-(void)_endSeekAndChangeRate:(bool)arg1 ;
-(void)_switchToFeeder:(id)arg1 mode:(int)arg2 index:(unsigned long long)arg3 play:(bool)arg4 configureFeederBlock:(/*^block*/ id)arg5 ;
-(void)_setAVControllerQueueFeeder:(id)arg1 startQueueIndex:(unsigned long long)arg2 ;
-(void)_disconnectAVPlaylistManagerWithReason:(long long)arg1 ;
-(void)pauseWithFadeout:(float)arg1 ;
-(void)skipToSeekableEnd;
-(void)_delayedSetCurrentTime;
-(bool)_canPlayItem:(id)arg1 ;
-(void)_rateDidChange:(id)arg1 ;
-(void)playItemAtIndex:(unsigned long long)arg1 forceRestart:(bool)arg2 ;
-(void)_attemptAutoPlay;
-(bool)alwaysPlayWheneverPossible;
-(void)endTickTimer;
-(bool)allowsExternalPlayback;
-(bool)_showsPlayingWhenInState:(unsigned long long)arg1 ;
-(unsigned long long)_displayPlaybackState;
-(bool)_setRate:(float)arg1 forScanning:(bool)arg2 ;
-(void)applyRepeatSettings;
-(void)applyShuffleSettings;
-(void)_setActionAtEndAttributeForState:(unsigned long long)arg1 ;
-(void)ensureHasAVPlaylistManager;
-(void)finalizeBookkeepingNow;
-(void)_setVideoLayerAttachedToPlayer:(bool)arg1 force:(bool)arg2 pauseIfNecessary:(bool)arg3 ;
-(void)_clearVideoLayer;
-(long long)externalPlaybackType;
-(id)externalPlaybackVideoGravity;
-(void)setFeederMode:(int)arg1 ;
-(void)setExternalPlaybackVideoGravity:(id)arg1 ;
-(void)_clearSeekingIntervalsForStreaming;
-(id)_pickedRoute;
-(void)setManagesSystemDownloads:(bool)arg1 ;
-(void)setUsesAudioOnlyModeForExternalPlayback:(bool)arg1 ;
-(int)feederMode;
-(void)_resetQueue:(bool)arg1 useVideoLayer:(bool)arg2 ;
-(bool)usesAudioOnlyModeForExternalPlayback;
-(double)currentTimeForBookmarking;
-(void)_setItemErrorResolver:(id)arg1 ;
-(void)_playbackFailedWithError:(id)arg1 canResolve:(bool)arg2 ;
-(void)_pausePlaybackIfNecessaryIgnoringVideoLayerAttachment:(bool)arg1 ;
-(void)_registerForAVItemNotifications:(id)arg1 ;
-(void)_reloadTimeMarkerObservationsForItem:(id)arg1 ;
-(bool)_isChangingQueueContents;
-(void)_itemReadyToPlay:(id)arg1 ;
-(void)_itemFailedToPlayToEnd:(id)arg1 ;
-(void)_streamLikelyToKeepUp:(id)arg1 ;
-(void)_streamBufferFull:(id)arg1 ;
-(void)airPlayVideoEnded;
-(void)_delayedUpdateScanningRate;
-(void)_verifyDisplayProtection;
-(void)_setValid:(bool)arg1 ;
-(void)_setBufferingState:(unsigned long long)arg1 ;
-(bool)canPlayFastReverse;
-(void)_postMPAVControllerItemReadyToPlayNotificationWithItem:(id)arg1 ;
-(void)_delayedUpdateTimeMarker;
-(void)_prepareToPlayItem:(id)arg1 ;
-(void)_updateCurrentItemBookkeepingMarkedAsCheckpoint:(bool)arg1 ;
-(void)_clearLastSetTimeIfPlayerTimeIsValid;
-(void)routingControllerAvailableRoutesDidChange:(id)arg1 ;
-(void)_postMPAVControllerSizeDidChangeNotificationWithItem:(id)arg1 ;
-(void)_checkForBoundaryTimeCrossing;
-(id)_extractImageFromMetadata:(id)arg1 ;
-(void)_itemWillChange:(id)arg1 ;
-(void)_itemDidChange:(id)arg1 ;
-(void)_isExternalPlaybackActiveDidChange:(id)arg1 ;
-(void)_serverConnectionDidDie:(id)arg1 ;
-(bool)_isDownloadingCloudOrOtherItem:(id)arg1 ;
-(bool)_isCloudItem:(id)arg1 ;
-(void)_streamRanDry:(id)arg1 ;
-(void)_streamUnlikelyToKeepUp:(id)arg1 ;
-(void)_sizeDidChange:(id)arg1 ;
-(void)_timedMetadataAvailable:(id)arg1 ;
-(void)_tracksDidChange:(id)arg1 ;
-(void)_durationDidChange:(id)arg1 ;
-(void)_firstVideoFrameDisplayed:(id)arg1 ;
-(void)_pausePlaybackIfNecessary;
-(void)_pauseTickTimer;
-(void)_pauseBookkeepingTimer;
-(bool)_itemIsRestricted:(id)arg1 ;
-(void)_resumeTickTimer;
-(void)_resumeBookkeepingTimer;
-(void)_updateCurrentTimeToBookmarkTimeForDynamicPropertyChange;
-(unsigned long long)_currentIndexInBoundaryCMTimes:(id)arg1 ;
-(bool)_connectAVPlaylistManager;
-(void)_registerForAVPlaylistManagerObservation:(id)arg1 ;
-(void)_configureAVPlaylistManager:(id)arg1 ;
-(long long)EQPreset;
-(id)_expectedAssetTypesForPlaybackMode:(int)arg1 ;
-(bool)_isDownloadingCloudItem:(id)arg1 ;
-(id)embeddedDataTimesForItem:(id)arg1 ;
-(void)_itemFailedToPlayToEndNotification:(id)arg1 ;
-(void)_timeHasJumpedNotification:(id)arg1 ;
-(void)_itemAssetIsLoadedNotification:(id)arg1 ;
-(void)_playerFailedToQueueNotification:(id)arg1 ;
-(bool)autoPlayWhenLikelyToKeepUp;
-(bool)shouldHaveNoActionAtEndForState:(unsigned long long)arg1 ;
-(void)_delayedPostPlaybackStateChangedNotification;
-(void)autoclearDisplayOverride;
-(void)_postPlaybackStateChangedNotificationWithOriginalState:(unsigned long long)arg1 newState:(unsigned long long)arg2 delayable:(bool)arg3 ;
-(void)_scheduleUpdateCurrentItemBookkeepingTimer;
-(void)_clearResetRateAfterSeeking;
-(unsigned long long)_seeklessStateForState:(unsigned long long)arg1 ;
-(void)_configureUpdateCurrentItemBookkeepingTimer;
-(id)videoLayer;
-(void)_updateSeekingIntervalsForStreaming;
-(void)setRateForScanning:(float)arg1 ;
-(bool)destinationIsTVOut;
-(bool)_isVideoLayerAttachedToPlayer;
-(void)endInterruptionFromInterruptor:(id)arg1 category:(id)arg2 flags:(unsigned long long)arg3 ;
-(void)beginInterruption;
-(void)errorResolver:(id)arg1 didResolveError:(id)arg2 withResolution:(long long)arg3 ;
-(bool)shouldDisplayAsPlaying;
-(id)currentMediaItem;
-(id)currentMediaQuery;
-(unsigned long long)displayOverridePlaybackState;
-(bool)fadeOutForQuit;
-(bool)isSeekingOrScrubbing;
-(bool)isRewindHoldingAtStart;
-(double)currentMonotonousTime;
-(void)disconnectPlaylistManagerForTeardown;
-(void)playItemAtIndex:(unsigned long long)arg1 ;
-(void)playChapterTimeMarkerAtIndex:(unsigned long long)arg1 ;
-(bool)forceRestartPlaybackIfNecessary;
-(void)beginTickTimerWithInterval:(double)arg1 ;
-(bool)isTickTimerEnabled;
-(unsigned long long)activeRepeatType;
-(void)setClient:(id)arg1 wantsToAllowAirPlayVideo:(bool)arg2 ;
-(bool)isShuffled;
-(void)setAlwaysPlayWheneverPossible:(bool)arg1 ;
-(bool)disableAirPlayMirroringDuringPlayback;
-(void)setDisableAirPlayMirroringDuringPlayback:(bool)arg1 ;
-(void)setEQPreset:(long long)arg1 ;
-(bool)hasVolumeControl;
-(id)routeNameForVolumeControl;
-(bool)isFullScreenVideoMode;
-(void)applicationDidReceiveMemoryWarningAsUrgent:(bool)arg1 ;
-(void)switchToAudioPlayback:(bool)arg1 forItem:(id)arg2 ;
-(void)switchToVideoPlayback:(bool)arg1 forItem:(id)arg2 ;
-(void)saveCurrentFeederState;
-(void)restorePreviousFeederState;
-(void)ensureFeederIsSubclass:(Class)arg1 ;
-(bool)canSeekBackwards;
-(bool)canSeekForwards;
-(bool)canSkipToSeekableEnd;
-(void)skipToSeekableStart;
-(bool)ubiquitousBookkeepingEnabled;
-(void)_updateCurrentItemBookkeepingForTimerCallback;
-(void)_updateProgress:(CFRunLoopTimerRef)arg1 ;
-(bool)forceSynchronousQueueFilling;
-(bool)managesSystemDownloads;
-(double)nextFadeOutDuration;
-(bool)shouldSkipToNextTrackOnResumeFromInterruption;
-(void)setShouldSkipToNextTrackOnResumeFromInterruption:(bool)arg1 ;
-(void)dealloc;
-(id)init;
-(unsigned long long)state;
-(void)applicationWillTerminate;
-(bool)isValid;
-(void)setState:(unsigned long long)arg1 ;
-(id)currentItem;
-(void)setActive:(bool)arg1 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(unsigned long long)numberOfItems;
-(void)_setState:(unsigned long long)arg1 ;
-(void).cxx_destruct;
-(void)_applicationWillResignActive:(id)arg1 ;
-(void)_applicationDidBecomeActive:(id)arg1 ;
-(void)pause;
-(float)rate;
-(float)volume;
-(void)setVolume:(float)arg1 ;
-(bool)setRate:(float)arg1 ;
@end

