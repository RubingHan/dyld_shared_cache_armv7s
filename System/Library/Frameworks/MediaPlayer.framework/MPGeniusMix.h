/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:59:44 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <MediaPlayer/MediaPlayer-Structs.h>
#import <MediaPlayer/MPStoreDownloadManagerObserver.h>
#import <CoreFoundation/NSSecureCoding.h>
#import <CoreFoundation/NSCopying.h>

@class MPMediaPlaylist, MPMediaQuery, NSArray, NSString;

@interface MPGeniusMix : NSObject <MPStoreDownloadManagerObserver, NSSecureCoding, NSCopying> {

	MPMediaPlaylist* _playlist;
	MPMediaQuery* _seedTracksQuery;
	NSArray* _representativeArtists;
	NSArray* _representativeImageItems;

}

@property (nonatomic,readonly) float downloadProgress; 
@property (nonatomic,readonly) bool isCloudMix; 
@property (nonatomic,readonly) bool isDownloading; 
@property (nonatomic,readonly) NSString * name; 
@property (nonatomic,readonly) MPMediaPlaylist * playlist;                   //@synthesize playlist=_playlist - In the implementation block
@property (nonatomic,readonly) NSArray * representativeArtists; 
@property (nonatomic,readonly) MPMediaQuery * seedTracksQuery; 
+(id)mixQueue;
+(id)artworkImageForMediaItem:(id)arg1 scaleMode:(int)arg2 ;
+(id)artworkCacheDirectoryPath;
+(id)artworkImageForMediaItem:(id)arg1 ;
+(bool)supportsSecureCoding;
-(bool)isDownloading;
-(id)playlist;
-(id)initWithMPMediaPlaylist:(id)arg1 ;
-(id)loadRepresentativeImageWithTileLength:(double)arg1 completionBlock:(/*^block*/ id)arg2 ;
-(bool)isCloudMix;
-(id)seedTracksQuery;
-(id)_placeholderImageWithTileLength:(double)arg1 ;
-(id)_representativeImageItemsWithMaxCount:(unsigned long long)arg1 ;
-(unsigned long long)_entityArtworkCacheHashForRepresentativeItems:(id)arg1 ensureItemArtworkFilesExist:(bool)arg2 ;
-(id)_cacheDirectoryPath;
-(id)_cachedRepresentativeImagePathWithTileLength:(double)arg1 ;
-(bool)_observeMixImageLoadingWithImageDidLoadBlock:(/*^block*/ id)arg1 ;
-(void)_onQueueLoadRepresentativeImageWithTileLength:(double)arg1 ;
-(void)_generateMixImageWithTileLength:(double)arg1 imageDidLoadBlock:(/*^block*/ id)arg2 ;
-(id)_alreadyLoadedRepresentativeImageWithTileLength:(double)arg1 loadCompletionBlock:(/*^block*/ id)arg2 ;
-(id)_placeholderMixImageWithTileLength:(double)arg1 ;
-(void)downloadManager:(id)arg1 downloadDidFinish:(id)arg2 ;
-(void)cancelDownload;
-(bool)canPlayUsingNetworkType:(long long)arg1 ;
-(void)downloadMixWithPermissionHandler:(/*^block*/ id)arg1 ;
-(float)downloadProgress;
-(id)representativeArtists;
-(void)preloadRepresentativeImageWithTileLength:(double)arg1 completionBlock:(/*^block*/ id)arg2 ;
-(void)dealloc;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(bool)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)copyWithZone:(NSZone)arg1 ;
-(id)name;
-(void).cxx_destruct;
@end

