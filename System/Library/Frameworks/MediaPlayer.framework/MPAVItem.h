/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:59:42 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <MediaPlayer/MediaPlayer-Structs.h>
@class AVAsset, NSObject, AVPlayerItem, MPQueueFeeder, MPAVController, NSArray, MPAlternateTracks, NSString, MPMediaItem, RadioAudioClip, MPRadioAdTrack, RadioTrack, RadioStreamTrack, AVPlayerItemAccessLog, NSURL, MPAlternateTextTrack;

@interface MPAVItem : NSObject {

	AVAsset* _asset;
	NSObject<OS_dispatch_queue>* _assetQueue;
	AVPlayerItem* _avPlayerItem;
	bool _isAssetLoaded;
	MPQueueFeeder* _feeder;
	MPAVController* _player;
	float _soundCheckVolumeNormalization;
	NSArray* _chapterTimeMarkers;
	NSArray* _artworkTimeMarkers;
	NSArray* _urlTimeMarkers;
	NSArray* _closedCaptionTimeMarkers;
	MPAlternateTracks* _alternateTracks;
	double _cachedDuration;
	double _cachedPlayableDuration;
	NSArray* _cachedSeekableTimeRanges;
	double _seekableTimeRangesCacheTime;
	unsigned long long _type;
	float _defaultPlaybackRate;
	unsigned long long _indexInQueueFeeder;
	unsigned _advancedDuringPlayback : 1;
	unsigned _handledFinishTime : 1;
	unsigned _hasPlayedThisSession : 1;
	unsigned _wasCountedAsSkipped : 1;
	unsigned _isStreamable : 2;
	unsigned _watchingAttributes : 1;
	unsigned _lyricsAvailable : 1;
	unsigned _timeMarkersNeedLoading : 1;
	bool _hasPostedNaturalSizeChange;
	bool _limitReadAhead;
	bool _didAttemptToLoadAsset;
	float _loudnessInfoVolumeNormalization;
	long long _albumStoreID;
	NSArray* _buyOffers;
	NSString* _copyrightText;
	long long _storeID;
	MPMediaItem* _mediaItem;

}

@property (nonatomic,readonly) RadioAudioClip * audioClip; 
@property (nonatomic,readonly) bool isStreamingQuality; 
@property (nonatomic,readonly) MPRadioAdTrack * adTrack; 
@property (nonatomic,readonly) long long albumBuyButtonType; 
@property (nonatomic,readonly) NSString * albumBuyButtonText; 
@property (nonatomic,readonly) bool isRadioItem; 
@property (nonatomic,readonly) RadioTrack * radioTrack; 
@property (nonatomic,readonly) NSString * assetFlavor; 
@property (nonatomic,readonly) RadioStreamTrack * streamTrack; 
@property (nonatomic,readonly) AVAsset * asset; 
@property (nonatomic,readonly) AVPlayerItem * playerItem; 
@property (nonatomic,readonly) bool didAttemptToLoadAsset;                                   //@synthesize didAttemptToLoadAsset=_didAttemptToLoadAsset - In the implementation block
@property (assign) bool isAssetLoaded;                                                       //@synthesize isAssetLoaded=_isAssetLoaded - In the implementation block
@property (nonatomic,readonly) long long status; 
@property (nonatomic,readonly) bool isAlwaysLive; 
@property (assign,nonatomic) double playbackCheckpointCurrentTime; 
@property (assign,nonatomic,__weak) MPQueueFeeder * feeder;                                  //@synthesize feeder=_feeder - In the implementation block
@property (assign,nonatomic) unsigned long long indexInQueueFeeder;                          //@synthesize indexInQueueFeeder=_indexInQueueFeeder - In the implementation block
@property (assign,nonatomic,__weak) MPAVController * player;                                 //@synthesize player=_player - In the implementation block
@property (assign,nonatomic) bool hasPlayedThisSession; 
@property (nonatomic,readonly) AVPlayerItemAccessLog * accessLog; 
@property (nonatomic,readonly) unsigned long long countForQueueFeeder; 
@property (nonatomic,readonly) double currentTimeDisplayOverride; 
@property (assign,nonatomic) float defaultPlaybackRate;                                      //@synthesize defaultPlaybackRate=_defaultPlaybackRate - In the implementation block
@property (nonatomic,retain) NSArray * chapterTimeMarkers;                                   //@synthesize chapterTimeMarkers=_chapterTimeMarkers - In the implementation block
@property (nonatomic,retain) NSArray * artworkTimeMarkers;                                   //@synthesize artworkTimeMarkers=_artworkTimeMarkers - In the implementation block
@property (nonatomic,retain) NSArray * urlTimeMarkers;                                       //@synthesize urlTimeMarkers=_urlTimeMarkers - In the implementation block
@property (nonatomic,retain) NSArray * closedCaptionTimeMarkers; 
@property (nonatomic,readonly) bool useEmbeddedChapterData; 
@property (nonatomic,readonly) unsigned long long type; 
@property (nonatomic,readonly) long long customAVEQPreset; 
@property (nonatomic,readonly) bool allowsEQ; 
@property (nonatomic,readonly) MPAlternateTracks * alternateTracks;                          //@synthesize alternateTracks=_alternateTracks - In the implementation block
@property (nonatomic,readonly) NSString * displayableText; 
@property (nonatomic,readonly) bool displayableTextLoaded; 
@property (nonatomic,readonly) bool hasDisplayableText; 
@property (nonatomic,readonly) NSString * album; 
@property (nonatomic,readonly) long long albumStoreID;                                       //@synthesize albumStoreID=_albumStoreID - In the implementation block
@property (nonatomic,readonly) NSString * artist; 
@property (nonatomic,readonly) NSString * albumArtist; 
@property (nonatomic,readonly) unsigned long long albumTrackNumber; 
@property (nonatomic,readonly) unsigned long long albumTrackCount; 
@property (nonatomic,readonly) NSArray * buyOffers;                                          //@synthesize buyOffers=_buyOffers - In the implementation block
@property (nonatomic,readonly) bool canSeedGenius; 
@property (nonatomic,readonly) NSString * composer; 
@property (nonatomic,readonly) NSString * copyrightText;                                     //@synthesize copyrightText=_copyrightText - In the implementation block
@property (nonatomic,readonly) unsigned long long discNumber; 
@property (nonatomic,readonly) unsigned long long discCount; 
@property (getter=isExplicitTrack,nonatomic,readonly) bool explicitTrack; 
@property (nonatomic,readonly) NSString * genre; 
@property (nonatomic,readonly) NSString * lyrics; 
@property (nonatomic,readonly) NSString * mainTitle; 
@property (nonatomic,readonly) NSURL * podcastURL; 
@property (getter=isStreamable,nonatomic,readonly) bool streamable; 
@property (nonatomic,readonly) unsigned long long persistentID; 
@property (nonatomic,readonly) long long storeID;                                            //@synthesize storeID=_storeID - In the implementation block
@property (nonatomic,readonly) float userRating; 
@property (nonatomic,readonly) bool supportsRewindAndFastForward15Seconds; 
@property (nonatomic,readonly) bool durationIsValid; 
@property (nonatomic,readonly) double durationIfAvailable; 
@property (nonatomic,readonly) double durationFromExternalMetadata; 
@property (nonatomic,readonly) double playableDuration; 
@property (nonatomic,readonly) double playableDurationIfAvailable; 
@property (nonatomic,readonly) double timeOfSeekableStart; 
@property (nonatomic,readonly) double timeOfSeekableEnd; 
@property (nonatomic,readonly) CGSize naturalSize; 
@property (nonatomic,readonly) NSArray * timedMetadataIfAvailable; 
@property (nonatomic,copy) NSString * videoID; 
@property (nonatomic,readonly) MPMediaItem * mediaItem;                                      //@synthesize mediaItem=_mediaItem - In the implementation block
@property (assign,nonatomic) float loudnessInfoVolumeNormalization;                          //@synthesize loudnessInfoVolumeNormalization=_loudnessInfoVolumeNormalization - In the implementation block
@property (assign,nonatomic) float soundCheckVolumeNormalization;                            //@synthesize soundCheckVolumeNormalization=_soundCheckVolumeNormalization - In the implementation block
@property (nonatomic,readonly) bool supportsAddStation; 
@property (nonatomic,readonly) bool supportsHistory; 
@property (nonatomic,readonly) bool supportsRadioTrackActions; 
@property (nonatomic,readonly) bool supportsSkip; 
@property (nonatomic,readonly) NSString * localizedPositionInPlaylistString; 
@property (nonatomic,readonly) bool isAd; 
@property (nonatomic,readonly) SCD_Struct_MP8 duration; 
@property (assign,nonatomic) SCD_Struct_MP8 forwardPlaybackEndTime; 
@property (nonatomic,readonly) CGSize presentationSize; 
@property (nonatomic,retain) MPAlternateTextTrack * selectedAlternateTextTrack; 
+(unsigned long long)defaultScaleMode;
+(void)setDefaultScaleMode:(unsigned long long)arg1 ;
+(id)URLFromPath:(id)arg1 ;
+(void)applyVolumeNormalizationForQueuedItems:(id)arg1 ;
-(void)MPSPWD_prioritizeDownloadSession;
-(id)audioClip;
-(bool)isStreamingQuality;
-(id)adTrack;
-(id)albumBuyButtonText;
-(long long)albumBuyButtonType;
-(id)radioTrack;
-(bool)isRadioItem;
-(void)addDerivedStationForArtist:(bool)arg1 withCompletionHandler:(/*^block*/ id)arg2 ;
-(id)_plistKeyForMPMediaItemProperty:(id)arg1 ;
-(id)assetFlavor;
-(id)streamTrack;
-(double)playableDuration;
-(void)setDefaultPlaybackRate:(float)arg1 ;
-(unsigned long long)indexInQueueFeeder;
-(id)feeder;
-(double)timeOfSeekableEnd;
-(double)timeOfSeekableStart;
-(id)playerItem;
-(id)accessLog;
-(id)alternateTracks;
-(bool)limitReadAhead;
-(void)setLimitReadAhead:(bool)arg1 ;
-(void)setVideoID:(id)arg1 ;
-(bool)isAssetLoaded;
-(void)setAlternateAudioTrackID:(int)arg1 ;
-(id)selectedAlternateTextTrack;
-(void)setSelectedAlternateTextTrack:(id)arg1 ;
-(void)setOverrideDuration:(double)arg1 ;
-(id)videoID;
-(void)setPlayerItem:(id)arg1 ;
-(void)_loadAssetProperties;
-(void)_releaseAllTimeMarkers;
-(void)loadAssetAndPlayerItem;
-(void)setIsAssetLoaded:(bool)arg1 ;
-(void)_updateSoundCheckVolumeNormalizationForPlayerItem;
-(void)_loadAssetAndPlayerItem;
-(void)_playerItemNewAccessLogEntryNotification:(id)arg1 ;
-(void)_checkAllowsBlockingDurationCall;
-(double)_durationInSeconds;
-(id)displayableText;
-(id)lyrics;
-(float)defaultPlaybackRate;
-(SCD_Struct_MP8)forwardPlaybackEndTime;
-(void)setForwardPlaybackEndTime:(SCD_Struct_MP8)arg1 ;
-(bool)useEmbeddedChapterData;
-(id)imageCacheRequestWithSize:(CGSize)arg1 time:(double)arg2 usePlaceholderAsFallback:(bool)arg3 ;
-(id)artworkTimeMarkerForTime:(double)arg1 ;
-(void)setChapterTimeMarkers:(id)arg1 ;
-(void)setArtworkTimeMarkers:(id)arg1 ;
-(void)setUrlTimeMarkers:(id)arg1 ;
-(void)_loadTimeMarkersBlocking;
-(void)_loadTimeMarkersAsync;
-(id)chapterTimeMarkers;
-(id)_timeMarkerFromMarkers:(id)arg1 forTime:(double)arg2 ;
-(id)artworkTimeMarkers;
-(id)urlTimeMarkers;
-(id)closedCaptionTimeMarkers;
-(unsigned long long)countForQueueFeeder;
-(double)durationFromExternalMetadata;
-(id)_seekableTimeRanges;
-(double)_durationFromExternalMetadataIfAvailable;
-(double)_playableDurationForLoadedTimeRanges:(id)arg1 ;
-(bool)hasDisplayableText;
-(void)setSoundCheckVolumeNormalization:(float)arg1 ;
-(long long)customAVEQPreset;
-(bool)allowsEQ;
-(void)_itemAttributeAvailableKey:(id)arg1 ;
-(id)_imageChapterTrackIDsForAsset:(id)arg1 ;
-(bool)isSupportedDefaultPlaybackSpeed:(unsigned long long)arg1 ;
-(void)flushNowPlayingCaches;
-(void)resetBookkeeping;
-(void)setPlaybackStoppedTime:(double)arg1 ;
-(void)notePlaybackFinishedByHittingEnd;
-(double)playbackCheckpointCurrentTime;
-(void)setPlaybackCheckpointCurrentTime:(double)arg1 ;
-(void)setPlaybackFinishedTime:(double)arg1 ;
-(void)setRating:(float)arg1 ;
-(int)subtitleTrackID;
-(void)setSubtitleTrackID:(int)arg1 ;
-(void)setUserAdvancedDuringPlayback:(bool)arg1 ;
-(void)setUserSkippedPlayback:(bool)arg1 ;
-(bool)userSkippedPlayback;
-(double)durationInSeconds;
-(id)artist;
-(id)albumArtist;
-(unsigned long long)albumTrackNumber;
-(unsigned long long)albumTrackCount;
-(bool)canSeedGenius;
-(id)composer;
-(unsigned long long)discNumber;
-(unsigned long long)discCount;
-(bool)isValidPlayerSubstituteForItem:(id)arg1 ;
-(bool)isPlaceholderForItem:(id)arg1 ;
-(bool)isAssetURLValid;
-(bool)isExplicitTrack;
-(id)genre;
-(double)currentTimeDisplayOverride;
-(bool)displayableTextLoaded;
-(bool)hasAlternatesForTypes:(unsigned long long)arg1 ;
-(unsigned long long)alternatesCountForTypes:(unsigned long long)arg1 ;
-(bool)hasDataForItemArtwork;
-(bool)hasPlayedThisSession;
-(id)inBandAlternateTextTracks;
-(bool)isAd;
-(bool)isAlwaysLive;
-(bool)isStreamable;
-(id)mainTitle;
-(id)podcastURL;
-(float)playbackRateForLevel:(unsigned long long)arg1 direction:(long long)arg2 paused:(bool)arg3 ;
-(void)replaceOutOfBandAlternateTextTracksWithArray:(id)arg1 ;
-(float)scanIntervalForLevel:(unsigned long long)arg1 paused:(bool)arg2 ;
-(void)setHasPlayedThisSession:(bool)arg1 ;
-(bool)supportsRewindAndFastForward15Seconds;
-(bool)supportsAddStation;
-(bool)supportsHistory;
-(bool)supportsRadioTrackActions;
-(bool)supportsSkip;
-(void)_realoadEmbeddedTimeMarkers;
-(id)imageCacheRequestWithSize:(CGSize)arg1 time:(double)arg2 ;
-(id)timedMetadataIfAvailable;
-(id)titlesForTime:(double)arg1 ;
-(void)setClosedCaptionTimeMarkers:(id)arg1 ;
-(id)chapterTimeMarkerForTime:(double)arg1 ;
-(id)urlTimeMarkerForTime:(double)arg1 ;
-(id)closedCaptionTimeMarkerForTime:(double)arg1 ;
-(id)localizedAttributedPositionInPlaylistStringWithRegularTextAttributes:(id)arg1 emphasizedTextAttributes:(id)arg2 ;
-(id)localizedPositionInPlaylistString;
-(bool)durationIsValid;
-(double)durationIfAvailable;
-(double)playableDurationIfAvailable;
-(void)_captionAppearanceSettingsChanged;
-(/*^block*/ id)blockForDirectAVControllerNotificationReferencingItem:(id)arg1 ;
-(void)_clearAsset;
-(void)setupEQPresetWithDefaultPreset:(long long)arg1 ;
-(void)setupPlaybackInfo;
-(id)localeForAssetTrack:(id)arg1 ;
-(void)reevaluateType;
-(void)replacePlayerItemWithPlayerItem:(id)arg1 ;
-(void)setFeeder:(id)arg1 ;
-(void)setIndexInQueueFeeder:(unsigned long long)arg1 ;
-(float)soundCheckVolumeNormalization;
-(bool)didAttemptToLoadAsset;
-(long long)albumStoreID;
-(id)buyOffers;
-(id)copyrightText;
-(long long)storeID;
-(id)mediaItem;
-(float)loudnessInfoVolumeNormalization;
-(void)setLoudnessInfoVolumeNormalization:(float)arg1 ;
-(void)dealloc;
-(id)init;
-(SCD_Struct_MP8)duration;
-(unsigned long long)type;
-(id)path;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(id)initWithURL:(id)arg1 ;
-(id)url;
-(id)initWithAsset:(id)arg1 ;
-(void).cxx_destruct;
-(id)asset;
-(void)_applicationDidBecomeActive:(id)arg1 ;
-(CGSize)naturalSize;
-(long long)status;
-(CGSize)presentationSize;
-(id)initWithURL:(id)arg1 options:(id)arg2 ;
-(unsigned long long)persistentID;
-(float)userRating;
-(id)album;
-(id)player;
-(void)setPlayer:(id)arg1 ;
@end

