/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:59:23 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/Foundation.framework/Foundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <Foundation/Foundation-Structs.h>
#import <CoreFoundation/NSCopying.h>
#import <CoreFoundation/NSSecureCoding.h>

@class NSString, NSDictionary;

@interface NSError : NSObject <NSCopying, NSSecureCoding> {

	void* _reserved;
	long long _code;
	NSString* _domain;
	NSDictionary* _userInfo;

}
+(id)MMCSErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 ;
+(id)MSErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 ;
+(id)MSErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 underlyingError:(id)arg4 ;
+(id)MSErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 suggestion:(id)arg4 ;
+(id)MSErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 underlyingError:(id)arg4 additionalUserInfo:(id)arg5 ;
+(id)errorWithDomain:(id)arg1 code:(int)arg2 localizedDescription:(id)arg3 ;
+(id)errorWithStreamDomain:(long long)arg1 code:(int)arg2 localizedDescription:(id)arg3 ;
+(id)serverErrorForCode:(long long)arg1 withReason:(id)arg2 ;
+(id)userErrorForServerError:(id)arg1 ;
+(id)serverErrorForCode:(long long)arg1 withUserInfo:(id)arg2 ;
+(id)userErrorForServerCode:(long long)arg1 reason:(id)arg2 ;
+(id)_gkUnauthenticatedError;
+(id)userErrorForCode:(long long)arg1 underlyingError:(id)arg2 ;
+(id)userErrorForCode:(long long)arg1 userInfo:(id)arg2 ;
+(id)AVConferenceServiceError:(long long)arg1 detailedCode:(long long)arg2 returnCode:(long long)arg3 filePath:(id)arg4 description:(id)arg5 reason:(id)arg6 ;
+(id)AVConferenceServiceError:(long long)arg1 detailedCode:(long long)arg2 filePath:(id)arg3 description:(id)arg4 reason:(id)arg5 ;
+(id)AVConferenceServiceError:(long long)arg1 detailCode:(long long)arg2 description:(id)arg3 ;
+(id)errorWithCode:(int)arg1 ;
+(id)errorWithCADResult:(int)arg1 ;
+(id)errorWithCADResult:(int)arg1 action:(id)arg2 ;
+(id)_defaultDescriptionForCode:(int)arg1 ;
+(id)errorWithCode:(int)arg1 description:(id)arg2 ;
+(id)hs_homeSharingErrorWithCode:(long long)arg1 userInfo:(id)arg2 ;
+(id)hs_cloudErrorWithCode:(long long)arg1 userInfo:(id)arg2 ;
+(id)ax_errorWithDomain:(id)arg1 description:(id)arg2 ;
+(id)_webKitErrorWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3 ;
+(void)_registerWebKitErrors;
+(id)_webkit_errorWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3 ;
+(id)_webKitErrorWithCode:(int)arg1 failingURL:(id)arg2 ;
+(void)_webkit_addErrorsWithCodesAndDescriptions:(id)arg1 inDomain:(id)arg2 ;
+(id)genericErrorWithFile:(const char*)arg1 function:(const char*)arg2 lineNumber:(long long)arg3 ;
+(id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 descriptionArray:(id)arg3 errorType:(id)arg4 ;
+(id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 descriptionArray:(id)arg3 suggestion:(id)arg4 USEnglishSuggestion:(id)arg5 underlyingError:(id)arg6 errorType:(id)arg7 ;
+(id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 errorType:(id)arg4 ;
+(id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 descriptionArray:(id)arg3 underlyingError:(id)arg4 errorType:(id)arg5 ;
+(id)zilchDecoderErrorForNoSolution;
+(id)_geo_errorFromXPCData:(id)arg1 ;
+(id)errorWithBTResult:(id)arg1 ;
+(void)_web_addErrorsWithCodesAndDescriptions:(id)arg1 inDomain:(id)arg2 ;
+(id)_web_errorWithDomain:(id)arg1 code:(long long)arg2 failingURL:(id)arg3 ;
+(id)_web_errorWithDomain:(id)arg1 code:(long long)arg2 URL:(id)arg3 ;
+(void)_registerFormatter:(/*function pointer*/ void*)arg1 forErrorKey:(id)arg2 parameters:(const char*)arg3 ;
+(void)_registerBuiltInFormatters;
+(bool)supportsSecureCoding;
+(id)errorWithDomain:(id)arg1 code:(long long)arg2 userInfo:(id)arg3 ;
-(bool)MMCSIsAuthorizationError;
-(bool)MMCSIsNetworkConditionsError;
-(bool)MMCSIsFatalError;
-(void)_MMCSApplyBlock:(/*^block*/ id)arg1 ;
-(int)MMCSErrorType;
-(bool)MMCSIsCancelError;
-(id)MMCSRetryAfterDate;
-(bool)MSIsTemporaryNetworkError;
-(bool)MSIsQuotaError;
-(bool)MSNeedsBackoff;
-(bool)MSIsCounted;
-(bool)MSCanBeIgnored;
-(bool)MSIsFatal;
-(bool)MSIsBadTokenError;
-(bool)MSIsAuthError;
-(id)MSMMCSRetryAfterDate;
-(bool)MSIsRegistrationError;
-(id)MSFindPrimaryError;
-(id)_MSVerboseDescriptionRecursionCount:(int)arg1 ;
-(void)_MSApplyBlock:(/*^block*/ id)arg1 ;
-(bool)MSContainsErrorWithDomain:(id)arg1 code:(long long)arg2 ;
-(id)MSMakePrimaryError;
-(bool)MSASStateMachineIsCanceledError;
-(id)MSVerboseDescription;
-(bool)iCalIsEqualToError:(id)arg1 ;
-(bool)isSubCalReachabilityError;
-(bool)isSubCalAuthError;
-(id)mf_shortDescription;
-(bool)mf_isUserCancelledError;
-(id)mf_moreInfo;
-(bool)mf_shouldBeReportedToUser;
-(bool)mf_isInaccessibleAccountCredentialError;
-(bool)mf_isMissingAccountCredentialError;
-(id)DAExtendedDescription;
-(bool)isExpiredPasswordError;
-(bool)isConnectivityError;
-(bool)isPasswordMismatchError;
-(bool)isInvalidSubscriberError;
-(bool)isServerError;
-(bool)isSecurityError;
-(bool)isEqualToError:(id)arg1 ;
-(bool)isStreamDomain:(long long)arg1 error:(int)arg2 ;
-(bool)isNewPasswordError;
-(bool)shouldPresentErrorForTaskType:(long long)arg1 ;
-(bool)_gkIsUnauthenticatedError;
-(id)tl_nonRedundantDescription;
-(id)errorBySettingFatalError:(bool)arg1 ;
-(bool)isFatalError;
-(bool)isEqual:(id)arg1 compareUserInfo:(bool)arg2 ;
-(id)ax_nonRedundantDescription;
-(id)_initWithPluginErrorCode:(int)arg1 contentURL:(id)arg2 pluginPageURL:(id)arg3 pluginName:(id)arg4 MIMEType:(id)arg5 ;
-(id)_webkit_initWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3 ;
-(id)initWithXPCEncoding:(id)arg1 ;
-(id)copyXPCEncoding;
-(id)MCVerboseDescription;
-(id)MCFindPrimaryError;
-(id)MCUSEnglishDescription;
-(id)MCUSEnglishSuggestion;
-(id)MCCopyAsPrimaryError;
-(bool)MCContainsErrorDomain:(id)arg1 code:(long long)arg2 ;
-(id)MCErrorType;
-(id)zilchDecoderTileLoadingError;
-(id)_geo_newXPCData;
-(id)replacementObjectForPortCoder:(id)arg1 ;
-(id)_web_initWithDomain_nowarn:(id)arg1 code:(long long)arg2 URL:(id)arg3 ;
-(id)_web_initWithDomain:(id)arg1 code:(long long)arg2 failingURL:(id)arg3 ;
-(id)_web_failingURL;
-(bool)_web_errorIsInDomain:(id)arg1 ;
-(id)_web_localizedDescription;
-(id)_cocoaErrorString:(id)arg1 ;
-(long long)_collectApplicableUserInfoFormatters:(/*function pointer*/ void**)arg1 max:(long long)arg2 ;
-(id)_formatCocoaErrorString:(id)arg1 parameters:(const char*)arg2 applicableFormatters:(/*function pointer*/ void**)arg3 count:(long long)arg4 ;
-(id)_cocoaErrorString:(id)arg1 fromBundle:(id)arg2 tableName:(id)arg3 ;
-(unsigned long long)_cfTypeID;
-(id)_cocoaErrorStringWithKind:(id)arg1 variant:(id)arg2 ;
-(id)_cocoaErrorStringWithKind:(id)arg1 ;
-(CFStringRef)_retainedUserInfoCallBackForKey:(id)arg1 ;
-(id)helpAnchor;
-(void)dealloc;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(bool)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)domain;
-(long long)code;
-(id)copyWithZone:(NSZone)arg1 ;
-(id)userInfo;
-(id)initWithDomain:(id)arg1 code:(long long)arg2 userInfo:(id)arg3 ;
-(id)localizedDescription;
-(id)localizedRecoverySuggestion;
-(id)localizedRecoveryOptions;
-(id)recoveryAttempter;
-(id)localizedFailureReason;
-(void)finalize;
@end

