/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:59:26 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/Foundation.framework/Foundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <CFNetwork/__NSCFURLSessionConfiguration.h>
#import <CoreFoundation/NSCopying.h>

@class NSString, NSDictionary, NSHTTPCookieStorage, NSURLCredentialStorage, NSURLCache, NSArray;

@interface NSURLSessionConfiguration : __NSCFURLSessionConfiguration <NSCopying> {

	bool _allowsCellularAccess;
	bool _discretionary;
	bool _sessionSendsLaunchEvents;
	bool _HTTPShouldUsePipelining;
	bool _HTTPShouldSetCookies;
	int _TLSMinimumSupportedProtocol;
	int _TLSMaximumSupportedProtocol;
	NSString* _identifier;
	unsigned long long _requestCachePolicy;
	double _timeoutIntervalForRequest;
	double _timeoutIntervalForResource;
	unsigned long long _networkServiceType;
	NSDictionary* _connectionProxyDictionary;
	unsigned long long _HTTPCookieAcceptPolicy;
	NSDictionary* _HTTPAdditionalHeaders;
	long long _HTTPMaximumConnectionsPerHost;
	NSHTTPCookieStorage* _HTTPCookieStorage;
	NSURLCredentialStorage* _URLCredentialStorage;
	NSURLCache* _URLCache;
	NSArray* _protocolClasses;

}

@property (readonly) NSString * identifier;                                    //@synthesize identifier=_identifier - In the implementation block
@property (assign) unsigned long long requestCachePolicy;                      //@synthesize requestCachePolicy=_requestCachePolicy - In the implementation block
@property (assign) double timeoutIntervalForRequest;                           //@synthesize timeoutIntervalForRequest=_timeoutIntervalForRequest - In the implementation block
@property (assign) double timeoutIntervalForResource;                          //@synthesize timeoutIntervalForResource=_timeoutIntervalForResource - In the implementation block
@property (assign) unsigned long long networkServiceType;                      //@synthesize networkServiceType=_networkServiceType - In the implementation block
@property (assign) bool allowsCellularAccess;                                  //@synthesize allowsCellularAccess=_allowsCellularAccess - In the implementation block
@property (getter=isDiscretionary) bool discretionary;                         //@synthesize discretionary=_discretionary - In the implementation block
@property (assign) bool sessionSendsLaunchEvents;                              //@synthesize sessionSendsLaunchEvents=_sessionSendsLaunchEvents - In the implementation block
@property (copy) NSDictionary * connectionProxyDictionary;                     //@synthesize connectionProxyDictionary=_connectionProxyDictionary - In the implementation block
@property (assign) int TLSMinimumSupportedProtocol;                            //@synthesize TLSMinimumSupportedProtocol=_TLSMinimumSupportedProtocol - In the implementation block
@property (assign) int TLSMaximumSupportedProtocol;                            //@synthesize TLSMaximumSupportedProtocol=_TLSMaximumSupportedProtocol - In the implementation block
@property (assign) bool HTTPShouldUsePipelining;                               //@synthesize HTTPShouldUsePipelining=_HTTPShouldUsePipelining - In the implementation block
@property (assign) bool HTTPShouldSetCookies;                                  //@synthesize HTTPShouldSetCookies=_HTTPShouldSetCookies - In the implementation block
@property (assign) unsigned long long HTTPCookieAcceptPolicy;                  //@synthesize HTTPCookieAcceptPolicy=_HTTPCookieAcceptPolicy - In the implementation block
@property (copy) NSDictionary * HTTPAdditionalHeaders;                         //@synthesize HTTPAdditionalHeaders=_HTTPAdditionalHeaders - In the implementation block
@property (assign) long long HTTPMaximumConnectionsPerHost;                    //@synthesize HTTPMaximumConnectionsPerHost=_HTTPMaximumConnectionsPerHost - In the implementation block
@property (retain) NSHTTPCookieStorage * HTTPCookieStorage;                    //@synthesize HTTPCookieStorage=_HTTPCookieStorage - In the implementation block
@property (retain) NSURLCredentialStorage * URLCredentialStorage;              //@synthesize URLCredentialStorage=_URLCredentialStorage - In the implementation block
@property (retain) NSURLCache * URLCache;                                      //@synthesize URLCache=_URLCache - In the implementation block
@property (copy) NSArray * protocolClasses;                                    //@synthesize protocolClasses=_protocolClasses - In the implementation block
+(void)initialize;
-(unsigned long long)requestCachePolicy;
-(void)setRequestCachePolicy:(unsigned long long)arg1 ;
-(double)timeoutIntervalForRequest;
-(void)setTimeoutIntervalForRequest:(double)arg1 ;
-(double)timeoutIntervalForResource;
-(void)setTimeoutIntervalForResource:(double)arg1 ;
-(unsigned long long)networkServiceType;
-(void)setNetworkServiceType:(unsigned long long)arg1 ;
-(bool)allowsCellularAccess;
-(void)setAllowsCellularAccess:(bool)arg1 ;
-(bool)isDiscretionary;
-(void)setDiscretionary:(bool)arg1 ;
-(bool)sessionSendsLaunchEvents;
-(void)setSessionSendsLaunchEvents:(bool)arg1 ;
-(id)connectionProxyDictionary;
-(void)setConnectionProxyDictionary:(id)arg1 ;
-(int)TLSMinimumSupportedProtocol;
-(void)setTLSMinimumSupportedProtocol:(int)arg1 ;
-(int)TLSMaximumSupportedProtocol;
-(void)setTLSMaximumSupportedProtocol:(int)arg1 ;
-(bool)HTTPShouldUsePipelining;
-(void)setHTTPShouldUsePipelining:(bool)arg1 ;
-(bool)HTTPShouldSetCookies;
-(void)setHTTPShouldSetCookies:(bool)arg1 ;
-(unsigned long long)HTTPCookieAcceptPolicy;
-(void)setHTTPCookieAcceptPolicy:(unsigned long long)arg1 ;
-(id)HTTPAdditionalHeaders;
-(void)setHTTPAdditionalHeaders:(id)arg1 ;
-(long long)HTTPMaximumConnectionsPerHost;
-(void)setHTTPMaximumConnectionsPerHost:(long long)arg1 ;
-(id)HTTPCookieStorage;
-(void)setHTTPCookieStorage:(id)arg1 ;
-(id)URLCredentialStorage;
-(void)setURLCredentialStorage:(id)arg1 ;
-(id)URLCache;
-(void)setURLCache:(id)arg1 ;
-(id)protocolClasses;
-(void)setProtocolClasses:(id)arg1 ;
-(id)identifier;
@end

