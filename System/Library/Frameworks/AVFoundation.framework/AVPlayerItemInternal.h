/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:58:55 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol AVPlayerItemDelegate, OS_dispatch_queue;
#import <AVFoundation/AVFoundation-Structs.h>
@class AVWeakReference, AVPlayerItem, AVPlayerConnection, NSObject, AVPropertyStorage, NSError, NSURL, AVAsset, NSArray, NSMutableArray, NSDate, AVAudioMix, AVVideoComposition, AVCustomVideoCompositorSession, NSDictionary, NSMutableDictionary, NSString;

@interface AVPlayerItemInternal : NSObject {

	AVWeakReference* weakReference;
	AVPlayerItem* previousItem;
	AVPlayerItem* nextItem;
	OpaqueFigPlaybackItemRef figPlaybackItem;
	OpaqueFigCPEProtectorRef figCPEProtector;
	OpaqueCMTimebaseRef figTimebase;
	<AVPlayerItemDelegate>* delegate;
	AVWeakReference* playerReference;
	AVPlayerConnection* playerConnection;
	bool isCurrentPlayerItem;
	NSObject<OS_dispatch_queue>* stateDispatchQueue;
	AVPropertyStorage* propertyStorage;
	long long status;
	NSError* error;
	NSURL* URL;
	AVAsset* asset;
	NSArray* automaticallyLoadedAssetKeys;
	AVAsset* assetWithFigPlaybackItem;
	NSArray* trackIDsForAssetWithFigPlaybackItem;
	NSObject<OS_dispatch_queue>* syncLayersQ;
	NSMutableArray* syncLayers;
	NSArray* timedMetadata;
	SCD_Struct_CM4 initialTime;
	SCD_Struct_CM4 initialToleranceBefore;
	SCD_Struct_CM4 initialToleranceAfter;
	SCD_Struct_CM4 forwardPlaybackEndTime;
	SCD_Struct_CM4 reversePlaybackEndTime;
	NSDate* initialDate;
	NSDate* initialEstimatedDate;
	bool initialLimitReadAhead;
	bool allowsExtendedReadAhead;
	long long initialPlaybackLikelyToKeepUpTrigger;
	bool initialAlwaysMonitorsPlayability;
	bool initialWillNeverSeekBackwardsHint;
	bool initialContinuesPlayingDuringPrerollForSeek;
	bool initialContinuesPlayingDuringPrerollForRateChange;
	double initialBufferingTargetMinimum;
	double initialBufferingTargetMaximum;
	CFStringRef initialFigTimePitchAlgorithm;
	bool savesDownloadedDataToDiskWhenDone;
	bool nonForcedSubtitlesEnabled;
	bool networkUsuallyExceedsMaxBitRate;
	bool allowProgressiveSwitchUp;
	float maximumBitRate;
	AVAudioMix* audioMix;
	AVVideoComposition* videoComposition;
	void* figVideoCompositor;
	AVCustomVideoCompositorSession* customVideoCompositorSession;
	bool seekingWaitsForVideoCompositionRendering;
	NSArray* textStyleRules;
	NSDictionary* gaplessInfo;
	long long initialVariantIndex;
	NSDictionary* audibleDRMInfo;
	NSDictionary* rampInOutInfo;
	float soundCheckVolumeNormalization;
	float volumeAdjustment;
	NSMutableArray* handlersToCallWhenReadyForEnqueueing;
	NSMutableDictionary* mediaOptionsSelectedByClient;
	bool haveInitialSamples;
	bool haveCPEProtector;
	bool didSetAssetToAssetWithFigPlaybackItem;
	bool didBecomeReadyForBasicInspection;
	bool didBecomeReadyForInspectionOfMediaSelectionOptions;
	bool didBecomeReadyForInspectionOfTracks;
	bool didBecomeReadyForInspectionOfPresentationSize;
	bool didBecomeReadyForInspectionOfDuration;
	bool didInformObserversAboutAvailabilityOfTracks;
	bool didFireKVOForAssetForNonStreamingItem;
	bool didApplyInitialAudioMix;
	bool wasInitializedWithURL;
	bool needTimedMetadataNotification;
	bool externalSubtitlesEnabled;
	bool externalProtectionRequested;
	bool requiresAccessLog;
	int eqPreset;
	OpaqueFigSimpleMutexRef seekIDMutex;
	int nextSeekIDToGenerate;
	int pendingSeekID;
	/*^block*/ id seekCompletionHandler;
	NSString* dataYouTubeID;
	NSArray* itemOutputs;
	NSMutableArray* itemVideoOutputs;
	NSMutableArray* itemLegibleOutputs;
	unsigned RTCReportingFlags;
	NSString* serviceIdentifier;
	NSString* mediaKind;
	unsigned long long restrictions;

}
@end

