/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:58:59 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/AVFoundation.framework/libAVFAudio.dylib
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <libAVFAudio.dylib/libAVFAudio.dylib-Structs.h>
@class NSString, NSDictionary;

@interface AVVoiceController : NSObject {

	void* _impl;

}

@property (getter=isBargeInDetectEnabled) bool bargeInDetectEnabled; 
@property (getter=isStopOnBargeInEnabled) bool stopOnBargeInEnabled; 
@property (readonly) NSString * recordRoute; 
@property (readonly) unsigned long long lastRecordStartTime; 
@property (readonly) NSDictionary * recordSettings; 
@property (getter=isRecording,readonly) bool recording; 
@property (assign) <Endpointer> * endpointerDelegate; 
@property (assign) int recordEndpointMode; 
@property (assign) double recordStartWaitTime; 
@property (assign) double recordInterspeechWaitTime; 
@property (assign) double recordEndWaitTime; 
@property (@dynamic) <AVVoiceControllerRecordDelegate> * recordDelegate; 
@property (getter=isMeteringEnabled) bool meteringEnabled; 
@property (readonly) NSDictionary * playbackSettings; 
@property (getter=isPlaying,readonly) bool playing; 
@property (@dynamic) <AVVoiceControllerPlaybackDelegate> * playbackDelegate; 
@property (assign) float playbackVolume; 
@property (getter=isStopOnEndpointEnabled) bool stopOnEndpointEnabled; 
@property (assign) float alertVolume; 
-(id)recordRoute;
-(unsigned long long)lastRecordStartTime;
-(bool)isBargeInDetectEnabled;
-(void)setBargeInDetectEnabled:(bool)arg1 ;
-(bool)isStopOnBargeInEnabled;
-(void)setStopOnBargeInEnabled:(bool)arg1 ;
-(void)handleInterruption:(id)arg1 ;
-(void)handleRouteChange:(id)arg1 ;
-(void)handleMediaServerDeath:(id)arg1 ;
-(void)handleMediaServerReset:(id)arg1 ;
-(ControllerImpl*)impl;
-(void)setSessionNotifications;
-(void)removeSessionNotifications;
-(void)hardwareConfigChanged;
-(void)beganRecording;
-(void)recordBufferReceived:(MyAudioQueueBuffer*)arg1 ;
-(void)finishedRecording;
-(void)startpointDetected;
-(void)interspeechPointDetected;
-(void)endpointDetected;
-(void)encodeError;
-(void)beganPlaying;
-(void)playbackBufferReceived:(MyAudioQueueBuffer*)arg1 ;
-(void)finishedPlaying;
-(void)decodeError;
-(void)beginRecordInterruption;
-(void)endRecordInterruption;
-(void)beginPlaybackInterruption;
-(void)endPlaybackInterruption;
-(bool)isRecording;
-(id)initWithContext:(id)arg1 error:(id*)arg2 ;
-(void)prewarmAudioSession;
-(void)releaseAudioSession;
-(bool)setCurrentContext:(id)arg1 error:(id*)arg2 ;
-(bool)prepareRecordWithSettings:(id)arg1 error:(id*)arg2 ;
-(bool)setAlertSoundFromURL:(id)arg1 forType:(int)arg2 ;
-(bool)playAlertSoundForType:(int)arg1 ;
-(bool)startRecording;
-(bool)preparePlaybackWithSettings:(id)arg1 error:(id*)arg2 ;
-(bool)preparePlaybackFromURL:(id)arg1 error:(id*)arg2 ;
-(id)recordDelegate;
-(void)setRecordDelegate:(id)arg1 ;
-(id)recordSettings;
-(double)getRecordBufferDuration;
-(bool)setRecordBufferDuration:(double)arg1 ;
-(id)endpointerDelegate;
-(void)setEndpointerDelegate:(id)arg1 ;
-(int)recordEndpointMode;
-(void)setRecordEndpointMode:(int)arg1 ;
-(double)recordStartWaitTime;
-(void)setRecordStartWaitTime:(double)arg1 ;
-(double)recordInterspeechWaitTime;
-(void)setRecordInterspeechWaitTime:(double)arg1 ;
-(double)recordEndWaitTime;
-(void)setRecordEndWaitTime:(double)arg1 ;
-(id)playbackDelegate;
-(void)setPlaybackDelegate:(id)arg1 ;
-(id)playbackSettings;
-(double)getPlaybackBufferDuration;
-(bool)setPlaybackBufferDuration:(double)arg1 ;
-(void)setAlertVolume:(float)arg1 ;
-(float)alertVolume;
-(void)setPlaybackVolume:(float)arg1 ;
-(float)playbackVolume;
-(bool)isMeteringEnabled;
-(void)setMeteringEnabled:(bool)arg1 ;
-(void)updateMeters;
-(float)peakPowerForChannel:(unsigned long long)arg1 ;
-(float)averagePowerForChannel:(unsigned long long)arg1 ;
-(bool)isStopOnEndpointEnabled;
-(void)setStopOnEndpointEnabled:(bool)arg1 ;
-(void)stopPlaying;
-(bool)isPlaying;
-(void)dealloc;
-(void)stopRecording;
-(bool)startPlaying;
-(void)finalize;
@end

