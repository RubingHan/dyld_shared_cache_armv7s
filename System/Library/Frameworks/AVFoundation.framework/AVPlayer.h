/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:58:55 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <AVFoundation/AVFoundation-Structs.h>
@class AVPlayerInternal, NSString, NSArray, NSError;

@interface AVPlayer : NSObject {

	AVPlayerInternal* _player;

}

@property (nonatomic,copy) NSString * audioOutputDeviceUniqueID; 
@property (assign,nonatomic) bool appliesMediaSelectionCriteriaAutomatically; 
@property (assign,nonatomic) bool disallowsAMRAudio; 
@property (assign,nonatomic) bool allowsPixelBufferPoolSharing; 
@property (getter=isAudioPlaybackEnabledAtAllRates,nonatomic,readonly) bool audioPlaybackEnabledAtAllRates; 
@property (assign,nonatomic) float minRateForAudioPlayback; 
@property (assign,nonatomic) float maxRateForAudioPlayback; 
@property (setter=_setDisplaysUsedForPlayback:,nonatomic,copy) NSArray * _displaysUsedForPlayback; 
@property (nonatomic,readonly) long long _externalProtectionStatus; 
@property (nonatomic,readonly) long long status; 
@property (nonatomic,readonly) NSError * error; 
+(bool)automaticallyNotifiesObserversOfAudioOutputDeviceUniqueID;
+(bool)automaticallyNotifiesObserversOfAutoSwitchStreamVariants;
+(bool)automaticallyNotifiesObserversOfAppliesMediaSelectionCriteriaAutomatically;
+(bool)automaticallyNotifiesObserversOfDisallowsAMRAudio;
+(bool)automaticallyNotifiesObserversOfDisallowsHardwareAcceleratedVideoDecoder;
+(bool)automaticallyNotifiesObserversOfDisallowsAllowsPixelBufferPoolSharing;
+(id)playerWithURL:(id)arg1 ;
+(id)playerWithPlayerItem:(id)arg1 ;
+(bool)automaticallyNotifiesObserversOfCurrentItem;
+(bool)automaticallyNotifiesObserversOfRate;
+(id)keyPathsForValuesAffectingRate;
+(bool)automaticallyNotifiesObserversOfMasterClock;
+(bool)automaticallyNotifiesObserversOfUserVolume;
+(bool)automaticallyNotifiesObserversOfVibrationPattern;
+(bool)automaticallyNotifiesObserversOfVolume;
+(id)keyPathsForValuesAffectingVolume;
+(bool)automaticallyNotifiesObserversOfMuted;
+(id)keyPathsForValuesAffectingMuted;
+(bool)automaticallyNotifiesObserversOfActionAtItemEnd;
+(id)keyPathsForValuesAffectingActionAtItemEnd;
+(bool)automaticallyNotifiesObserversOfClosedCaptionDisplayEnabled;
+(id)keyPathsForValuesAffectingClosedCaptionDisplayEnabled;
+(bool)automaticallyNotifiesObserversOfAllowsExternalPlayback;
+(bool)automaticallyNotifiesObserversOfUsesExternalPlaybackWhileExternalScreenIsActive;
+(bool)automaticallyNotifiesObserversOfExternalPlaybackActive;
+(bool)automaticallyNotifiesObserversOfUsesAudioOnlyModeForExternalPlayback;
+(bool)automaticallyNotifiesObserversOfAllowsAirPlayVideo;
+(bool)automaticallyNotifiesObserversOfAirPlayVideoActive;
+(bool)automaticallyNotifiesObserversOfUsesAirPlayVideoWhileAirPlayScreenIsActive;
+(void)initialize;
-(bool)autoSwitchStreamVariants;
-(bool)preparesItemsForPlaybackAsynchronously;
-(id)_audioOutputDeviceUniqueID;
-(id)audioOutputDeviceUniqueID;
-(void)setAudioOutputDeviceUniqueID:(id)arg1 ;
-(void)setAutoSwitchStreamVariants:(bool)arg1 ;
-(void)setPreparesItemsForPlaybackAsynchronously:(bool)arg1 ;
-(id)defaultMediaSelectionCriteriaForMediaCharacteristic:(id)arg1 ;
-(bool)_appliesMediaSelectionCriteriaAutomatically;
-(bool)appliesMediaSelectionCriteriaAutomatically;
-(id)mediaSelectionCriteriaForMediaCharacteristic:(id)arg1 ;
-(void)setAppliesMediaSelectionCriteriaAutomatically:(bool)arg1 ;
-(void)setMediaSelectionCriteria:(id)arg1 forMediaCharacteristic:(id)arg2 ;
-(bool)_disallowsAMRAudio;
-(bool)_disallowsHardwareAcceleratedVideoDecoder;
-(bool)disallowsHardwareAcceleratedVideoDecoder;
-(void)setDisallowsHardwareAcceleratedVideoDecoder:(bool)arg1 ;
-(bool)disallowsAMRAudio;
-(void)setDisallowsAMRAudio:(bool)arg1 ;
-(bool)_allowsPixelBufferPoolSharing;
-(bool)allowsPixelBufferPoolSharing;
-(void)setAllowsPixelBufferPoolSharing:(bool)arg1 ;
-(id)playerAVAudioSession;
-(id)_clientName;
-(void)_setEQPreset:(int)arg1 ;
-(void)_setStoppingFadeOutDuration:(float)arg1 ;
-(void)_setPreferredLanguageList:(id)arg1 ;
-(bool)_CALayerDestinationIsTVOut;
-(void)_setCALayerDestinationIsTVOut:(bool)arg1 ;
-(bool)_resumePlayback:(double)arg1 error:(id*)arg2 ;
-(void)_setClientName:(id)arg1 ;
-(void)_setWantsVolumeChangesWhenPausedOrInactive:(bool)arg1 ;
-(void)_didFinishSuspension:(id)arg1 ;
-(bool)_iapdExtendedModeIsActive;
-(long long)_itemOkayToPlayWhileTransitioningToBackground:(id)arg1 ;
-(bool)_applicationHasExternallyDisplayedAVPlayerLayerAndIsUnderDeviceLock;
-(bool)_hasAssociatedOnscreenAVPlayerLayer;
-(bool)_shouldDetachContentLayersFromFigPlayer;
-(void)_willEnterForeground:(id)arg1 ;
-(void)removeAudioPlaybackRateLimits;
-(bool)isAudioPlaybackEnabledAtAllRates;
-(void)setMinRateForAudioPlayback:(float)arg1 ;
-(float)minRateForAudioPlayback;
-(void)setMaxRateForAudioPlayback:(float)arg1 ;
-(float)maxRateForAudioPlayback;
-(bool)_outputObscuredDueToInsufficientExternalProtection;
-(id)_playbackDisplaysForFigPlayer;
-(id)_displaysUsedForPlayback;
-(void)_setDisplaysUsedForPlayback:(id)arg1 ;
-(bool)outputObscuredDueToInsufficientExternalProtection;
-(long long)_externalProtectionStatus;
-(void)_addLayer:(id)arg1 ;
-(void)_removeLayer:(id)arg1 ;
-(id)_cachedValueForKey:(id)arg1 ;
-(void)_conformContentLayer:(id)arg1 toSize:(CGSize)arg2 ;
-(id)_stateDispatchQueue;
-(id)_currentSubtitlesPayload;
-(id)_weakReference;
-(id)expectedAssetTypes;
-(id)vibrationPattern;
-(id)initWithPlayerItem:(id)arg1 ;
-(bool)_insertItem:(id)arg1 afterItem:(id)arg2 ;
-(void)_playerDestinationPixelBufferAttributesDidChange:(id)arg1 ;
-(void)_checkDefaultsWriteForPerformanceLogging;
-(void)_removeFPListeners;
-(void)_removeAllLayers;
-(void)_willAccessKVOForKey:(id)arg1 ;
-(void)_didAccessKVOForKey:(id)arg1 ;
-(OpaqueCMClockRef)masterClock;
-(void)setMasterClock:(OpaqueCMClockRef)arg1 ;
-(id)_currentItem;
-(void)_setCachedValue:(id)arg1 forKey:(id)arg2 ;
-(OpaqueFigPlayerRef)_figPlayer;
-(void)_coordinateWithRemovalOfItem:(id)arg1 ;
-(bool)_removeItem:(id)arg1 ;
-(bool)_attachItem:(id)arg1 andPerformOperation:(long long)arg2 withObject:(id)arg3 ;
-(void)_addFPListeners;
-(bool)_airPlayVideoActive;
-(id)_propertyStorage;
-(bool)_externalPlaybackActive;
-(void)_attachLayersToFigPlayer;
-(void)_setNeroVideoGravityOnFigPlayer;
-(bool)_insertPlaybackItemOfItem:(id)arg1 inPlayerQueueAfterPlaybackItemOfItem:(id)arg2 ;
-(void)_changeStatusToFailedWithError:(id)arg1 ;
-(void)_createPlayer:(long long)arg1 item:(id)arg2 preparationRequested:(bool)arg3 completionHandler:(/*^block*/ id)arg4 ;
-(void)_setCurrentItem:(id)arg1 ;
-(void)setRate:(float)arg1 withVolumeRampDuration:(SCD_Struct_CM4)arg2 ;
-(void)seekToDate:(id)arg1 completionHandler:(/*^block*/ id)arg2 ;
-(void)seekToTime:(SCD_Struct_CM4)arg1 toleranceBefore:(SCD_Struct_CM4)arg2 toleranceAfter:(SCD_Struct_CM4)arg3 completionHandler:(/*^block*/ id)arg4 ;
-(int)_createPrerollID;
-(int)_cancelPendingPrerollAndRegisterPrerollCompletionHandler:(/*^block*/ id)arg1 ;
-(/*^block*/ id)_unregisterAndReturnRetainedPrerollCompletionHandler;
-(float)_playerVolume;
-(bool)_isMuted;
-(long long)_defaultActionAtItemEnd;
-(long long)_actionAtItemEnd;
-(void)_setActionAtItemEnd:(long long)arg1 allowingAdvance:(bool)arg2 ;
-(bool)_isClosedCaptionDisplayEnabled;
-(bool)_allowsExternalPlayback;
-(bool)_usesExternalPlaybackWhileExternalScreenIsActive;
-(bool)_usesAudioOnlyModeForExternalPlayback;
-(void)_detachLayersFromFigPlayer;
-(id)_playerLayers;
-(id)_fpNotificationNames;
-(id)_copyPerformanceDataForCurrentItem;
-(id)initWithDispatchQueue:(id)arg1 ;
-(id)dispatchQueue;
-(bool)_isChangingValueForKey:(id)arg1 ;
-(void)_currentItemStatusIsReadyToPlay;
-(void)_advanceCurrentItemAccordingToFigPlaybackItem:(OpaqueFigPlaybackItemRef)arg1 ;
-(void)_removeAllItems;
-(void)seekToTime:(SCD_Struct_CM4)arg1 completionHandler:(/*^block*/ id)arg2 ;
-(void)setRate:(float)arg1 time:(SCD_Struct_CM4)arg2 atHostTime:(SCD_Struct_CM4)arg3 ;
-(void)prerollAtRate:(float)arg1 completionHandler:(/*^block*/ id)arg2 ;
-(void)cancelPendingPrerolls;
-(void)prerollOperationDidComplete:(bool)arg1 notificationPayload:(CFDictionaryRef)arg2 ;
-(void)setVibrationPattern:(id)arg1 ;
-(bool)allowsAirPlayVideo;
-(void)setAllowsAirPlayVideo:(bool)arg1 ;
-(bool)usesAirPlayVideoWhileAirPlayScreenIsActive;
-(void)setUsesAirPlayVideoWhileAirPlayScreenIsActive:(bool)arg1 ;
-(void)replaceCurrentItemWithPlayerItem:(id)arg1 ;
-(id)addPeriodicTimeObserverForInterval:(SCD_Struct_CM4)arg1 queue:(id)arg2 usingBlock:(/*^block*/ id)arg3 ;
-(id)_pixelBufferAttributeMediator;
-(void)_setFigPlaybackItemToMakeCurrent:(OpaqueFigPlaybackItemRef)arg1 ;
-(void)_setCurrentSubtitlesPayload:(id)arg1 ;
-(bool)_shouldLogPerformanceData;
-(void)_logPerformanceDataForPreviousItem;
-(void)_logPerformanceDataForCurrentItem;
-(bool)isAirPlayVideoActive;
-(void)play;
-(bool)isExternalPlaybackActive;
-(SCD_Struct_CM4)currentTime;
-(void)setActionAtItemEnd:(long long)arg1 ;
-(void)seekToDate:(id)arg1 ;
-(void)seekToTime:(SCD_Struct_CM4)arg1 ;
-(void)removeTimeObserver:(id)arg1 ;
-(bool)allowsExternalPlayback;
-(void)setAllowsExternalPlayback:(bool)arg1 ;
-(bool)isClosedCaptionDisplayEnabled;
-(bool)usesExternalPlaybackWhileExternalScreenIsActive;
-(void)setUsesExternalPlaybackWhileExternalScreenIsActive:(bool)arg1 ;
-(void)setClosedCaptionDisplayEnabled:(bool)arg1 ;
-(float)_userVolume;
-(void)_setUserVolume:(float)arg1 ;
-(long long)externalPlaybackType;
-(id)externalPlaybackVideoGravity;
-(void)setExternalPlaybackVideoGravity:(id)arg1 ;
-(void)seekToTime:(SCD_Struct_CM4)arg1 toleranceBefore:(SCD_Struct_CM4)arg2 toleranceAfter:(SCD_Struct_CM4)arg3 ;
-(void)setUsesAudioOnlyModeForExternalPlayback:(bool)arg1 ;
-(bool)usesAudioOnlyModeForExternalPlayback;
-(long long)actionAtItemEnd;
-(id)addBoundaryTimeObserverForTimes:(id)arg1 queue:(id)arg2 usingBlock:(/*^block*/ id)arg3 ;
-(void)setMuted:(bool)arg1 ;
-(void)_enumerateItemsUsingBlock:(/*^block*/ id)arg1 ;
-(void)prepareItem:(id)arg1 withCompletionHandler:(/*^block*/ id)arg2 ;
-(void)setExpectedAssetTypes:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(void)willChangeValueForKey:(id)arg1 ;
-(void)didChangeValueForKey:(id)arg1 ;
-(id)_items;
-(id)currentItem;
-(void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void*)arg4 ;
-(id)valueForUndefinedKey:(id)arg1 ;
-(id)initWithURL:(id)arg1 ;
-(void)pause;
-(long long)status;
-(bool)isMuted;
-(float)rate;
-(id)error;
-(void)finalize;
-(float)volume;
-(void)setVolume:(float)arg1 ;
-(void)setRate:(float)arg1 ;
-(float)_rate;
-(void)setValue:(id)arg1 forUndefinedKey:(id)arg2 ;
@end

