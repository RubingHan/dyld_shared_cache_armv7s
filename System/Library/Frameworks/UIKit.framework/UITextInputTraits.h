/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:00:06 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/UIKit.framework/UIKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <UIKit/UIKit-Structs.h>
#import <UIKit/UITextInputTraits.h>

@protocol UITextInputTraits <NSObject>
@property (assign,nonatomic) long long autocapitalizationType; 
@property (assign,nonatomic) long long autocorrectionType; 
@property (assign,nonatomic) long long spellCheckingType; 
@property (assign,nonatomic) long long keyboardType; 
@property (assign,nonatomic) long long keyboardAppearance; 
@property (assign,nonatomic) long long returnKeyType; 
@property (assign,nonatomic) bool enablesReturnKeyAutomatically; 
@property (assign,getter=isSecureTextEntry,nonatomic) bool secureTextEntry; 
@optional
-(long long)keyboardAppearance;
-(void)setSecureTextEntry:(bool)arg1;
-(bool)isSecureTextEntry;
-(long long)autocapitalizationType;
-(void)setAutocapitalizationType:(long long)arg1;
-(long long)autocorrectionType;
-(void)setAutocorrectionType:(long long)arg1;
-(long long)spellCheckingType;
-(void)setSpellCheckingType:(long long)arg1;
-(long long)keyboardType;
-(void)setKeyboardType:(long long)arg1;
-(void)setKeyboardAppearance:(long long)arg1;
-(long long)returnKeyType;
-(void)setReturnKeyType:(long long)arg1;
-(bool)enablesReturnKeyAutomatically;
-(void)setEnablesReturnKeyAutomatically:(bool)arg1;
@end

#import <UIKit/UITextInputTraits_Private.h>
#import <CoreFoundation/NSCopying.h>

@class UIColor, UIImage;

@interface UITextInputTraits : NSObject <UITextInputTraits, UITextInputTraits_Private, NSCopying> {

	long long autocapitalizationType;
	long long autocorrectionType;
	long long spellCheckingType;
	unsigned keyboardType : 8;
	unsigned keyboardAppearance : 8;
	long long returnKeyType;
	bool enablesReturnKeyAutomatically;
	bool secureTextEntry;
	CFCharacterSetRef textTrimmingSet;
	UIColor* insertionPointColor;
	UIColor* selectionBarColor;
	UIColor* selectionHighlightColor;
	UIImage* selectionDragDotImage;
	unsigned long long insertionPointWidth;
	int textLoupeVisibility;
	int textSelectionBehavior;
	id textSuggestionDelegate;
	bool isSingleLineDocument;
	bool contentsIsSingleValue;
	bool acceptsEmoji;
	bool forceEnableDictation;
	bool returnKeyGoesToNextResponder;
	bool acceptsFloatingKeyboard;
	bool acceptsSplitKeyboard;
	bool displaySecureTextUsingPlainText;
	bool learnsCorrections;
	int emptyContentReturnKeyType;
	int shortcutConversionType;
	bool suppressReturnKeyStyling;
	bool useInterfaceLanguageForLocalization;
	bool deferBecomingResponder;
	bool enablesReturnKeyOnNonWhiteSpaceContent;

}

@property (assign,nonatomic) long long autocapitalizationType; 
@property (assign,nonatomic) long long autocorrectionType; 
@property (assign,nonatomic) long long spellCheckingType; 
@property (assign,nonatomic) long long keyboardType; 
@property (assign,nonatomic) long long keyboardAppearance; 
@property (assign,nonatomic) long long returnKeyType; 
@property (assign,nonatomic) bool enablesReturnKeyAutomatically; 
@property (assign,getter=isSecureTextEntry,nonatomic) bool secureTextEntry; 
@property (assign,nonatomic,@dynamic) CFCharacterSetRef textTrimmingSet; 
@property (nonatomic,retain) UIColor * insertionPointColor; 
@property (nonatomic,retain) UIColor * selectionBarColor; 
@property (nonatomic,retain) UIColor * selectionHighlightColor; 
@property (nonatomic,retain) UIImage * selectionDragDotImage; 
@property (assign,nonatomic) unsigned long long insertionPointWidth; 
@property (assign,nonatomic) int textLoupeVisibility; 
@property (assign,nonatomic) int textSelectionBehavior; 
@property (assign,nonatomic,@dynamic) id textSuggestionDelegate; 
@property (assign,nonatomic) bool isSingleLineDocument; 
@property (assign,nonatomic) bool contentsIsSingleValue; 
@property (assign,nonatomic) bool acceptsEmoji; 
@property (assign,nonatomic) bool forceEnableDictation; 
@property (assign,nonatomic) int emptyContentReturnKeyType; 
@property (assign,nonatomic) bool returnKeyGoesToNextResponder; 
@property (assign,nonatomic) bool acceptsFloatingKeyboard; 
@property (assign,nonatomic) bool acceptsSplitKeyboard; 
@property (assign,nonatomic) bool displaySecureTextUsingPlainText; 
@property (assign,nonatomic) bool learnsCorrections; 
@property (assign,nonatomic) int shortcutConversionType; 
@property (assign,nonatomic) bool suppressReturnKeyStyling; 
@property (assign,nonatomic) bool useInterfaceLanguageForLocalization; 
@property (assign,nonatomic) bool deferBecomingResponder; 
@property (assign,nonatomic) bool enablesReturnKeyOnNonWhiteSpaceContent; 
+(bool)keyboardTypeRequiresASCIICapable:(long long)arg1 ;
+(id)traitsByAdoptingTraits:(id)arg1 ;
+(id)defaultTextInputTraits;
+(long long)accessibleAppearanceForAppearance:(long long)arg1 ;
-(void)_setColorsToMatchTintColor:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(bool)isEqual:(id)arg1 ;
-(id)description;
-(id)copyWithZone:(NSZone)arg1 ;
-(void)setToDefaultValues;
-(void)takeTraitsFrom:(id)arg1 ;
-(int)textSelectionBehavior;
-(long long)keyboardAppearance;
-(void)setSecureTextEntry:(bool)arg1 ;
-(bool)isSecureTextEntry;
-(bool)displaySecureTextUsingPlainText;
-(long long)autocapitalizationType;
-(void)setAutocapitalizationType:(long long)arg1 ;
-(long long)autocorrectionType;
-(void)setAutocorrectionType:(long long)arg1 ;
-(long long)spellCheckingType;
-(void)setSpellCheckingType:(long long)arg1 ;
-(long long)keyboardType;
-(void)setKeyboardType:(long long)arg1 ;
-(void)setKeyboardAppearance:(long long)arg1 ;
-(long long)returnKeyType;
-(void)setReturnKeyType:(long long)arg1 ;
-(bool)enablesReturnKeyAutomatically;
-(void)setEnablesReturnKeyAutomatically:(bool)arg1 ;
-(CFCharacterSetRef)textTrimmingSet;
-(bool)acceptsSplitKeyboard;
-(int)shortcutConversionType;
-(bool)acceptsFloatingKeyboard;
-(bool)learnsCorrections;
-(void)setLearnsCorrections:(bool)arg1 ;
-(void)setTextTrimmingSet:(CFCharacterSetRef)arg1 ;
-(id)insertionPointColor;
-(void)setInsertionPointColor:(id)arg1 ;
-(id)selectionBarColor;
-(void)setSelectionBarColor:(id)arg1 ;
-(id)selectionHighlightColor;
-(void)setSelectionHighlightColor:(id)arg1 ;
-(id)selectionDragDotImage;
-(void)setSelectionDragDotImage:(id)arg1 ;
-(unsigned long long)insertionPointWidth;
-(void)setInsertionPointWidth:(unsigned long long)arg1 ;
-(int)textLoupeVisibility;
-(void)setTextLoupeVisibility:(int)arg1 ;
-(void)setTextSelectionBehavior:(int)arg1 ;
-(id)textSuggestionDelegate;
-(void)setTextSuggestionDelegate:(id)arg1 ;
-(bool)isSingleLineDocument;
-(void)setIsSingleLineDocument:(bool)arg1 ;
-(bool)contentsIsSingleValue;
-(void)setContentsIsSingleValue:(bool)arg1 ;
-(bool)acceptsEmoji;
-(void)setAcceptsEmoji:(bool)arg1 ;
-(bool)forceEnableDictation;
-(void)setForceEnableDictation:(bool)arg1 ;
-(int)emptyContentReturnKeyType;
-(void)setEmptyContentReturnKeyType:(int)arg1 ;
-(bool)returnKeyGoesToNextResponder;
-(void)setReturnKeyGoesToNextResponder:(bool)arg1 ;
-(void)setAcceptsFloatingKeyboard:(bool)arg1 ;
-(void)setAcceptsSplitKeyboard:(bool)arg1 ;
-(void)setDisplaySecureTextUsingPlainText:(bool)arg1 ;
-(void)setShortcutConversionType:(int)arg1 ;
-(bool)suppressReturnKeyStyling;
-(void)setSuppressReturnKeyStyling:(bool)arg1 ;
-(bool)useInterfaceLanguageForLocalization;
-(void)setUseInterfaceLanguageForLocalization:(bool)arg1 ;
-(bool)deferBecomingResponder;
-(void)setDeferBecomingResponder:(bool)arg1 ;
-(bool)enablesReturnKeyOnNonWhiteSpaceContent;
-(void)setEnablesReturnKeyOnNonWhiteSpaceContent:(bool)arg1 ;
-(id)dictionaryRepresentation;
-(void)setToSecureValues;
-(bool)publicTraitsMatchTraits:(id)arg1 ;
@end

