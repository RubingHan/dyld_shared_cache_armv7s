/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:00:03 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/UIKit.framework/UIKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <UIKit/UIKit-Structs.h>
#import <UIKit/UIView.h>
#import <UIKit/UIKeyboardCandidateListDelegate.h>

@protocol UIKeyInput, UIKeyboardCandidateList, UIKeyboardImplGeometryDelegate, UIKeyboardRecordingUIApplicationEventRecording, UIKeyboardTypology;
@class UIKeyboardTaskQueue, TIKeyboardState, TIKeyboardInputManagerState, UIView, NSString, TIKeyboardInputManagerStub, UIKeyboardAutocorrectionController, UIAutocorrectInlinePrompt, UIDelayedAction, TIKeyboardCandidateResultSet, NSObject, UIKeyboardLayout, NSMutableDictionary, UIKeyboardScheduledTask, UITextInputTraits, NSMutableArray, UITextInputArrowKeyHistory, TIKeyboardTouchEvent, _UIActionWhenIdle, UIPhysicalKeyboardEvent, UIAlertView, TIKeyboardLayout, UIResponder;

@interface UIKeyboardImpl : UIView <UIKeyboardCandidateListDelegate> {

	<UIKeyInput>* m_delegate;
	UIKeyboardTaskQueue* m_taskQueue;
	/*^block*/ id m_externalTask;
	TIKeyboardState* m_keyboardState;
	TIKeyboardInputManagerState* m_inputManagerState;
	UIView* m_languageIndicator;
	NSString* m_previousInputString;
	TIKeyboardInputManagerStub* m_inputManager;
	UIKeyboardAutocorrectionController* m_autocorrectionController;
	UIAutocorrectInlinePrompt* m_autocorrectPrompt;
	UIDelayedAction* m_autocorrectPromptAction;
	TIKeyboardCandidateResultSet* m_candidateResultSet;
	<UIKeyboardCandidateList>* m_candidateList;
	UIView* m_markedTextOverlay;
	<UIKeyboardImplGeometryDelegate>* m_geometryDelegate;
	NSObject<UIKeyboardRecording><UIApplicationEventRecording>* m_recorder;
	UIKeyboardLayout* m_layout;
	NSMutableDictionary* m_keyedLayouts;
	NSString* m_inputModeLastChosen;
	UIKeyboardScheduledTask* m_autoDeleteTask;
	unsigned m_autoDeleteCount;
	double m_autoDeleteLastDelete;
	double m_autoDeleteInterval;
	unsigned m_autoDeleteShiftCharacter;
	UIDelayedAction* m_longPressAction;
	long long m_orientation;
	long long m_originalOrientation;
	CGPoint m_inputPoint;
	int m_changeCount;
	double m_changeTime;
	id m_changedDelegate;
	CFRunLoopObserverRef m_observer;
	unsigned long long m_textInputChangingCount;
	bool m_textInputChangingText;
	bool m_textInputChangingDirection;
	bool m_textInputChangesIgnored;
	bool m_insideKeyInputDelegateCall;
	UITextInputTraits* m_defaultTraits;
	UITextInputTraits* m_traits;
	int m_returnKeyState;
	long long m_currentDirection;
	bool m_autoDeleteOK;
	bool m_autocapitalizationPreference;
	bool m_autocorrectPromptTimerFired;
	bool m_autocorrectionPreference;
	bool m_autoshift;
	bool m_caretShowingNow;
	bool m_changeNotificationDisabled;
	bool m_correctionLearningAllowed;
	bool m_delegateIsSMSTextView;
	bool m_delegateRequiresKeyEvents;
	bool m_doubleSpacePeriodWasAppliedInCurrentContext;
	bool m_doubleSpacePeriodPreference;
	bool m_hardwareKeyboardAttached;
	bool m_inDealloc;
	bool m_initializationDone;
	bool m_performanceLoggingEnabled;
	bool m_selecting;
	bool m_shift;
	bool m_shiftLocked;
	bool m_shiftLockedEnabled;
	bool m_settingShift;
	bool m_suggestionsShownForCurrentDeletion;
	bool m_originalShouldSkipCandidateSelection;
	bool m_updatingPreferences;
	bool m_changingGeometryWithSameOrientation;
	bool m_suppressGeometryChangeNotifications;
	bool m_acceptingCandidate;
	bool m_userChangedSelection;
	bool m_shouldChargeKeys;
	bool m_longPress;
	bool m_replacingWord;
	bool m_shiftNeedsUpdate;
	bool m_shiftPreventAutoshift;
	bool m_shiftHeldDownNeedsUpdated;
	bool m_delegateAdoptsTextInput;
	bool m_delegateAdoptsTextInputPrivate;
	bool m_delegateAdoptsKeyboardInput;
	bool m_clientVariantSupportEnabled;
	bool m_clientVariantSupportEnabledEver;
	NSMutableArray* m_keyplaneNamesPreviousDelegate;
	NSMutableArray* m_keyplaneNamesCurrentDelegate;
	UITextInputArrowKeyHistory* m_arrowKeyHistory;
	bool m_preRotateShift;
	bool m_preRotateShiftLocked;
	bool m_showInputModeIndicator;
	bool m_suppressUpdateCandidateView;
	bool m_shouldUpdateCacheOnInputModesChange;
	bool m_shouldSetInputModeInNextRun;
	bool m_rivenCenterFilled;
	double m_splitProgress;
	NSString* m_currentUsedInputMode;
	NSString* m_lastUsedInputMode;
	NSString* m_nextInputModeToUse;
	bool m_needsCandidates;
	bool m_shouldSkipCandidateGeneration;
	bool m_updateLayoutOnShowKeyboard;
	bool m_receivedCandidatesInCurrentInputMode;
	int _currentAlertReason;
	bool m_scrolling;
	bool m_hasInputOnAcceptCandidate;
	bool m_maximizing;
	unsigned long long m_previousSpaceKeyBehavior;
	unsigned long long m_previousReturnKeyBehavior;
	bool m_usesCandidateSelection;
	bool m_showsCandidateBar;
	bool m_showsCandidateInline;
	bool committingCandidate;
	bool geometryIsChanging;
	bool m_hardwareKeyboardIsSeen;
	bool m_softwareKeyboardShownByTouch;
	bool _handlingKeyCommandFromHardwareKeyboard;
	TIKeyboardTouchEvent* m_touchEventWaitingForKeyInputEvent;
	_UIActionWhenIdle* m_delayedCandidateRequest;
	_UIActionWhenIdle* m_deferredDidSetDelegateAction;
	UIPhysicalKeyboardEvent* m_hardwareRepeatEvent;
	UIKeyboardScheduledTask* m_hardwareRepeatTask;
	<UIKeyboardTypology>* typologyRecorder;
	UIAlertView* keyboardAlertView;

}

@property (nonatomic,@dynamic,retain) id changedDelegate; 
@property (assign,nonatomic) bool showInputModeIndicator; 
@property (assign,nonatomic) bool shouldSetInputModeInNextRun; 
@property (nonatomic,retain) NSString * currentUsedInputMode; 
@property (assign,nonatomic) bool showsCandidateBar; 
@property (nonatomic,readonly) bool shouldShowCandidateBar; 
@property (assign,nonatomic) bool receivedCandidatesInCurrentInputMode; 
@property (assign,nonatomic) bool showsCandidateInline; 
@property (assign,nonatomic) bool geometryIsChanging; 
@property (assign,nonatomic) bool shouldSkipCandidateSelection; 
@property (nonatomic,readonly) UIKeyboardTaskQueue * taskQueue; 
@property (readonly) bool centerFilled; 
@property (assign) bool rivenSplitLock; 
@property (readonly) unsigned long long minimumTouchesForTranslation; 
@property (nonatomic,readonly) bool splitTransitionInProgress; 
@property (nonatomic,retain) <UIKeyboardRecording><UIApplicationEventRecording> * recorder; 
@property (nonatomic,retain) <UIKeyboardTypology> * typologyRecorder; 
@property (assign,getter=isInHardwareKeyboardMode,nonatomic) bool inHardwareKeyboardMode; 
@property (nonatomic,retain) UIResponder<UIKeyInput> * delegate; 
@property (assign,nonatomic) <UIKeyboardImplGeometryDelegate> * geometryDelegate; 
@property (nonatomic,readonly) UIResponder<UITextInput> * inputDelegate; 
@property (nonatomic,readonly) UIResponder<UITextInputPrivate> * privateInputDelegate; 
@property (nonatomic,readonly) <UIKeyboardInput> * legacyInputDelegate; 
@property (nonatomic,retain) TIKeyboardLayout * layoutForKeyHitTest; 
@property (nonatomic,readonly) UIResponder * delegateAsResponder; 
@property (nonatomic,retain) UITextInputArrowKeyHistory * arrowKeyHistory; 
@property (nonatomic,readonly) TIKeyboardInputManagerStub * inputManager; 
@property (nonatomic,retain) TIKeyboardInputManagerState * inputManagerState; 
@property (nonatomic,copy) id externalTask; 
@property (nonatomic,readonly) UIKeyboardAutocorrectionController * autocorrectionController; 
@property (nonatomic,retain) TIKeyboardTouchEvent * touchEventWaitingForKeyInputEvent; 
@property (nonatomic,retain) _UIActionWhenIdle * delayedCandidateRequest; 
@property (nonatomic,retain) _UIActionWhenIdle * deferredDidSetDelegateAction; 
@property (nonatomic,retain) id changedDelegate; 
@property (nonatomic,retain) UIPhysicalKeyboardEvent * hardwareRepeatEvent; 
@property (nonatomic,retain) UIKeyboardScheduledTask * hardwareRepeatTask; 
@property (nonatomic,retain) NSString * nextInputModeToUse; 
@property (nonatomic,retain) NSString * lastUsedInputMode; 
@property (nonatomic,retain) UIAlertView * keyboardAlertView; 
@property (assign,nonatomic) bool committingCandidate; 
@property (assign,nonatomic) bool hardwareKeyboardIsSeen; 
@property (assign,nonatomic) bool softwareKeyboardShownByTouch; 
@property (assign,nonatomic) bool handlingKeyCommandFromHardwareKeyboard;                                  //@synthesize handlingKeyCommandFromHardwareKeyboard=_handlingKeyCommandFromHardwareKeyboard - In the implementation block
+(void)_clearHardwareKeyboardMinimizationPreference;
+(void)markPerformance:(id)arg1 ;
+(void)markElapsed:(id)arg1 ;
+(void)sendPerformanceNotification:(id)arg1 ;
+(void)setParentTestForProfiling:(id)arg1 ;
+(id)sharedInstance;
+(void)applicationDidReceiveMemoryWarning:(id)arg1 ;
+(void)applicationWillResignActive:(id)arg1 ;
+(void)applicationDidEnterBackground:(id)arg1 ;
+(void)applicationWillEnterForeground:(id)arg1 ;
+(void)applicationWillSuspend:(id)arg1 ;
+(id)activeInstance;
+(void)releaseSharedInstance;
+(CGSize)sizeForInterfaceOrientation:(long long)arg1 ;
+(bool)isSplit;
+(CGSize)defaultSizeForInterfaceOrientation:(long long)arg1 ;
+(CGSize)_defaultSizeForInterfaceOrientation:(long long)arg1 ;
+(Class)layoutClassForInputMode:(id)arg1 keyboardType:(long long)arg2 ;
+(Class)layoutClassForCurrentInputMode;
+(id)keyboardScreen;
+(id)orientationKeyForOrientation:(long long)arg1 ;
+(CGSize)keyboardSizeForInterfaceOrientation:(long long)arg1 ;
+(double)additionalInstanceHeightForInterfaceOrientation:(long long)arg1 ;
+(double)additionalInstanceHeightLoadingForInterfaceOrientation:(long long)arg1 ;
+(double)splitProgress;
+(unsigned long long)translateToTextInputKeyboardType:(long long)arg1 ;
+(void)suppressSetPersistentOffset:(bool)arg1 ;
+(bool)supportsSplit;
+(double)persistentSplitProgress;
+(void)refreshRivenStateWithTraits:(id)arg1 isKeyboard:(bool)arg2 ;
+(bool)rivenPreference;
+(CGPoint)persistentOffset;
+(double)additionalInstanceHeight;
+(unsigned long long)convertToTextInputAutocapitalizationType:(long long)arg1 ;
+(void)hardwareKeyboardAvailabilityChanged;
+(id)normalizedInputModesFromPreference;
+(double)additionalInstanceHeightLoading;
+(bool)rivenInstalled;
+(bool)rivenTranslationPreference;
+(void)setPersistentSplitProgress:(double)arg1 ;
+(void)setPersistentOffset:(CGPoint)arg1 ;
+(int)persistentDictationTargetZone;
+(void)setPersistentDictationTargetZone:(int)arg1 ;
+(void)setPersistentDictationWindowOffset:(CGPoint)arg1 ;
+(CGPoint)persistentDictationWindowOffset;
+(long long)interfaceOrientationForSize:(CGSize)arg1 ;
-(void)installRecorder;
-(void)stopKeyboardRecording;
-(void)startKeyboardRecording;
-(bool)keyboardRecordingEnabled;
-(id)_inputForAutocorrectionCandidate;
-(void)_setNeedsCandidates:(bool)arg1 ;
-(id)_getCurrentKeyboardName;
-(id)_getCurrentKeyplaneName;
-(id)_getLocalizedInputMode;
-(void)_setAutocorrects:(bool)arg1 ;
-(id)_getAutocorrection;
-(bool)_hasCandidates;
-(long long)_positionInCandidateList:(id)arg1 ;
-(bool)_needsCandidates;
-(id)selectionView;
-(void)setInitialDirection;
-(id)_layout;
-(void)clearLanguageIndicator;
-(bool)isUsingDictationLayout;
-(void)setSplit:(bool)arg1 animated:(bool)arg2 ;
-(void)finishSplitTransitionWithProgress:(double)arg1 ;
-(void)clearExcessKeyboardMemory;
-(bool)keyboardDrawsOpaque;
-(bool)_shouldMinimizeForHardwareKeyboard;
-(void)setTextInputChangesIgnored:(bool)arg1 ;
-(void)acceptAutocorrectionAndEndComposition;
-(void)installTypology;
-(bool)typologyEnabled;
-(void)launchTypologyApplication;
-(void)logHandwritingData;
-(void)_setInputManager:(id)arg1 ;
-(void)_setShiftLockedEnabled:(bool)arg1 ;
-(bool)hasAutoRepeat;
-(void)updateFromTextInputTraits;
-(bool)_isShowingCandidateUIWithAvailableCandidates;
-(int)textInputChangingCount;
-(void)testAutocorrectionPromptWithCorrection:(id)arg1 ;
-(bool)isAutoDeleteActive;
-(void)timeMark:(unsigned)arg1 message:(id)arg2 ;
-(void)timeMark:(unsigned)arg1 ;
-(void)timeElapsed:(unsigned)arg1 message:(id)arg2 ;
-(void)callLayoutUpdateLocalizedKeys;
-(void)callLayoutUpdateAllLocalizedKeys;
-(void)callLayoutUpdateReturnKey;
-(void)callLayoutSetShift:(bool)arg1 ;
-(void)callLayoutSetAutoshift:(bool)arg1 ;
-(bool)callLayoutIsShiftKeyPlaneChooser;
-(bool)callLayoutIsShiftKeyBeingHeld;
-(bool)callLayoutUsesAutoShift;
-(bool)callLayoutIgnoresShiftState;
-(void)callLayoutLongPressAction;
-(id)initWithFrame:(CGRect)arg1 ;
-(void)dealloc;
-(void)setShift:(bool)arg1 ;
-(void)setDelegate:(id)arg1 ;
-(id)hitTest:(CGPoint)arg1 withEvent:(id)arg2 ;
-(bool)pointInside:(CGPoint)arg1 withEvent:(id)arg2 ;
-(void)setFrame:(CGRect)arg1 ;
-(void)removeFromSuperview;
-(id)delegate;
-(void)cancelAllKeyEvents;
-(void)ejectKeyDown;
-(void)_physicalButtonsBegan:(id)arg1 withEvent:(id)arg2 ;
-(long long)interfaceOrientation;
-(void)handleKeyEvent:(id)arg1 ;
-(void)_wheelChangedWithEvent:(id)arg1 ;
-(void)_physicalButtonsEnded:(id)arg1 withEvent:(id)arg2 ;
-(void)_physicalButtonsCancelled:(id)arg1 withEvent:(id)arg2 ;
-(void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2 ;
-(bool)canHandleEvent:(id)arg1 ;
-(void)_moveWithEvent:(id)arg1 ;
-(void)_willMoveToWindow:(id)arg1 withAncestorView:(id)arg2 ;
-(bool)pointInside:(CGPoint)arg1 forEvent:(GSEventRef)arg2 ;
-(void)candidateListAcceptCandidate:(id)arg1 ;
-(void)candidateListSelectionDidChange:(id)arg1 ;
-(void)showPreviousCandidate;
-(void)showNextPage;
-(void)jumpToCompositions;
-(void)revealHiddenCandidates;
-(id)textInputTraits;
-(void)setSelectionWithPoint:(CGPoint)arg1 ;
-(id)inputDelegate;
-(void)textWillChange:(id)arg1 ;
-(void)textDidChange:(id)arg1 ;
-(void)insertText:(id)arg1 ;
-(void)deleteBackward;
-(void)unmarkText;
-(int)returnKeyType;
-(bool)hasMarkedText;
-(void)remoteControlReceivedWithEvent:(id)arg1 ;
-(void)detach;
-(void)updateLayout;
-(void)setCaretBlinks:(bool)arg1 ;
-(void)scheduleReplacementsWithOptions:(unsigned long long)arg1 ;
-(void)layoutHasChanged;
-(void)textFrameChanged:(id)arg1 ;
-(id)changedDelegate;
-(void)setChangedDelegate:(id)arg1 ;
-(void)textChanged:(id)arg1 ;
-(CGRect)subtractKeyboardFrameFromRect:(CGRect)arg1 inView:(id)arg2 ;
-(int)_clipCornersOfView:(id)arg1 ;
-(bool)usesCandidateSelection;
-(void)setUsesCandidateSelection:(bool)arg1 ;
-(id)candidateList;
-(bool)supportsNumberKeySelection;
-(bool)centerFilled;
-(void)releaseInputManager;
-(void)clearDelegate;
-(void)clearAnimations;
-(void)clearTimers;
-(void)clearLayouts;
-(void)acceptAutocorrection;
-(void)_updateSoundPreheatingForWindow:(id)arg1 ;
-(id)delegateAsResponder;
-(bool)showsCandidateBar;
-(bool)shouldShowCandidateBar;
-(void)takeTextInputTraitsFromDelegate;
-(bool)shiftLockPreference;
-(bool)doubleSpacePeriodPreference;
-(id)inputModePreference;
-(id)UILanguagePreference;
-(void)refreshRivenPreferences;
-(void)setInSplitKeyboardMode:(id)arg1 ;
-(void)setInputModeFromPreferences;
-(void)delayedInit;
-(void)applicationSuspendedEventsOnly:(id)arg1 ;
-(void)applicationResumedEventsOnly:(id)arg1 ;
-(void)keyboardDidHide:(id)arg1 ;
-(void)selectionScrolling:(id)arg1 ;
-(bool)performanceLoggingPreference;
-(void)setRecorder:(id)arg1 ;
-(void)setTypologyRecorder:(id)arg1 ;
-(void)removeAutocorrectPrompt;
-(void)setNextInputModeToUse:(id)arg1 ;
-(void)setLastUsedInputMode:(id)arg1 ;
-(void)setCurrentUsedInputMode:(id)arg1 ;
-(void)setInputMode:(id)arg1 ;
-(id)layoutState;
-(id)autocorrectionController;
-(void)clearInput;
-(id)keyboardAlertView;
-(void)setKeyboardAlertView:(id)arg1 ;
-(void)clearChangeTimeAndCount;
-(void)updateCandidateDisplay;
-(bool)autocorrectionPreferenceForTraits;
-(void)setAutocorrectSpellingEnabled:(bool)arg1 ;
-(bool)autocapitalizationPreference;
-(void)updateInputManagerAutocapitalizationType;
-(void)recomputeActiveInputModesFromList:(id)arg1 ;
-(void)syncInputManagerToKeyboardState;
-(CGRect)frameForKeylayoutName:(id)arg1 ;
-(CGSize)dragGestureSize;
-(void)setSplitProgress:(double)arg1 ;
-(void)setRivenSplitLock:(bool)arg1 ;
-(bool)autocorrectionPreference;
-(bool)checkSpellingPreference;
-(bool)automaticMinimizationEnabled;
-(id)inputModeLastChosenPreference;
-(void)setInputMode:(id)arg1 userInitiated:(bool)arg2 ;
-(id)taskQueue;
-(void)setInputMode:(id)arg1 userInitiated:(bool)arg2 updateIndicator:(bool)arg3 executionContext:(id)arg4 ;
-(void)setInputManagerFromInputMode:(id)arg1 ;
-(bool)isMinimized;
-(void)updateInputModeIndicatorOnSingleKeyOnly:(bool)arg1 ;
-(void)finishSetInputMode:(id)arg1 didChangeDirection:(bool)arg2 executionContext:(id)arg3 ;
-(void)textChanged:(id)arg1 executionContext:(id)arg2 ;
-(void)syncInputManagerToKeyboardStateWithExecutionContext:(id)arg1 ;
-(void)updateTextCandidateView;
-(id)typologyRecorder;
-(id)inputModeLastUsedPreference;
-(void)fadeAnimationDidStop:(id)arg1 finished:(id)arg2 ;
-(void)updateInputModeIndicatorOnSingleKeyOnly:(bool)arg1 preserveIfPossible:(bool)arg2 ;
-(void)showInformationalAlertIfNeededForReason:(int)arg1 ;
-(bool)shouldForceASCIICapable;
-(id)currentUsedInputMode;
-(id)lastUsedInputMode;
-(id)nextInputModeToUse;
-(id)getLastUsedInputMode;
-(id)nextInputModeInPreferencedList;
-(void)finishSetInputModeToNextInPreferredListWithExecutionContext:(id)arg1 ;
-(void)setInputModeLastChosenPreference;
-(void)showInternationalKeyInfoAlertIfNeeded;
-(bool)showInputModeIndicator;
-(void)setOrientation;
-(void)setShiftLocked:(bool)arg1 ;
-(id)privateInputDelegate;
-(void)setDelegate:(id)arg1 force:(bool)arg2 ;
-(void)updateReturnKey;
-(id)recorder;
-(void)setCaretVisible:(bool)arg1 ;
-(int)changeCount;
-(void)storeDelegateConformance;
-(void)stopAutoDelete;
-(void)clearShiftState;
-(void)callChanged;
-(void)clearTransientState;
-(bool)delegateIsSMSTextView;
-(void)setReturnKeyEnabled:(bool)arg1 ;
-(void)updateShiftState;
-(id)deferredDidSetDelegateAction;
-(void)didSetDelegate;
-(void)setDeferredDidSetDelegateAction:(id)arg1 ;
-(void)updateForChangedSelection;
-(void)updateForChangedSelectionWithExecutionContext:(id)arg1 ;
-(void)releaseInputManagerIfInactive;
-(bool)checkSpellingPreferenceForTraits;
-(bool)isAutoFillMode;
-(void)selectionWillChange:(id)arg1 ;
-(void)finishTextChanged;
-(void)updateReturnKey:(bool)arg1 ;
-(void)setChanged;
-(void)setShiftOffIfNeeded;
-(void)selectionDidChange:(id)arg1 ;
-(id)legacyInputDelegate;
-(id)inputManagerState;
-(void)updateAutocorrectPromptAction;
-(void)updateObserverState;
-(id)arrowKeyHistory;
-(void)setArrowKeyHistory:(id)arg1 ;
-(void)setHandlingKeyCommandFromHardwareKeyboard:(bool)arg1 ;
-(void)movePhraseBoundaryToDirection:(long long)arg1 ;
-(void)deleteForwardAndNotify:(bool)arg1 ;
-(void)fadeAutocorrectPrompt;
-(id)inputModeLastUsedForLanguage:(id)arg1 ;
-(void)performKeyBehaviorConfirm;
-(void)performKeyBehaviorConfirmFirstCandidate;
-(id)_keyboardBehaviorState;
-(void)setGeometryIsChanging:(bool)arg1 ;
-(void)updateLayoutIfNeeded;
-(void)setAutocorrection:(id)arg1 ;
-(void)releaseSuppressUpdateCandidateView;
-(void)clearLongPressTimer;
-(void)generateCandidates;
-(bool)showsCandidateInline;
-(bool)currentKeyboardTraitsAllowCandidateBar;
-(void)setShouldSkipCandidateSelection:(bool)arg1 ;
-(void)setShowsCandidateBar:(bool)arg1 ;
-(void)finishLayoutChangeWithArguments:(id)arg1 ;
-(void)resizeForKeyplaneSize:(CGSize)arg1 ;
-(bool)splitTransitionInProgress;
-(id)markedText;
-(id)inputStringFromPhraseBoundary;
-(void)clearInputForMarkedText;
-(id)searchStringForMarkedText;
-(bool)hasEditableMarkedText;
-(id)inputManager;
-(void)prepareForSelectionChange;
-(void)setPreviousInputString:(id)arg1 ;
-(void)completeUpdateForChangedSelection:(bool)arg1 ;
-(void)callChangedSelection;
-(void)deleteHandwritingStrokesAtIndexes:(id)arg1 ;
-(void)flushTouchEventWaitingForKeyInputEventIfNecessary;
-(void)refreshKeyboardState;
-(/*^block*/ id)replyHandlerForSyncToKeyboardStateWithExecutionContext:(id)arg1 ;
-(void)continueSyncToKeyboardStateWithOperations:(id)arg1 ;
-(void)handleReplyToSyncToKeyboardStateWithTask:(/*^block*/ id)arg1 executionContext:(id)arg2 ;
-(void)performOperations:(id)arg1 ;
-(id)delayedCandidateRequest;
-(void)setDelayedCandidateRequest:(id)arg1 ;
-(id)touchEventWaitingForKeyInputEvent;
-(void)setTouchEventWaitingForKeyInputEvent:(id)arg1 ;
-(/*^block*/ id)replyHandlerForHandleKeyboardInputWithExecutionContext:(id)arg1 ;
-(void)continueHandleKeyboardInputWithOperations:(id)arg1 ;
-(void)handleReplyToHandleKeyboardInputWithTask:(/*^block*/ id)arg1 executionContext:(id)arg2 ;
-(void)generateCandidatesAsynchronouslyWithRange:(NSRange)arg1 selectedCandidate:(id)arg2 ;
-(/*^block*/ id)replyHandlerForGenerateCandidatesAsynchronouslyWithSelectedCandidate:(id)arg1 ;
-(void)continueGenerateCandidatesAsynchronouslyWithOperations:(id)arg1 ;
-(void)handleReplyToGenerateCandidatesAsynchronouslyWithTask:(/*^block*/ id)arg1 ;
-(/*^block*/ id)replyHandlerForGenerateAutocorrectionWithExecutionContext:(id)arg1 ;
-(void)continueGenerateAutocorrectionWithOperations:(id)arg1 ;
-(void)handleReplyToGenerateAutocorrectionWithTask:(/*^block*/ id)arg1 executionContext:(id)arg2 ;
-(/*^block*/ id)replyHandlerForHandleAcceptedCandidateWithExecutionContext:(id)arg1 ;
-(void)continueHandleAcceptedCandidateWithOperations:(id)arg1 ;
-(void)handleReplyToHandleAcceptedCandidateWithTask:(/*^block*/ id)arg1 executionContext:(id)arg2 ;
-(/*^block*/ id)replyHandlerForGenerateReplacementsForStringWithCandidatesHandler:(/*^block*/ id)arg1 executionContext:(id)arg2 ;
-(void)continueGenerateReplacementsForStringWithCandidates:(id)arg1 candidatesHandler:(/*^block*/ id)arg2 ;
-(void)handleReplyToGenerateReplacementsForStringWithTask:(/*^block*/ id)arg1 executionContext:(id)arg2 ;
-(void)skipHitTestForTouchEvent:(id)arg1 ;
-(/*^block*/ id)replyHandlerForPerformHitTestForTouchEventWithKeyCodeHandler:(/*^block*/ id)arg1 executionContext:(id)arg2 ;
-(void)continuePerformHitTestToKeyCode:(long long)arg1 keyCodeHandler:(/*^block*/ id)arg2 ;
-(void)handleReplyToPerformHitTestWithTask:(/*^block*/ id)arg1 executionContext:(id)arg2 ;
-(/*^block*/ id)replyHandlerForAdjustPhraseBoundaryWithExecutionContext:(id)arg1 ;
-(void)didChangePhraseBoundary;
-(bool)_systemHasKbd;
-(bool)isDesiredInputMode:(id)arg1 ;
-(bool)isAllowedInputMode:(id)arg1 ;
-(bool)shouldSwitchInputMode:(id)arg1 ;
-(void)notifyShiftState;
-(bool)isSelectionAtSentenceAutoshiftBoundary;
-(void)setShiftPreventAutoshift:(bool)arg1 ;
-(void)setShift:(bool)arg1 autoshift:(bool)arg2 ;
-(void)setShiftNeedsUpdate;
-(bool)shouldSkipCandidateSelection;
-(bool)suppliesCompletions;
-(void)deleteFromInputWithExecutionContext:(id)arg1 ;
-(void)_handleKeyEvent:(id)arg1 executionContext:(id)arg2 ;
-(void)handleDeleteAsRepeat:(bool)arg1 executionContext:(id)arg2 ;
-(void)handleDeleteWithExecutionContext:(id)arg1 ;
-(void)handleClearWithExecutionContext:(id)arg1 ;
-(bool)callShouldReplaceExtendedRange:(unsigned long long)arg1 withText:(id)arg2 includeMarkedText:(bool)arg3 ;
-(void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2 executionContext:(id)arg3 ;
-(bool)acceptInputString:(id)arg1 ;
-(void)deleteBackwardAndNotify:(bool)arg1 ;
-(void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2 ;
-(bool)isInHardwareKeyboardMode;
-(void)updateDoubleSpacePeriodStateForCharacter:(unsigned)arg1 ;
-(void)setExternalTask:(/*^block*/ id)arg1 ;
-(void)updateLastUsedInputMode:(id)arg1 ;
-(id)inputEventForInputString:(id)arg1 ;
-(void)completeAcceptCandidateBeforeAddingInput:(id)arg1 executionContext:(id)arg2 ;
-(void)acceptCurrentCandidateIfSelectedWithExecutionContext:(id)arg1 ;
-(void)updateChangeTimeAndIncrementCount;
-(void)acceptCurrentCandidate;
-(id)acceptedAutocorrectionForWordTerminator:(id)arg1 ;
-(bool)nextCharacterIsWordCharacter;
-(bool)acceptWord:(id)arg1 firstDelete:(unsigned long long)arg2 forInput:(id)arg3 ;
-(void)moveSelectionToEndOfWord;
-(void)completeAddInputString:(id)arg1 ;
-(void)addWordTerminator:(id)arg1 afterSpace:(bool)arg2 elapsedTime:(double)arg3 executionContext:(id)arg4 ;
-(bool)callShouldInsertText:(id)arg1 ;
-(void)willReplaceTextInRangedSelectionWithKeyboardInput;
-(void)completeAddInputString:(id)arg1 generateCandidates:(bool)arg2 ;
-(void)handleKeyboardInput:(id)arg1 executionContext:(id)arg2 ;
-(bool)shouldAcceptCandidate:(id)arg1 beforeInputString:(id)arg2 ;
-(void)trackUsageForAcceptedAutocorrection:(id)arg1 promptWasShowing:(bool)arg2 ;
-(bool)handleDoubleSpacePeriodForInputString:(id)arg1 afterSpace:(bool)arg2 elapsedTime:(double)arg3 ;
-(void)updateDoubleSpacePeriodStateForString:(id)arg1 ;
-(void)setUserSelectedCurrentCandidate:(bool)arg1 ;
-(unsigned long long)phraseBoundary;
-(void)adjustPhraseBoundaryInForwardDirection:(bool)arg1 executionContext:(id)arg2 ;
-(void)completeDeleteOnceFromInputWithCharacterBefore:(unsigned)arg1 ;
-(bool)selectionIsEndOfWord;
-(void)scheduleReplacementsAfterDeletionToEndOfWord;
-(bool)shouldEnableShiftForDeletedCharacter:(unsigned)arg1 ;
-(bool)callShouldDeleteWithWordCountForRapidDelete:(int)arg1 characterCountForRapidDelete:(int)arg2 ;
-(void)deleteOnceFromInputWithExecutionContext:(id)arg1 ;
-(void)completeDeleteFromInput;
-(bool)userSelectedCurrentCandidate;
-(bool)acceptWord:(id)arg1 firstDelete:(unsigned long long)arg2 ;
-(void)acceptCandidate:(id)arg1 atIndex:(unsigned long long)arg2 executionContext:(id)arg3 ;
-(void)acceptCandidate:(id)arg1 ;
-(void)completeAcceptCandidate:(id)arg1 ;
-(void)handleAcceptedCandidate:(id)arg1 executionContext:(id)arg2 ;
-(bool)committingCandidate;
-(void)setCommittingCandidate:(bool)arg1 ;
-(void)acceptCurrentCandidateWithExecutionContext:(id)arg1 ;
-(void)acceptCandidate:(id)arg1 atIndex:(unsigned long long)arg2 ;
-(void)generateCandidatesWithOptions:(int)arg1 ;
-(void)trackUsageForCandidateAcceptedAction:(id)arg1 ;
-(void)updateKeyboardConfigurations;
-(void)setCandidates:(id)arg1 ;
-(void)addInputObject:(id)arg1 executionContext:(id)arg2 ;
-(void)setInHardwareKeyboardMode:(bool)arg1 ;
-(void)completeAcceptCandidateBeforeAddingInputObject:(id)arg1 executionContext:(id)arg2 ;
-(void)applyAutocorrection;
-(bool)shouldIgnoreCandidateSet:(id)arg1 documentOperation:(id)arg2 ;
-(void)generateCandidatesAsynchronously;
-(bool)needsToDeferUpdateTextCandidateView;
-(void)handleDelayedActionUpdateTextCandidateView;
-(void)updateAutocorrectPrompt:(id)arg1 ;
-(void)resizeCandidateBarWithDelta:(double)arg1 ;
-(void)clearAutocorrectPromptTimer;
-(bool)noContent;
-(id)_canonicalKeyTypeForKeyType:(id)arg1 ;
-(void)_nop;
-(void)showNextCandidates;
-(id)returnKeyDisplayName;
-(bool)handlingKeyCommandFromHardwareKeyboard;
-(void)acceptFirstCandidate;
-(void)_handleKeyBehavior:(unsigned long long)arg1 forKeyType:(id)arg2 ;
-(id)updateKeyBehaviors:(id)arg1 withBehaviors:(id)arg2 forState:(id)arg3 ;
-(id)inputOverlayContainer;
-(bool)delegateSupportsCorrectionUI;
-(CGRect)convertRectToAutocorrectRect:(CGRect)arg1 delegateView:(id)arg2 container:(id)arg3 ;
-(id)_rangeForAutocorrectionText:(id)arg1 ;
-(void)touchAutocorrectPromptTimer;
-(id)_autocorrectPromptRects;
-(void)trackUsageForPromptedCorrection:(id)arg1 inputString:(id)arg2 previousPrompt:(id)arg3 ;
-(void)animateAutocorrection;
-(void)autocorrectionAnimationDidStop:(id)arg1 finished:(id)arg2 context:(id)arg3 ;
-(bool)delegateSuggestionsForCurrentInput;
-(void)generateReplacementsForString:(id)arg1 candidatesHandler:(/*^block*/ id)arg2 executionContext:(id)arg3 ;
-(void)clearAutoDeleteTimer;
-(void)handleAutoDeleteWithExecutionContext:(id)arg1 ;
-(void)completeHandleAutoDelete;
-(void)touchAutoDeleteTimerWithThreshold:(double)arg1 ;
-(void)handleDelayedActionLongPress;
-(void)touchLongPressTimerWithDelay:(double)arg1 ;
-(void)longPressAction;
-(void)hardwareKeyboardAvailabilityChanged;
-(void)setAutomaticMinimizationEnabled:(bool)arg1 ;
-(id)hardwareRepeatTask;
-(id)hardwareRepeatEvent;
-(void)handleKeyEvent:(id)arg1 executionContext:(id)arg2 ;
-(void)setHardwareRepeatTask:(id)arg1 ;
-(void)prepareForGeometryChange;
-(void)geometryChangeDone:(bool)arg1 ;
-(void)showKeyboard;
-(void)hideKeyboard;
-(void)setHardwareRepeatEvent:(id)arg1 ;
-(void)_handleWebKeyEvent:(id)arg1 withEventType:(int)arg2 withInputString:(id)arg3 withInputStringIgnoringModifiers:(id)arg4 ;
-(/*^block*/ id)externalTask;
-(void)_handleWebKeyEvent:(id)arg1 withIndex:(unsigned long long)arg2 inInputString:(id)arg3 executionContext:(id)arg4 ;
-(void)updateKeyboardEventsLagging:(id)arg1 ;
-(void)setHardwareKeyboardIsSeen:(bool)arg1 ;
-(bool)softwareKeyboardShownByTouch;
-(void)toggleSoftwareKeyboard;
-(void)setSoftwareKeyboardShownByTouch:(bool)arg1 ;
-(void)_remapKeyEvent:(id)arg1 withKeyEventMap:(id)arg2 ;
-(void)firstHardwareAutoRepeatWithExecutionContext:(id)arg1 ;
-(void)_handleWebKeyEvent:(id)arg1 withInputString:(id)arg2 executionContext:(id)arg3 ;
-(bool)handleKeyCommand:(id)arg1 repeatOkay:(bool*)arg2 ;
-(bool)isValidKeyInput:(id)arg1 ;
-(void)completeHandleKeyEvent:(id)arg1 ;
-(void)handleKeyWithString:(id)arg1 forKeyEvent:(id)arg2 executionContext:(id)arg3 ;
-(void)handleStringInput:(id)arg1 withFlags:(unsigned long long)arg2 executionContext:(id)arg3 ;
-(bool)hardwareKeyboardIsSeen;
-(bool)caretBlinks;
-(void)clearSelection;
-(bool)canHandleKeyHitTest;
-(bool)needsKeyHitTestResults;
-(void)setCandidateList:(id)arg1 updateCandidateView:(bool)arg2 ;
-(id)layoutForKeyHitTest;
-(void)setLayoutForKeyHitTest:(id)arg1 ;
-(void)defaultsDidChange;
-(bool)rivenSplitLock;
-(unsigned long long)minimumTouchesForTranslation;
-(bool)hideAccessoryViewsDuringSplit;
-(void)cancelSplitTransition;
-(bool)swipeToTabPreference;
-(bool)keyboardsExpandedPreference;
-(void)saveInputModesPreference:(id)arg1 ;
-(id)inputModeFirstPreference;
-(void)setShouldUpdateCacheOnInputModesChange:(bool)arg1 ;
-(id)hardwareKeyboardsSeenPreference;
-(void)setHardwareKeyboardsSeenPreference:(id)arg1 ;
-(void)setInputModeToNextInPreferredListWithExecutionContext:(id)arg1 ;
-(void)setInputModeToNextASCIICapableInPreferredList;
-(id)inputModeLastChosen;
-(void)prepareLayoutForInterfaceOrientation:(long long)arg1 ;
-(void)updateLayoutToCurrentInterfaceOrientation;
-(void)setCorrectionLearningAllowed:(bool)arg1 ;
-(bool)autocorrectSpellingEnabled;
-(void)setDefaultTextInputTraits:(id)arg1 ;
-(void)enable;
-(bool)changeNotificationDisabled;
-(void)setChangeNotificationDisabled:(bool)arg1 ;
-(void)handleObserverCallback;
-(void)setMarkedText:(id)arg1 selectedRange:(NSRange)arg2 inputString:(id)arg3 searchString:(id)arg4 ;
-(void)unmarkText:(id)arg1 ;
-(id)markedTextOverlay;
-(void)generateAutocorrectionWithExecutionContext:(id)arg1 ;
-(void)skipHitTestForTouchEvent:(id)arg1 delayed:(bool)arg2 ;
-(void)performHitTestForTouchEvent:(id)arg1 keyCodeHandler:(/*^block*/ id)arg2 executionContext:(id)arg3 ;
-(void)removeAllDynamicDictionaries;
-(void)recomputeActiveInputModes;
-(void)toggleShift;
-(void)setShiftLockedForced:(bool)arg1 ;
-(bool)isShifted;
-(bool)isAutoShifted;
-(bool)isShiftLocked;
-(bool)shiftLockedEnabled;
-(void)forceShiftUpdate;
-(void)forceShiftUpdateIfKeyboardStateChanged;
-(void)setInputManagerState:(id)arg1 ;
-(void)keyActivated;
-(void)keyDeactivated;
-(void)setInputPoint:(CGPoint)arg1 ;
-(void)handleDelete;
-(void)handleClear;
-(void)insertTextAfterSelection:(id)arg1 ;
-(void)addInputString:(id)arg1 ;
-(void)addInputString:(id)arg1 fromVariantKey:(bool)arg2 ;
-(void)updateLayoutAndSetShift;
-(void)deleteFromInput;
-(void)removeAutocorrection;
-(void)acceptCurrentCandidateIfSelected;
-(void)addInputObject:(id)arg1 ;
-(void)replaceText:(id)arg1 ;
-(bool)displaysCandidates;
-(void)updateCandidateDisplayAsyncWithCandidateSet:(id)arg1 documentOperation:(id)arg2 ;
-(void)setShowsCandidateInline:(bool)arg1 ;
-(id)autocorrectPrompt;
-(bool)returnKeyEnabled;
-(void)handleDelayedActionUpdateAutocorrectPrompt;
-(void)updateAutocorrectPromptDisplay:(CGRect)arg1 ;
-(id)autocorrectionRecordForWord:(id)arg1 ;
-(id)generateAutocorrectionReplacements:(id)arg1 ;
-(void)startAutoDeleteTimer;
-(void)touchLongPressTimer;
-(bool)isLongPress;
-(void)dismissKeyboard;
-(void)showKeyboardIfNeeded;
-(void)startCaretBlinkIfNeeded;
-(bool)caretVisible;
-(id)geometryDelegate;
-(void)setGeometryDelegate:(id)arg1 ;
-(void)setShowInputModeIndicator:(bool)arg1 ;
-(bool)shouldSetInputModeInNextRun;
-(void)setShouldSetInputModeInNextRun:(bool)arg1 ;
-(bool)receivedCandidatesInCurrentInputMode;
-(void)setReceivedCandidatesInCurrentInputMode:(bool)arg1 ;
-(bool)geometryIsChanging;
@end

