/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:00:08 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/UIKit.framework/UIKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <UIKit/UIKit-Structs.h>
#import <UIKit/UIKeyboardLayout.h>

@class UIKBTree, NSString, UIKBKeyplaneView, UIKBBackgroundView, NSMutableDictionary, NSMutableSet, UISwipeGestureRecognizer, UIKeyboardSplitTransitionView, CADisplayLink, UIDelayedAction, UIView, NSTimer, UIKBRenderConfig;

@interface UIKeyboardLayoutStar : UIKeyboardLayout {

	UIKBTree* _keyboard;
	UIKBTree* _keyplane;
	NSString* _keyboardName;
	NSString* _keyplaneName;
	long long _appearance;
	UIKBTree* _activeKey;
	UIKBKeyplaneView* _keyplaneView;
	UIKBBackgroundView* _backgroundView;
	double _prevTouchUpTime;
	double _prevTouchDownTime;
	int _prevUpActions;
	NSMutableDictionary* _keyboards;
	NSMutableDictionary* _allKeyplaneViews;
	NSMutableSet* _allKeyplaneKeycaps;
	NSMutableSet* _validInputStrings;
	NSString* _localizedInputKey;
	CFDictionaryRef _extendedTouchInfoMap;
	int _preferredTrackingChangeCount;
	int _shiftTrackingChangeCount;
	NSMutableSet* _accentInfo;
	NSMutableSet* _hasAccents;
	id _spaceTarget;
	SEL _spaceAction;
	SEL _spaceLongAction;
	id _returnTarget;
	SEL _returnAction;
	SEL _returnLongAction;
	id _deleteTarget;
	SEL _deleteAction;
	SEL _deleteLongAction;
	bool _shift;
	bool _autoshift;
	bool _settingShift;
	bool _didLongPress;
	NSString* _preTouchKeyplaneName;
	bool _revertKeyplaneAfterTouch;
	bool _wasShifted;
	bool _swipeDetected;
	bool _showIntlKey;
	bool _showDictationKey;
	bool _shiftLockReady;
	double _shiftLockFirstTapTime;
	UISwipeGestureRecognizer* _rightSwipeRecognizer;
	UISwipeGestureRecognizer* _leftSwipeRecognizer;
	UISwipeGestureRecognizer* _upSwipeRecognizer;
	UIKeyboardSplitTransitionView* _transitionView;
	double _initialSplitProgress;
	double _finalSplitProgress;
	double _initialPinchSeparation;
	double _pinchSeparationValues[4];
	bool _pinchDetected;
	double _autoSplitLastUpdate;
	double _autoSplitElapsedTime;
	CADisplayLink* _displayLink;
	bool _ghostKeysEnabled;
	UIDelayedAction* _delayedCentroidUpdate;
	bool _isRebuilding;
	NSString* _layoutTag;
	bool _preRotateShift;
	NSString* _preRotateKeyplaneName;
	CGPoint _keyPeripheralInset;
	UIDelayedAction* _multitapAction;
	bool _unshiftAfterMultitap;
	int _multitapCount;
	UIKBTree* _multitapKey;
	UIView* _flickPopupView;
	NSMutableDictionary* _compositeImages;
	NSTimer* _flickPopuptimer;
	id _touchInfo;
	UIView* _dimKeyboardImageView;
	bool _keyboardImageViewIsDim;
	bool _isOutOfBounds;
	NSMutableSet* _keysUnderIndicator;
	int playKeyClickSoundOn;
	UIKBRenderConfig* _renderConfig;

}

@property (nonatomic,readonly) UIKBTree * keyboard;                          //@synthesize keyboard=_keyboard - In the implementation block
@property (nonatomic,readonly) UIKBTree * keyplane;                          //@synthesize keyplane=_keyplane - In the implementation block
@property (nonatomic,copy) NSString * keyboardName;                          //@synthesize keyboardName=_keyboardName - In the implementation block
@property (nonatomic,copy) NSString * keyplaneName;                          //@synthesize keyplaneName=_keyplaneName - In the implementation block
@property (nonatomic,readonly) NSString * localizedInputMode; 
@property (nonatomic,copy) NSString * localizedInputKey;                     //@synthesize localizedInputKey=_localizedInputKey - In the implementation block
@property (nonatomic,retain) UIKBTree * activeKey;                           //@synthesize activeKey=_activeKey - In the implementation block
@property (assign,nonatomic) bool shift;                                     //@synthesize shift=_shift - In the implementation block
@property (assign,nonatomic) bool autoShift;                                 //@synthesize autoshift=_autoshift - In the implementation block
@property (assign,nonatomic) bool didLongPress;                              //@synthesize didLongPress=_didLongPress - In the implementation block
@property (getter=isRotating,nonatomic,readonly) bool rotating; 
@property (nonatomic,readonly) bool showsInternationalKey;                   //@synthesize showIntlKey=_showIntlKey - In the implementation block
@property (nonatomic,readonly) bool showsDictationKey;                       //@synthesize showDictationKey=_showDictationKey - In the implementation block
@property (nonatomic,copy) NSString * preTouchKeyplaneName;                  //@synthesize preTouchKeyplaneName=_preTouchKeyplaneName - In the implementation block
@property (nonatomic,retain) UIKBRenderConfig * renderConfig;                //@synthesize renderConfig=_renderConfig - In the implementation block
@property (nonatomic,retain) NSString * layoutTag;                           //@synthesize layoutTag=_layoutTag - In the implementation block
@property (assign,nonatomic) int playKeyClickSoundOn; 
+(Class)_subclassForScreenTraits:(id)arg1 ;
+(CGSize)keyboardSizeForInputMode:(id)arg1 screenTraits:(id)arg2 ;
+(void)accessibilitySensitivityChanged;
+(id)keyboardFromFactoryWithName:(id)arg1 screen:(id)arg2 ;
+(id)keyboardWithName:(id)arg1 screenTraits:(id)arg2 ;
+(id)sharedRivenKeyplaneGenerator;
-(void)resizeForKeyplaneSize:(CGSize)arg1 ;
-(void)setDisableInteraction:(bool)arg1 ;
-(void)handleDismissFlickView:(id)arg1 ;
-(void)setKeyboardDim:(bool)arg1 ;
-(void)setKeyboardDim:(bool)arg1 amount:(double)arg2 withDuration:(double)arg3 ;
-(id)flickPopupStringForKey:(id)arg1 withString:(id)arg2 ;
-(void)handlePopupView:(id)arg1 ;
-(void)handleFlick:(id)arg1 ;
-(id)flickStringForInputKey:(id)arg1 direction:(int)arg2 ;
-(void)showPopupView:(int)arg1 withKey:(id)arg2 popupInfo:(id)arg3 force:(bool)arg4 ;
-(void)showFlickView:(int)arg1 withKey:(id)arg2 flickString:(id)arg3 ;
-(void)populateFlickPopupsForKey:(id)arg1 ;
-(void)activateCompositeKey:(id)arg1 direction:(int)arg2 flickString:(id)arg3 popupInfo:(id)arg4 ;
-(id)compositeImageForKey:(id)arg1 ;
-(void)setCompositeImage:(id)arg1 forKey:(id)arg2 ;
-(void)handlePopupView;
-(void)handleDismissFlickView;
-(id)getFlickCompositeImageForKey:(id)arg1 direction:(int)arg2 rect:(CGRect)arg3 ;
-(id)getPopupBackgroundImageForKey:(id)arg1 direction:(int)arg2 popupInfo:(id)arg3 rect:(CGRect)arg4 ;
-(id)overlayCharacterImageForKey:(id)arg1 direction:(int)arg2 rect:(CGRect)arg3 flickString:(id)arg4 popupInfo:(id)arg5 ;
-(id)keyWithRepresentedString:(id)arg1 ;
-(CGRect)frameForKeyWithRepresentedString:(id)arg1 ;
-(CGRect)frameForLastKeyWithRepresentedString:(id)arg1 ;
-(id)popupKeyViews;
-(void)setKeyForTouchInfo:(id)arg1 key:(id)arg2 ;
-(id)initWithFrame:(CGRect)arg1 ;
-(void)dealloc;
-(void)setShift:(bool)arg1 ;
-(void)removeFromSuperview;
-(bool)gestureRecognizerShouldBegin:(id)arg1 ;
-(bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2 ;
-(bool)isRotating;
-(double)lastTouchUpTimestamp;
-(id)scriptingInfoWithChildren;
-(void)willMoveToWindow:(id)arg1 ;
-(bool)pointInside:(CGPoint)arg1 forEvent:(GSEventRef)arg2 ;
-(void)setKeyboardAppearance:(long long)arg1 ;
-(void)logHandwritingData;
-(id)renderConfig;
-(void)setRenderConfig:(id)arg1 ;
-(id)candidateList;
-(void)clearUnusedObjects:(bool)arg1 ;
-(bool)hasCandidateKeys;
-(bool)hasAccentKey;
-(bool)canMultitap;
-(bool)isAlphabeticPlane;
-(void)deactivateActiveKeys;
-(CGRect)frameForKeylayoutName:(id)arg1 ;
-(CGSize)dragGestureSize;
-(bool)pinchDetected;
-(void)setSplitProgress:(double)arg1 ;
-(bool)pinchSplitGestureEnabled;
-(void)showSplitTransitionView:(bool)arg1 ;
-(bool)shouldShowIndicator;
-(id)activationIndicatorView;
-(void)setHideKeysUnderIndicator:(bool)arg1 ;
-(id)keyboard;
-(void)willRotate;
-(void)didRotate;
-(bool)performReturnAction;
-(id)currentKeyplane;
-(void)showKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3 ;
-(void)setAutoshift:(bool)arg1 ;
-(void)fadeWithInvocation:(id)arg1 ;
-(void)deleteHandwritingStrokesAtIndexes:(id)arg1 ;
-(bool)usesAutoShift;
-(void)didClearInput;
-(void)restoreDefaultsForAllKeys;
-(void)updateBackgroundCorners;
-(void)restoreDefaultsForKey:(id)arg1 ;
-(void)setTarget:(id)arg1 forKey:(id)arg2 ;
-(void)setAction:(SEL)arg1 forKey:(id)arg2 ;
-(void)setLongPressAction:(SEL)arg1 forKey:(id)arg2 ;
-(void)setLabel:(id)arg1 forKey:(id)arg2 ;
-(void)longPressAction;
-(bool)canProduceString:(id)arg1 ;
-(double)hitBuffer;
-(void)setReturnKeyEnabled:(bool)arg1 withDisplayName:(id)arg2 withType:(int)arg3 ;
-(bool)ignoresShiftState;
-(bool)isShiftKeyPlaneChooser;
-(bool)isShiftKeyBeingHeld;
-(void)updateLocalizedKeys:(bool)arg1 ;
-(void)setSplit:(bool)arg1 animated:(bool)arg2 ;
-(void)finishSplitTransitionWithProgress:(double)arg1 ;
-(id)keyplaneName;
-(id)keyboardName;
-(id)localizedInputMode;
-(void)updateKeyCentroids;
-(id)layoutTag;
-(void)setLayoutTag:(id)arg1 ;
-(void)setPasscodeOutlineAlpha:(double)arg1 ;
-(id)baseKeyForString:(id)arg1 ;
-(id)keyplaneForKey:(id)arg1 ;
-(id)keyplaneNamed:(id)arg1 ;
-(void)changeToKeyplane:(id)arg1 ;
-(id)simulateTouch:(CGPoint)arg1 ;
-(id)simulateTouchForCharacter:(id)arg1 errorVector:(CGPoint)arg2 shouldTypeVariants:(bool)arg3 baseKeyForVariants:(bool)arg4 ;
-(SEL)handlerForNotification:(id)arg1 ;
-(void)touchDown:(id)arg1 executionContext:(id)arg2 ;
-(void)touchDragged:(id)arg1 executionContext:(id)arg2 ;
-(void)touchUp:(id)arg1 executionContext:(id)arg2 ;
-(void)touchCancelled:(id)arg1 executionContext:(id)arg2 ;
-(bool)canForceTouchCommit:(id)arg1 ;
-(bool)performSpaceAction;
-(void)deactivateActiveKeysClearingTouchInfo:(bool)arg1 clearingDimming:(bool)arg2 ;
-(void)installGestureRecognizers;
-(CGImageRef)renderedImageWithToken:(id)arg1 ;
-(bool)showsInternationalKey;
-(bool)showsDictationKey;
-(id)keyplane;
-(void)refreshForDictationAvailablityDidChange;
-(void)uninstallGestureRecognizers;
-(void)cancelMultitapTimer;
-(void)accessibilitySensitivityChanged;
-(void)cancelDelayedCentroidUpdate;
-(void)clearAllTouchInfo;
-(void)setActiveKey:(id)arg1 ;
-(void)setPreTouchKeyplaneName:(id)arg1 ;
-(void)flushKeyCache:(id)arg1 ;
-(id)defaultNameForKeyplaneName:(id)arg1 ;
-(id)splitNameForKeyplaneName:(id)arg1 ;
-(CGRect)frameForKeylayoutName:(id)arg1 onKeyplaneName:(id)arg2 ;
-(int)visualStyleForKeyboardIfSplit:(bool)arg1 ;
-(void)updateBackgroundIfNeeded;
-(void)setLocalizedInputKey:(id)arg1 ;
-(void)setKeyplaneName:(id)arg1 ;
-(void)refreshForRivenPreferences;
-(int)displayTypeHintForShiftKey;
-(int)displayTypeHintForMoreKey;
-(void)setState:(int)arg1 forKey:(id)arg2 ;
-(void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)arg1 ;
-(void)updateLocalizedKeysOnKeyplane:(id)arg1 ;
-(CGImageRef)cachedCompositeImageWithCacheKey:(id)arg1 ;
-(CGImageRef)renderedImageWithStateFallbacksForToken:(id)arg1 ;
-(int)stateForKey:(id)arg1 ;
-(bool)shouldShowDictationKey;
-(bool)canReuseKeyplaneView;
-(id)splitNameForKeyplane:(id)arg1 ;
-(void)updateKeyboardForKeyplane:(id)arg1 ;
-(void)updateMoreAndInternationalKeys;
-(id)cacheTokenForKeyplane:(id)arg1 ;
-(id)cacheIdentifierForKeyplaneNamed:(id)arg1 ;
-(id)defaultKeyplaneForKeyplane:(id)arg1 ;
-(int)stateForShiftKey:(id)arg1 ;
-(int)stateForKeyplaneSwitchKey:(id)arg1 ;
-(int)stateForMultitapReverseKey:(id)arg1 ;
-(int)stateForDictationKey:(id)arg1 ;
-(void)updateLayoutTags;
-(void)updateGlobeKeyDisplayString;
-(void)rebuildSplitTransitionView;
-(void)updateTransitionWithFlags:(int)arg1 ;
-(void)setKeyboardName:(id)arg1 appearance:(long long)arg2 ;
-(id)initialKeyplaneNameWithKBStarName:(id)arg1 ;
-(bool)shouldHitTestKey:(id)arg1 ;
-(id)keyHitTestContainingPoint:(CGPoint)arg1 ;
-(id)keyHitTestClosestToPoint:(CGPoint)arg1 ;
-(id)keyHitTestWithoutCharging:(CGPoint)arg1 ;
-(id)keyHitTest:(CGPoint)arg1 ;
-(bool)shouldPreventInputManagerHitTestingForKey:(id)arg1 ;
-(int)keycodeForKey:(id)arg1 ;
-(id)activeKey;
-(bool)isLongPressedKey:(id)arg1 ;
-(bool)handwritingPlane;
-(id)multitapCompleteKeys;
-(void)multitapInterrupted;
-(void)multitapExpired;
-(void)handleMultitapTimerFired;
-(id)activeMultitapCompleteKey;
-(void)clearHandwritingStrokesIfNeededAndNotify:(bool)arg1 ;
-(unsigned)downActionFlagsForKey:(id)arg1 ;
-(void)showPopupVariantsForKey:(id)arg1 ;
-(id)touchForKey:(id)arg1 ;
-(void)showMenu:(id)arg1 forKey:(id)arg2 ;
-(id)_keyplaneVariantsKeyForString:(id)arg1 ;
-(void)prepareForSplitTransition;
-(void)setPlayKeyClickSoundOn:(int)arg1 ;
-(double)interpretPinchSeparationValues;
-(void)finishSplit;
-(void)finishSplitTransition;
-(void)_autoSplit:(id)arg1 ;
-(id)generateInfoForTouch:(id)arg1 ;
-(void)completeHitTestForTouchDown:(id)arg1 executionContext:(id)arg2 ;
-(void)performHitTestForTouchInfo:(id)arg1 touchStage:(int)arg2 hitKeyHandler:(/*^block*/ id)arg3 executionContext:(id)arg4 ;
-(void)clearInfoForTouch:(id)arg1 ;
-(void)touchDownWithKey:(id)arg1 atPoint:(CGPoint)arg2 executionContext:(id)arg3 ;
-(int)playKeyClickSoundOn;
-(bool)shouldSkipResponseToGlobeKey:(id)arg1 atPoint:(CGPoint)arg2 ;
-(void)hideMenu:(id)arg1 forKey:(id)arg2 ;
-(void)playKeyClickSound;
-(bool)shouldCommitPrecedingTouchesForTouchDownWithActions:(unsigned long long)arg1 ;
-(void)completeCommitTouchesPrecedingTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3 ;
-(id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 isPopupVariant:(bool)arg3 isMultitap:(bool)arg4 isFlick:(bool)arg5 ;
-(void)incrementPunctuationIfNeeded:(id)arg1 ;
-(void)completeSendStringActionForTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3 ;
-(id)preTouchKeyplaneName;
-(id)keyplaneNameForRevertAfterTouch;
-(void)downActionShiftWithKey:(id)arg1 ;
-(void)completeDeleteActionForTouchDownWithActions:(unsigned long long)arg1 executionContext:(id)arg2 ;
-(id)infoForTouch:(id)arg1 ;
-(void)interpretTouchesForSplit;
-(bool)touchPassesDragThreshold:(id)arg1 ;
-(void)completeHitTestForTouchDragged:(id)arg1 hitKey:(id)arg2 ;
-(unsigned)upActionFlagsForKey:(id)arg1 ;
-(void)refreshGhostKeyState;
-(bool)shouldRetestKey:(id)arg1 withKeyplane:(id)arg2 ;
-(id)activeTouchForInteraction:(int)arg1 ;
-(void)completeRetestForTouchUp:(id)arg1 timestamp:(double)arg2 interval:(double)arg3 executionContext:(id)arg4 ;
-(bool)shouldSendTouchUpToInputManager:(id)arg1 ;
-(void)touchMultitapTimer;
-(bool)shouldSendStringForFlick:(id)arg1 ;
-(void)completeSendStringActionForTouchUp:(id)arg1 withActions:(long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(bool)arg5 prevActions:(long long)arg6 executionContext:(id)arg7 ;
-(void)continueFromInternationalActionForTouchUp:(id)arg1 withActions:(long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(bool)arg5 prevActions:(long long)arg6 executionContext:(id)arg7 ;
-(void)fadeMenu:(id)arg1 forKey:(id)arg2 ;
-(void)upActionShift;
-(void)fadeMenu:(id)arg1 forKey:(id)arg2 withDelay:(double)arg3 ;
-(void)handleKeyboardMenusForTouch:(id)arg1 ;
-(void)updateShiftKeyState;
-(void)swipeDetected:(id)arg1 ;
-(void)cancelTouchIfNecessaryForInfo:(id)arg1 ;
-(bool)keyHasAccentedVariants:(id)arg1 ;
-(CGPoint)applyError:(CGPoint)arg1 toKey:(id)arg2 ;
-(CGImageRef)renderedKeyplaneWithToken:(id)arg1 split:(bool)arg2 ;
-(void)handleDelayedCentroidUpdate;
-(id)currentKeyplaneView;
-(void)setKeyboardName:(id)arg1 ;
-(bool)shift;
-(bool)autoShift;
-(void)setAutoShift:(bool)arg1 ;
-(bool)didLongPress;
-(void)setDidLongPress:(bool)arg1 ;
-(id)localizedInputKey;
@end

