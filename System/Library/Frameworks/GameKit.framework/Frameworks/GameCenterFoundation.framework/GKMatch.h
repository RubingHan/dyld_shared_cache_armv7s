/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:59:32 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/GameKit.framework/Frameworks/GameCenterFoundation.framework/GameCenterFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <GameKitServices/GKSessionDelegate.h>
#import <GameCenterFoundation/GKSessionPrivateDelegate.h>

@protocol GKMatchDelegate;
@class GKSession, GKConnection, NSMutableDictionary, NSMutableArray, NSData, NSString, NSDictionary, NSArray;

@interface GKMatch : NSObject <GKSessionDelegate, GKSessionPrivateDelegate> {

	unsigned char _version;
	bool _needHostScore;
	bool _hostScoreForQuery;
	unsigned _packetSequenceNumber;
	<GKMatchDelegate>* _delegateWeak;
	GKSession* _session;
	GKConnection* _connection;
	unsigned long long _expectedPlayerCount;
	NSMutableDictionary* _playerEventQueues;
	NSMutableArray* _reinvitedPlayers;
	NSData* _selfBlob;
	<GKMatchDelegate>* _inviteDelegateWeak;
	NSMutableDictionary* _playerPushTokens;
	NSMutableArray* _opponentIDs;
	NSString* _rematchID;
	long long _rematchCount;
	NSDictionary* _networkStatistics;
	NSMutableDictionary* _hostScores;
	/*^block*/ id _chooseHostCompletion;

}

@property (nonatomic,readonly) NSArray * playerIDs; 
@property (assign,nonatomic) <GKMatchDelegate> * delegate;                          //@synthesize delegateWeak=_delegateWeak - In the implementation block
@property (nonatomic,readonly) unsigned long long expectedPlayerCount;              //@synthesize expectedPlayerCount=_expectedPlayerCount - In the implementation block
@property (nonatomic,retain) GKSession * session;                                   //@synthesize session=_session - In the implementation block
@property (nonatomic,retain) GKConnection * connection;                             //@synthesize connection=_connection - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * playerEventQueues;               //@synthesize playerEventQueues=_playerEventQueues - In the implementation block
@property (nonatomic,retain) NSMutableArray * reinvitedPlayers;                     //@synthesize reinvitedPlayers=_reinvitedPlayers - In the implementation block
@property (nonatomic,retain) NSData * selfBlob;                                     //@synthesize selfBlob=_selfBlob - In the implementation block
@property (assign,nonatomic) unsigned char version;                                 //@synthesize version=_version - In the implementation block
@property (assign,nonatomic) <GKMatchDelegate> * inviteDelegate;                    //@synthesize inviteDelegateWeak=_inviteDelegateWeak - In the implementation block
@property (assign,nonatomic) unsigned packetSequenceNumber;                         //@synthesize packetSequenceNumber=_packetSequenceNumber - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * playerPushTokens;                //@synthesize playerPushTokens=_playerPushTokens - In the implementation block
@property (nonatomic,retain) NSMutableArray * opponentIDs;                          //@synthesize opponentIDs=_opponentIDs - In the implementation block
@property (nonatomic,retain) NSString * rematchID;                                  //@synthesize rematchID=_rematchID - In the implementation block
@property (assign,nonatomic) long long rematchCount;                                //@synthesize rematchCount=_rematchCount - In the implementation block
@property (nonatomic,retain) NSDictionary * networkStatistics;                      //@synthesize networkStatistics=_networkStatistics - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * hostScores;                      //@synthesize hostScores=_hostScores - In the implementation block
@property (assign,nonatomic) bool needHostScore;                                    //@synthesize needHostScore=_needHostScore - In the implementation block
@property (assign,nonatomic) bool hostScoreForQuery;                                //@synthesize hostScoreForQuery=_hostScoreForQuery - In the implementation block
@property (nonatomic,copy) id chooseHostCompletion;                                 //@synthesize chooseHostCompletion=_chooseHostCompletion - In the implementation block
-(id)session;
-(void)setSession:(id)arg1 ;
-(unsigned)packetSequenceNumber;
-(id)reinvitedPlayers;
-(void)sendStateCallbackForPlayer:(id)arg1 state:(long long)arg2 ;
-(void)sendQueuedPacketsForPlayer:(id)arg1 ;
-(void)setPlayerPushTokens:(id)arg1 ;
-(void)setOpponentIDs:(id)arg1 ;
-(void)relayPushNotification:(id)arg1 ;
-(void)localPlayerDidChange:(id)arg1 ;
-(void)setSelfBlob:(id)arg1 ;
-(void)setRematchID:(id)arg1 ;
-(void)setRematchCount:(long long)arg1 ;
-(void)sendVersionData:(unsigned char)arg1 ;
-(id)selfBlob;
-(id)nearbyConnectionData;
-(void)setPacketSequenceNumber:(unsigned)arg1 ;
-(id)packet:(unsigned char)arg1 data:(id)arg2 ;
-(id)peerFromPlayer:(id)arg1 ;
-(void)updateRematchID;
-(void)updateStateForPlayer:(id)arg1 state:(long long)arg2 ;
-(void)connectToPeersWithDictionaries:(id)arg1 version:(unsigned char)arg2 sessionToken:(id)arg3 cdxTicket:(id)arg4 ;
-(void)relayPush:(id)arg1 ;
-(void)reinviteeAcceptedNotification:(id)arg1 ;
-(void)reinviteeDeclinedNotification:(id)arg1 ;
-(void)setHostScores:(id)arg1 ;
-(void)setChooseHostCompletion:(/*^block*/ id)arg1 ;
-(void)calculateHostScore;
-(bool)selectHostIfRequestedAndAllScored;
-(void)setHostScoreForQuery:(bool)arg1 ;
-(void)sendHostScoreAsQuery:(bool)arg1 ;
-(void)addHostScore:(int)arg1 forPlayer:(id)arg2 ;
-(bool)haveAllHostScores;
-(void)setNeedHostScore:(bool)arg1 ;
-(id)playerFromPeer:(id)arg1 ;
-(void)sendVersionData:(unsigned char)arg1 toPeer:(id)arg2 ;
-(id)inviteDelegate;
-(id)allIDs;
-(void)conditionallyRelaunchPlayer:(id)arg1 ;
-(void)conditionallyReinvitePlayer:(id)arg1 sessionToken:(id)arg2 ;
-(void)deferStateCallbackForPlayer:(id)arg1 state:(long long)arg2 ;
-(void)receivedChooseHostData:(id)arg1 fromPlayer:(id)arg2 ;
-(void)sendData:(id)arg1 fromPlayer:(id)arg2 ;
-(void)queueData:(id)arg1 forPlayer:(id)arg2 ;
-(void)setNetworkStatistics:(id)arg1 ;
-(id)dataFromBase64String:(id)arg1 ;
-(bool)shouldStartRelay:(id)arg1 ;
-(void)initRelayInfoFromPush:(id)arg1 forPlayer:(id)arg2 ;
-(void)initRelayConnectionForPlayer:(id)arg1 ;
-(void)updateRelayInfo:(id)arg1 forPlayer:(id)arg2 ;
-(void)updateRelayConnectionForPlayer:(id)arg1 ;
-(void)initRelayResponse:(id)arg1 playerID:(id)arg2 ;
-(void)initRelayInfoFromServerResponse:(id)arg1 forPlayer:(id)arg2 ;
-(void)requestRelayInitForPlayer:(id)arg1 ;
-(void)initRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2 ;
-(void)updateRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2 ;
-(void)requestRelayUpdateForPlayer:(id)arg1 ;
-(void)preLoadInviter:(id)arg1 sessionToken:(id)arg2 ;
-(void)connectToNearbyPlayer:(id)arg1 withConnectionData:(id)arg2 ;
-(void)inviteeComboMatched:(long long)arg1 ;
-(bool)sendData:(id)arg1 toPlayers:(id)arg2 withDataMode:(long long)arg3 error:(id*)arg4 ;
-(bool)sendDataToAllPlayers:(id)arg1 withDataMode:(long long)arg2 error:(id*)arg3 ;
-(id)voiceChatWithName:(id)arg1 ;
-(void)rematchWithCompletionHandler:(/*^block*/ id)arg1 ;
-(void)chooseBestHostPlayerWithCompletionHandler:(/*^block*/ id)arg1 ;
-(void)acceptRelayResponse:(id)arg1 playerID:(id)arg2 ;
-(void)preemptRelay:(id)arg1 ;
-(void)session:(id)arg1 updateRelay:(id)arg2 forPeer:(id)arg3 ;
-(id)playerEventQueues;
-(void)setPlayerEventQueues:(id)arg1 ;
-(void)setReinvitedPlayers:(id)arg1 ;
-(id)playerPushTokens;
-(id)opponentIDs;
-(id)rematchID;
-(long long)rematchCount;
-(id)hostScores;
-(bool)needHostScore;
-(bool)hostScoreForQuery;
-(/*^block*/ id)chooseHostCompletion;
-(id)playerIDs;
-(void)setInviteDelegate:(id)arg1 ;
-(bool)sendInviteData:(id)arg1 error:(id*)arg2 ;
-(unsigned long long)expectedPlayerCount;
-(void)dealloc;
-(void)setDelegate:(id)arg1 ;
-(id)init;
-(id)description;
-(id)delegate;
-(void)setVersion:(unsigned char)arg1 ;
-(unsigned char)version;
-(id)connection;
-(void)disconnect;
-(bool)connected:(id)arg1 ;
-(void)setConnection:(id)arg1 ;
-(void)getLocalConnectionDataWithCompletionHandler:(/*^block*/ id)arg1 ;
-(id)networkStatistics;
-(void)session:(id)arg1 didFailWithError:(id)arg2 ;
-(void)session:(id)arg1 peer:(id)arg2 didChangeState:(int)arg3 ;
-(void)receiveData:(id)arg1 fromPeer:(id)arg2 inSession:(id)arg3 context:(void*)arg4 ;
-(void)session:(id)arg1 connectionWithPeerFailed:(id)arg2 withError:(id)arg3 ;
-(void)session:(id)arg1 initiateRelay:(id)arg2 forPeer:(id)arg3 ;
-(void)session:(id)arg1 networkStatisticsChanged:(id)arg2 ;
@end

