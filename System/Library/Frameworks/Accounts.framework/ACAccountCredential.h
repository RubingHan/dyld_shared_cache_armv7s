/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:58:59 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/Accounts.framework/Accounts
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <CoreFoundation/NSSecureCoding.h>

@class NSMutableDictionary, NSString, NSMutableSet, ACAccount, NSSet, NSDate;

@interface ACAccountCredential : NSObject <NSSecureCoding> {

	NSMutableDictionary* _credentialItems;
	NSString* _credentialType;
	NSMutableSet* _dirtyProperties;
	ACAccount* _owningAccount;
	bool _dirty;
	bool _empty;

}

@property (nonatomic,copy) NSString * oauthToken; 
@property (nonatomic,copy) NSString * token; 
@property (nonatomic,copy) NSString * oauthTokenSecret; 
@property (nonatomic,copy) NSString * password; 
@property (nonatomic,copy) NSString * credentialType; 
@property (nonatomic,readonly) NSSet * dirtyProperties;               //@synthesize dirtyProperties=_dirtyProperties - In the implementation block
@property (assign,getter=isDirty,nonatomic) bool dirty;               //@synthesize dirty=_dirty - In the implementation block
@property (assign,getter=isEmpty,nonatomic) bool empty;               //@synthesize empty=_empty - In the implementation block
@property (nonatomic,copy) NSString * oauthRefreshToken; 
@property (nonatomic,retain) NSDate * expiryDate; 
@property (nonatomic,copy) NSString * findMyiPhoneToken; 
@property (nonatomic,copy) NSString * mapsToken; 
@property (nonatomic,copy) NSString * hsaToken; 
+(id)credentialWithOAuthToken:(id)arg1 tokenSecret:(id)arg2 ;
+(bool)supportsSecureCoding;
+(id)supportedKeysForAccountTypeIdentifier:(id)arg1 credentialType:(id)arg2 ;
+(id)nonPersistentKeysForAccountTypeIdentifier:(id)arg1 credentialType:(id)arg2 ;
+(id)credentialWithPassword:(id)arg1 ;
-(void)_clearDirtyProperties;
-(void)_setOwningAccount:(id)arg1 ;
-(void)_markPropertyDirty:(id)arg1 ;
-(id)credentialItems;
-(void)setOauthRefreshToken:(id)arg1 ;
-(void)setExpiryDate:(id)arg1 ;
-(id)initWithOAuthToken:(id)arg1 tokenSecret:(id)arg2 ;
-(id)initWithOAuth2Token:(id)arg1 refreshToken:(id)arg2 expiryDate:(id)arg3 ;
-(id)findMyiPhoneToken;
-(void)setFindMyiPhoneToken:(id)arg1 ;
-(void)setMapsToken:(id)arg1 ;
-(id)hsaToken;
-(void)setHsaToken:(id)arg1 ;
-(void)setEmpty:(bool)arg1 ;
-(id)password;
-(id)dirtyProperties;
-(void)setPassword:(id)arg1 ;
-(id)credentialType;
-(id)oauthRefreshToken;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(id)init;
-(bool)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(bool)isEmpty;
-(void).cxx_destruct;
-(id)keysForCredentialItems;
-(void)setOauthToken:(id)arg1 ;
-(id)oauthTokenSecret;
-(void)setOauthTokenSecret:(id)arg1 ;
-(id)mapsToken;
-(id)expiryDate;
-(id)credentialItemForKey:(id)arg1 ;
-(void)setCredentialItem:(id)arg1 forKey:(id)arg2 ;
-(id)initWithPassword:(id)arg1 ;
-(void)setCredentialType:(id)arg1 ;
-(id)token;
-(void)setToken:(id)arg1 ;
-(bool)isDirty;
-(id)oauthToken;
-(void)setDirty:(bool)arg1 ;
@end

