/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 9:59:16 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <CoreMotion/CoreMotion-Structs.h>
@class CMAccelerometerData, CMGyroData, CMMagnetometerData, CMDeviceMotion;

@interface CMMotionManager : NSObject {

	id _internal;

}

@property (assign,nonatomic,@dynamic) double accelerometerUpdateInterval; 
@property (getter=isAccelerometerAvailable,nonatomic,@dynamic,readonly) bool accelerometerAvailable; 
@property (getter=isAccelerometerActive,nonatomic,@dynamic,readonly) bool accelerometerActive; 
@property (@dynamic,readonly) CMAccelerometerData * accelerometerData; 
@property (assign,nonatomic,@dynamic) double gyroUpdateInterval; 
@property (getter=isGyroAvailable,nonatomic,@dynamic,readonly) bool gyroAvailable; 
@property (getter=isGyroActive,nonatomic,@dynamic,readonly) bool gyroActive; 
@property (@dynamic,readonly) CMGyroData * gyroData; 
@property (assign,nonatomic) double magnetometerUpdateInterval; 
@property (getter=isMagnetometerAvailable,nonatomic,readonly) bool magnetometerAvailable; 
@property (getter=isMagnetometerActive,nonatomic,readonly) bool magnetometerActive; 
@property (readonly) CMMagnetometerData * magnetometerData; 
@property (assign,nonatomic,@dynamic) double deviceMotionUpdateInterval; 
@property (nonatomic,@dynamic,readonly) int attitudeReferenceFrame; 
@property (getter=isDeviceMotionAvailable,nonatomic,@dynamic,readonly) bool deviceMotionAvailable; 
@property (getter=isDeviceMotionActive,nonatomic,@dynamic,readonly) bool deviceMotionActive; 
@property (@dynamic,readonly) CMDeviceMotion * deviceMotion; 
@property (assign,nonatomic) bool showsDeviceMovementDisplay; 
+(void)dummySelector:(id)arg1 ;
+(unsigned long long)availableAttitudeReferenceFrames;
+(void)setAllowInBackground:(bool)arg1 ;
+(bool)supportsGyroMiniCalibration;
+(bool)startGyroMiniCalibration;
+(bool)configureM7Activity:(bool)arg1 stepCounting:(bool)arg2 activityForceCodeTransition:(bool)arg3 stepCountingForceCodeTransition:(bool)arg4 threshold:(bool)arg5 impulse:(bool)arg6 onBodyDetection:(bool)arg7 ;
+(void)initialize;
-(void)onAccelerometer:(const Sample*)arg1 ;
-(void)onGyro:(const Sample*)arg1 ;
-(void)onMagnetometer:(const Sample*)arg1 ;
-(void)onDeviceMotion:(const Sample*)arg1 ;
-(void)onGeomagneticModel:(const SCD_Struct_CM13*)arg1 ;
-(id)initPrivate;
-(void)willResignActive:(id)arg1 ;
-(void)didBecomeActive:(id)arg1 ;
-(void)deallocPrivate;
-(void)stopAccelerometerUpdatesPrivate;
-(void)stopGyroUpdatesPrivate;
-(void)stopDeviceMotionUpdatesPrivate;
-(void)stopMagnetometerUpdatesPrivate;
-(void)setAccelerometerUpdateIntervalPrivate:(double)arg1 ;
-(void)startAccelerometerUpdatesPrivateToQueue:(id)arg1 withHandler:(/*^block*/ id)arg2 ;
-(void)setGyroUpdateIntervalPrivate:(double)arg1 ;
-(void)startGyroUpdatesPrivateToQueue:(id)arg1 withHandler:(/*^block*/ id)arg2 ;
-(bool)isGyroAvailable;
-(void)setDeviceMotionUpdateIntervalPrivate:(double)arg1 ;
-(int)attitudeReferenceFrame;
-(void)startDeviceMotionUpdatesPrivateUsingReferenceFrame:(int)arg1 toQueue:(id)arg2 withHandler:(/*^block*/ id)arg3 ;
-(bool)isDeviceMotionActive;
-(void)dismissDeviceMovementDisplay;
-(void)setMagnetometerUpdateIntervalPrivate:(double)arg1 ;
-(void)startMagnetometerUpdatesPrivateToQueue:(id)arg1 withHandler:(/*^block*/ id)arg2 ;
-(bool)isMagnetometerAvailable;
-(void)setShowsDeviceMovementDisplayPrivate:(bool)arg1 ;
-(void)setAccelerometerDataCallback:(/*function pointer*/ void*)arg1 info:(void*)arg2 interval:(double)arg3 ;
-(void)setGyroDataCallback:(/*function pointer*/ void*)arg1 info:(void*)arg2 interval:(double)arg3 ;
-(bool)showsDeviceMovementDisplay;
-(void)showDeviceMovementDisplay;
-(void)willResignActivePrivate:(id)arg1 ;
-(void)didBecomeActivePrivate:(id)arg1 ;
-(void)setUseAccelerometer:(bool)arg1 ;
-(bool)useAccelerometer;
-(bool)isAccelerometerActive;
-(double)accelerometerUpdateInterval;
-(bool)isGyroActive;
-(void)setGyroUpdateInterval:(double)arg1 ;
-(double)gyroUpdateInterval;
-(id)gyroData;
-(void)startGyroUpdates;
-(void)startGyroUpdatesToQueue:(id)arg1 withHandler:(/*^block*/ id)arg2 ;
-(void)stopGyroUpdates;
-(void)startDeviceMotionUpdatesToQueue:(id)arg1 withHandler:(/*^block*/ id)arg2 ;
-(void)startDeviceMotionUpdatesUsingReferenceFrame:(int)arg1 ;
-(void)startDeviceMotionUpdatesUsingReferenceFrame:(int)arg1 toQueue:(id)arg2 withHandler:(/*^block*/ id)arg3 ;
-(void)rebuildGytt;
-(int)gyttNumTemperatures;
-(bool)isMagnetometerActive;
-(void)setMagnetometerUpdateInterval:(double)arg1 ;
-(double)magnetometerUpdateInterval;
-(id)magnetometerData;
-(void)startMagnetometerUpdates;
-(void)startMagnetometerUpdatesToQueue:(id)arg1 withHandler:(/*^block*/ id)arg2 ;
-(void)stopMagnetometerUpdates;
-(void)setShowsDeviceMovementDisplay:(bool)arg1 ;
-(id)initUsing6AxisSensorFusion;
-(long long)gyroStartupLatency;
-(bool)isAccelerometerAvailable;
-(void)startAccelerometerUpdatesToQueue:(id)arg1 withHandler:(/*^block*/ id)arg2 ;
-(void)dealloc;
-(id)init;
-(id)initUsingGyroOnlySensorFusion;
-(void)setSensorThrottleTime:(double)arg1 ;
-(void)setSensorTurnOffTime:(double)arg1 ;
-(void)setMaxAccelerationVarianceForStability:(float)arg1 ;
-(void)setWantsPowerConservativeDeviceMotion:(bool)arg1 ;
-(void)setDeviceMotionUpdateInterval:(double)arg1 ;
-(void)setDeviceMotionCallback:(/*function pointer*/ void*)arg1 info:(void*)arg2 interval:(double)arg3 fsync:(bool)arg4 ;
-(bool)isDeviceMotionAvailable;
-(void)setNotificationCallback:(/*function pointer*/ void*)arg1 info:(void*)arg2 ;
-(double)deviceMotionUpdateInterval;
-(id)deviceMotion;
-(void)stopDeviceMotionUpdates;
-(void)stopAccelerometerUpdates;
-(void)setAccelerometerUpdateInterval:(double)arg1 ;
-(void)startDeviceMotionUpdates;
-(void)startAccelerometerUpdates;
-(id)accelerometerData;
@end

