/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:01:31 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/Message.framework/Message
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol MFSASLSecurityLayer;
#import <Message/Message-Structs.h>
@class _MFSocket, NSData, NSMutableString, NSArray, NSString;

@interface MFConnection : NSObject {

	<MFSASLSecurityLayer>* _securityLayer;
	_MFSocket* _socket;
	double _lastUsedTime;
	char* _buffer;
	long long _bufferRemainingBytes;
	unsigned long long _bufferStart;
	unsigned long long _bufferLength;
	unsigned long long _desiredBufferLength;
	z_stream_s* _deflater;
	z_stream_s* _inflater;
	char* _zbuffer;
	NSData* _logData;
	unsigned _dontLogReads;
	unsigned _readBytesNotLogged;
	NSMutableString* _readBytesToLog;
	unsigned _isFetching : 1;
	unsigned _allowFallbacks : 1;
	unsigned _compressionEnabled : 1;
	unsigned long long _bytesWritten;
	unsigned long long _bytesRead;

}

@property (assign,nonatomic) bool isFetching; 
@property (nonatomic,readonly) double lastUsedTime; 
@property (nonatomic,readonly) NSArray * capabilities; 
@property (nonatomic,readonly) NSArray * authenticationMechanisms; 
@property (nonatomic,readonly) NSString * securityProtocol; 
@property (nonatomic,readonly) bool isValid; 
@property (nonatomic,readonly) bool hasBytesAvailable; 
@property (nonatomic,readonly) bool isCellularConnection; 
@property (nonatomic,readonly) bool loginDisabled; 
@property (nonatomic,readonly) bool usesOpportunisticSockets; 
@property (nonatomic,readonly) unsigned long long bytesWritten;                 //@synthesize bytesWritten=_bytesWritten - In the implementation block
@property (nonatomic,readonly) unsigned long long bytesRead;                    //@synthesize bytesRead=_bytesRead - In the implementation block
+(void)initialize;
+(bool)shouldTryFallbacksAfterError:(id)arg1 ;
+(void)readLoggingDefaults;
+(void)logBytes:(const char*)arg1 length:(int)arg2 ;
+(void)flushLog;
+(id)logClasses;
+(void)setLogClasses:(id)arg1 ;
+(bool)logAllSocketActivity;
+(void)setLogAllSocketActivity:(bool)arg1 ;
+(id)logActivityOnPorts;
+(void)setLogActivityOnPorts:(id)arg1 ;
+(id)logActivityOnHosts;
+(void)setLogActivityOnHosts:(id)arg1 ;
-(bool)hasBytesAvailable;
-(void)dealloc;
-(id)description;
-(bool)isValid;
-(void)disconnect;
-(bool)connectUsingFallbacksForAccount:(id)arg1 ;
-(bool)authenticateUsingAccount:(id)arg1 ;
-(unsigned long long)bytesWritten;
-(id)securityProtocol;
-(bool)writeData:(id)arg1 dontLogBytesInRange:(NSRange)arg2 ;
-(bool)writeBytes:(const char*)arg1 length:(unsigned long long)arg2 dontLogBytesInRange:(NSRange)arg3 ;
-(bool)readLineIntoData:(id)arg1 ;
-(bool)connectUsingAccount:(id)arg1 ;
-(id)authenticationMechanisms;
-(bool)authenticateUsingAccount:(id)arg1 authenticator:(id)arg2 ;
-(bool)loginDisabled;
-(void)setAllowsFallbacks:(bool)arg1 ;
-(void)enableThroughputMonitoring:(bool)arg1 ;
-(void)enableExcessiveKeepaliveDetection:(bool)arg1 ;
-(bool)usesOpportunisticSockets;
-(void)_setupNetworkLogging;
-(bool)connectUsingSettings:(id)arg1 ;
-(id)capabilities;
-(bool)isFetching;
-(void)setIsFetching:(bool)arg1 ;
-(void)setDesiredReadBufferLength:(unsigned long long)arg1 ;
-(void)enableReadLogging:(bool)arg1 ;
-(void)logReadChars:(const char*)arg1 length:(unsigned long long)arg2 ;
-(bool)readBytesIntoData:(id)arg1 desiredLength:(unsigned long long)arg2 ;
-(bool)startTLSForAccount:(id)arg1 ;
-(bool)startCompression;
-(unsigned long long)bytesRead;
-(double)lastUsedTime;
-(bool)isCellularConnection;
-(bool)writeData:(id)arg1 ;
@end

