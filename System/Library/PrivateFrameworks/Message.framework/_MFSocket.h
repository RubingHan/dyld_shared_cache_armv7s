/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:01:31 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/Message.framework/Message
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <Message/Message-Structs.h>
@class NSCondition, MFStream, NSString, NSInvocation, NSArray, NSData;

@interface _MFSocket : NSObject {

	NSCondition* _condition;
	MFStream* _stream;
	NSString* _protocol;
	NSString* _host;
	NSString* _service;
	CFStringRef _connectionServiceType;
	NSInvocation* _eventHandler;
	NSArray* _clientCertificates;
	int _lowThroughputCounter;
	int _numTimeoutSecs;
	bool _allowsTrustPrompt;
	bool _usesOpportunisticSockets;
	bool _socketCanRead;
	bool _socketCanWrite;
	NSString* _sourceApplicationBundleIdentifier;
	NSString* _accountIdentifier;

}

@property (assign,nonatomic) int timeout;                                             //@synthesize numTimeoutSecs=_numTimeoutSecs - In the implementation block
@property (assign,nonatomic) bool allowsTrustPrompt;                                  //@synthesize allowsTrustPrompt=_allowsTrustPrompt - In the implementation block
@property (assign,nonatomic) bool usesOpportunisticSockets;                           //@synthesize usesOpportunisticSockets=_usesOpportunisticSockets - In the implementation block
@property (nonatomic,retain) NSArray * clientCertificates;                            //@synthesize clientCertificates=_clientCertificates - In the implementation block
@property (nonatomic,copy) NSString * sourceApplicationBundleIdentifier;              //@synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier - In the implementation block
@property (nonatomic,copy) NSString * accountIdentifier;                              //@synthesize accountIdentifier=_accountIdentifier - In the implementation block
@property (nonatomic,readonly) NSArray * serverCertificates; 
@property (nonatomic,readonly) NSString * remoteHostname; 
@property (nonatomic,readonly) unsigned remotePortNumber; 
@property (nonatomic,readonly) NSData * sourceIPAddress; 
@property (nonatomic,readonly) bool isReadable; 
@property (nonatomic,readonly) bool isWritable; 
@property (nonatomic,readonly) bool isCellularConnection; 
@property (nonatomic,readonly) bool isValid; 
-(void)setTimeout:(int)arg1 ;
-(int)timeout;
-(void)setAccountIdentifier:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(bool)isValid;
-(id)clientCertificates;
-(void)setClientCertificates:(id)arg1 ;
-(void)setConnectionServiceType:(CFStringRef)arg1 ;
-(bool)allowsTrustPrompt;
-(void)setAllowsTrustPrompt:(bool)arg1 ;
-(id)sourceApplicationBundleIdentifier;
-(void)setSourceApplicationBundleIdentifier:(id)arg1 ;
-(id)securityProtocol;
-(bool)setSecurityProtocol:(id)arg1 ;
-(id)remoteHostname;
-(bool)isWritable;
-(id)sourceIPAddress;
-(void)enableThroughputMonitoring:(bool)arg1 ;
-(void)enableExcessiveKeepaliveDetection:(bool)arg1 ;
-(bool)_startSSLHandshakeWithProtocol:(id)arg1 disableSSL2:(bool)arg2 errorPtr:(id*)arg3 ;
-(unsigned)_bufferedByteCount;
-(id)serverCertificates;
-(bool)connectToHost:(id)arg1 withPort:(unsigned)arg2 service:(id)arg3 ;
-(long long)writeBytes:(const char*)arg1 length:(unsigned long long)arg2 ;
-(long long)readBytes:(char*)arg1 length:(unsigned long long)arg2 ;
-(void)setEventHandler:(id)arg1 ;
-(unsigned)remotePortNumber;
-(bool)usesOpportunisticSockets;
-(void)setUsesOpportunisticSockets:(bool)arg1 ;
-(id)accountIdentifier;
-(void)abort;
-(bool)isReadable;
-(bool)isCellularConnection;
@end

