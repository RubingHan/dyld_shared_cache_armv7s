/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:03:14 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKDrawStyle.h>

@class NSMutableArray;

@interface VKLabelDrawStyle : VKDrawStyle {

	VKProfileSparseRamp<bool>* visibility;
	VKProfileSparseRamp<bool>* shieldVisibility;
	VKProfileSparseRamp<float>* heightSmall;
	VKProfileSparseRamp<float>* heightMedium;
	VKProfileSparseRamp<float>* heightLarge;
	VKProfileSparseRamp<float>* heightXLarge;
	VKProfileSparseRamp<float>* heightXXLarge;
	VKProfileSparseRamp<bool>* hasHeightCurveSmall;
	VKProfileSparseRamp<bool>* hasHeightCurveMedium;
	VKProfileSparseRamp<bool>* hasHeightCurveLarge;
	VKProfileSparseRamp<bool>* hasHeightCurveXLarge;
	VKProfileSparseRamp<bool>* hasHeightCurveXXLarge;
	VKProfileSparseRamp<float>* fontExpansionSmall;
	VKProfileSparseRamp<float>* fontExpansionMedium;
	VKProfileSparseRamp<float>* fontExpansionLarge;
	VKProfileSparseRamp<float>* fontExpansionXLarge;
	VKProfileSparseRamp<float>* fontExpansionXXLarge;
	VKProfileSparseRamp<_VGLColor>* color;
	VKProfileSparseRamp<_VGLColor>* haloColor;
	VKProfileSparseRamp<float>* haloSizeSmall;
	VKProfileSparseRamp<float>* haloSizeMedium;
	VKProfileSparseRamp<float>* haloSizeLarge;
	VKProfileSparseRamp<float>* haloSizeXLarge;
	VKProfileSparseRamp<float>* haloSizeXXLarge;
	VKProfileSparseRamp<unsigned int>* lineWrapping;
	VKProfileSparseRamp<bool>* upcase;
	VKProfileSparseRamp<bool>* raisedInitial;
	VKProfileSparseRamp<bool>* smallCaps;
	VKProfileSparseRamp<int>* zIndices;
	VKProfileSparseRamp<float>* roadRank;
	VKProfileSparseRamp<float>* shieldRank;
	VKProfileSparseRamp<bool>* arrowVisible;
	VKProfileSparseRamp<float>* arrowHeightSmall;
	VKProfileSparseRamp<float>* arrowHeightMedium;
	VKProfileSparseRamp<float>* arrowHeightLarge;
	VKProfileSparseRamp<float>* arrowHeightXLarge;
	VKProfileSparseRamp<float>* arrowHeightXXLarge;
	VKProfileSparseRamp<float>* arrowSpacing;
	VKProfileSparseRamp<int>* layer;
	VKProfileSparseRamp<int>* arrowLayer;
	VKProfileSparseRamp<VKLabelTextVisibility>* textVisibility;
	VKProfileSparseRamp<bool>* onlyShowIfTappable;
	VKProfileSparseRamp<bool>* yieldsToOnscreenLabels;
	VKProfileSparseRamp<bool>* showShieldTextAsLabel;
	unsigned char dedupeRank;
	VKProfileSparseRamp<float>* spacingSmall;
	VKProfileSparseRamp<float>* spacingMedium;
	VKProfileSparseRamp<float>* spacingLarge;
	VKProfileSparseRamp<float>* spacingXLarge;
	VKProfileSparseRamp<float>* spacingXXLarge;
	VKProfileSparseRamp<float>* offsetSmall;
	VKProfileSparseRamp<float>* offsetMedium;
	VKProfileSparseRamp<float>* offsetLarge;
	VKProfileSparseRamp<float>* offsetXLarge;
	VKProfileSparseRamp<float>* offsetXXLarge;
	VKProfileSparseRamp<long>* iconStyle;
	VKProfileSparseRamp<_VGLColor>* iconBadgeColor;
	VKProfileSparseRamp<_VGLColor>* iconBadgeLightColor;
	VKProfileSparseRamp<VKBlendMode>* iconBadgeLightBlendMode;
	VKProfileSparseRamp<float>* iconBevelAmount;
	VKProfileSparseRamp<_VGLColor>* iconGradientTopColor;
	VKProfileSparseRamp<_VGLColor>* iconGradientBottomColor;
	VKProfileSparseRamp<_VGLColor>* iconGlyphColor;
	VKProfileSparseRamp<VKIconGlyphStyle>* iconGlyphStyle;
	VKProfileSparseRamp<VKBlendMode>* iconGlyphBlendMode;
	VKProfileSparseRamp<float>* iconHaloSize;
	VKProfileSparseRamp<_VGLColor>* iconHaloColor;
	VKProfileSparseRamp<float>* iconBrightness;
	VKProfileSparseRamp<CGSize>* iconDropShadowOffset;
	VKProfileSparseRamp<float>* iconDropShadowSize;
	VKProfileSparseRamp<_VGLColor>* iconDropShadowColor;
	VKProfileSparseRamp<float>* iconCornerRadius;
	VKProfileSparseRamp<unsigned int>* iconSourceStyleAttribute;
	VKProfileSparseRamp<VKBlendMode>* iconGlowBlendMode;
	VKProfileSparseRamp<float>* iconAlpha;
	VKProfileSparseRamp<float>* iconSaturation;
	VKProfileSparseRamp<VKPStyleProperties_GenericShieldStyle>* genericShieldStyle;
	VKProfileSparseRamp<_VGLColor>* genericShieldBackgroundColor;
	VKProfileSparseRamp<_VGLColor>* genericShieldBorderColor;
	VKProfileSparseRamp<_VGLColor>* genericShieldTextColor;
	VKProfileSparseRamp<float>* genericShieldHaloSize;
	VKProfileSparseRamp<_VGLColor>* genericShieldHaloColor;
	VKProfileSparseRamp<CGSize>* genericShieldDropShadowOffset;
	VKProfileSparseRamp<float>* genericShieldDropShadowSize;
	VKProfileSparseRamp<_VGLColor>* genericShieldDropShadowColor;
	VKProfileSparseRamp<int>* showLabelAsShield;
	VKProfileSparseRamp<VKPStyleProperties_ShieldSize>* shieldSize;
	VKProfileSparseRamp<float>* roadWidth;
	VKProfileSparseRamp<float>* marginTop;
	VKProfileSparseRamp<float>* marginRight;
	VKProfileSparseRamp<float>* marginBottom;
	VKProfileSparseRamp<float>* marginLeft;
	VKProfileSparseRamp<float>* paddingTop;
	VKProfileSparseRamp<float>* paddingRight;
	VKProfileSparseRamp<float>* paddingBottom;
	VKProfileSparseRamp<float>* paddingLeft;
	VKProfileSparseRamp<int>* collisionOrder;
	VKProfileSparseRamp<float>* collisionRank;
	VKProfileSparseRamp<int>* shieldCollisionOrder;
	VKProfileSparseRamp<float>* shieldCollisionRank;
	VKProfileSparseRamp<int>* arrowCollisionOrder;
	VKProfileSparseRamp<float>* arrowCollisionRank;
	VKProfileSparseRamp<bool>* selectable;
	VKProfileSparseRamp<bool>* iconVisibleWhenPOIsDisabled;
	VKProfileSparseRamp<bool>* textVisibleWhenPOIsDisabled;
	VKProfileSparseRamp<float>* iconContentScale;
	NSMutableArray* fontFamily;
	NSMutableArray* icon;
	NSMutableArray* iconGlow;
	float tiltLimit;
	bool navSignsVisible;
	bool navShieldsVisible;
	float navSignsBrightness;
	VGLColor arrowColor;
	VGLColor arrowHaloColor;
	float trafficIncidentBrightness;
	int labelClass;

}
-(id)variant;
-(void)dealloc;
-(unsigned long long)layer;
-(id)initWithStyle:(id)arg1 ;
-(id).cxx_construct;
-(void).cxx_destruct;
-(id)genericShieldStyle;
-(unsigned long long)minVisibleZoom;
-(unsigned long long)maxVisibleZoom;
-(bool)areTextBoxesEverVisible;
-(bool)isPOITextEverVisible;
-(unsigned long long)minArrowZoom;
-(unsigned char)dedupeRank;
-(void)getLabelStyle:(VKLabelStyle*)arg1 atZoom:(float)arg2 tilt:(float)arg3 contentScale:(float)arg4 scaleFactor:(long long)arg5 ;
-(double)mapWidthInEmsForZoom:(int)arg1 scaleFactor:(long long)arg2 ;
-(double)minimumRoadArrowSpacingForZoom:(int)arg1 ;
-(double)minimumRoadLabelSpacingForZoom:(int)arg1 scaleFactor:(long long)arg2 ;
-(void)getRoadSignStyle:(SCD_Struct_VK284*)arg1 atZoom:(float)arg2 tilt:(float)arg3 contentScale:(float)arg4 scaleFactor:(long long)arg5 ;
-(void)getNavShieldStyle:(SCD_Struct_VK284*)arg1 atZoom:(float)arg2 tilt:(float)arg3 contentScale:(float)arg4 scaleFactor:(long long)arg5 ;
-(bool)areNavSignsVisible;
-(bool)areNavShieldsVisible;
-(void)getFontOptions:(FontOptions*)arg1 atZoom:(float)arg2 contentScale:(float)arg3 scaleFactor:(long long)arg4 ;
-(void)takeFromStyleProperties:(id)arg1 atZoom:(unsigned long long)arg2 globals:(id)arg3 ;
-(void)takeFromZoomInvariantProperties:(id)arg1 ;
-(bool)arrowVisibleAtZoom:(float)arg1 ;
-(bool)showShieldTextAsLabelAtZoom:(float)arg1 ;
-(unsigned long long)arrowLayer;
-(bool)visibleAtMaxZoom:(float)arg1 ;
-(bool)areShieldsEverVisible;
@end

