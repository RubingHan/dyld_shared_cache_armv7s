/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:03:07 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <QuartzCore/CALayer.h>
#import <VectorKit/VGLCanvas.h>

@class VGLContext, VGLFramebuffer, VGLLayer;

@interface VGLScreenCanvas : CALayer <VGLCanvas> {

	VGLContext* _targetContext;
	long long _canvasWidth;
	long long _canvasHeight;
	bool _useDepthBuffer;
	bool _useStencilBuffer;
	bool _useMultisampling;
	bool _requiresMultisampling;
	VGLColor _glClearColor;
	CGContextRef _snapshotContext;
	bool _forceRecreateFramebuffer;
	bool _forceRecreateFramebufferAndKeepMultisampleFramebuffer;
	VGLFramebuffer* _targetBuffer;
	double _contentScale;
	VGLLayer* _glLayer;
	bool _isInBackground;

}

@property (assign,nonatomic) bool useDepthBuffer;                            //@synthesize useDepthBuffer=_useDepthBuffer - In the implementation block
@property (assign,nonatomic) bool useStencilBuffer;                          //@synthesize useStencilBuffer=_useStencilBuffer - In the implementation block
@property (assign,nonatomic) bool useMultisampling; 
@property (assign,nonatomic) VGLColor glClearColor;                          //@synthesize glClearColor=_glClearColor - In the implementation block
@property (nonatomic,readonly) bool currentSceneRequiresMSAA; 
@property (getter=isDrawable,nonatomic,readonly) bool drawable; 
@property (nonatomic,readonly) VGLLayer * glLayer;                           //@synthesize glLayer=_glLayer - In the implementation block
@property (assign,nonatomic) double contentScale;                            //@synthesize contentScale=_contentScale - In the implementation block
@property (nonatomic,readonly) CGSize size; 
@property (nonatomic,readonly) CGSize sizeInPixels; 
@property (nonatomic,readonly) VGLContext * vglContext;                      //@synthesize targetContext=_targetContext - In the implementation block
+(Class)contextClass;
-(void)setOpaque:(bool)arg1 ;
-(void)setNeedsDisplayOnBoundsChange:(bool)arg1 ;
-(void)dealloc;
-(void)setNeedsDisplay;
-(CGSize)size;
-(void)setBackgroundColor:(CGColorRef)arg1 ;
-(void)setBounds:(CGRect)arg1 ;
-(void)didReceiveMemoryWarning;
-(void)renderInContext:(CGContextRef)arg1 ;
-(void)setContentsGravity:(id)arg1 ;
-(void)setContentsScale:(double)arg1 ;
-(void)present;
-(id).cxx_construct;
-(void)setContentScale:(double)arg1 ;
-(double)contentScale;
-(void)willEnterForeground;
-(void)display;
-(void)didEnterBackground;
-(void)_createGLLayerIfNecessary;
-(void)_destroyFramebuffer;
-(void)_updateForceRecreateFramebuffer;
-(bool)currentSceneRequiresMSAA;
-(void)_destroyAndCreateFramebuffer;
-(void)_destroyAndCreateFramebufferAndKeepMultisampleFramebuffer;
-(void)setUseMultisampling:(bool)arg1 ;
-(void)didPresent;
-(bool)isEffectivelyHidden;
-(bool)canRender;
-(bool)wantsRender;
-(void)_destroyFramebufferAndKeepMultisampleFramebuffer;
-(void)createContextIfNecessary;
-(id)vglContext;
-(void)_createFramebuffer;
-(void)frameBufferDestroyed;
-(void)willDrawView;
-(void)didDrawView;
-(CGSize)sizeInPixels;
-(bool)isDrawable;
-(id)initWithContext:(id)arg1 inBackground:(bool)arg2 ;
-(void)setGlClearColor:(VGLColor)arg1 ;
-(void)drawWithTimestamp:(double)arg1 ;
-(bool)shouldRender;
-(void)preloadResources;
-(bool)useMultisampling;
-(bool)useDepthBuffer;
-(void)setUseDepthBuffer:(bool)arg1 ;
-(bool)useStencilBuffer;
-(void)setUseStencilBuffer:(bool)arg1 ;
-(VGLColor)glClearColor;
-(id)glLayer;
-(void)layoutSublayers;
@end

