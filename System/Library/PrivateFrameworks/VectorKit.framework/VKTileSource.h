/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:03:12 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol VKTileSourceClient;
#import <VectorKit/VectorKit-Structs.h>
@class VKTilePool, VKTileKeyMap, VKTileKeyList, VKStylesheet, NSError;

@interface VKTileSource : NSObject {

	<VKTileSourceClient>* _client;
	VKTilePool* _tilePool;
	VKTileKeyMap* _pendingLoads;
	VKTileKeyList* _decoding;
	VKTileKeyList* _failedTiles;
	VKStylesheet* _stylesheet;
	double _contentScale;
	int loadingTiles;
	NSError* _recentError;

}

@property (assign,nonatomic) <VKTileSourceClient> * client;                     //@synthesize client=_client - In the implementation block
@property (nonatomic,retain) VKStylesheet * stylesheet;                         //@synthesize stylesheet=_stylesheet - In the implementation block
@property (assign,nonatomic) double contentScale;                               //@synthesize contentScale=_contentScale - In the implementation block
@property (nonatomic,readonly) long long tileSize; 
@property (nonatomic,readonly) long long minimumZoomLevel; 
@property (nonatomic,readonly) long long maximumZoomLevel; 
@property (nonatomic,readonly) bool minimumZoomLevelBoundsCamera; 
@property (nonatomic,readonly) bool maximumZoomLevelBoundsCamera; 
@property (nonatomic,readonly) long long zEquivalenceClass; 
@property (nonatomic,readonly) long long minimumDownloadZoomLevel; 
@property (nonatomic,readonly) long long maximumDownloadZoomLevel; 
-(void)clearCaches;
-(void)dealloc;
-(id)init;
-(long long)tileSize;
-(void)setContentScale:(double)arg1 ;
-(double)contentScale;
-(id)stylesheet;
-(void)setStylesheet:(id)arg1 ;
-(id)detailedDescription;
-(long long)minimumZoomLevel;
-(long long)maximumZoomLevel;
-(void)setClient:(id)arg1 ;
-(bool)minimumZoomLevelBoundsCamera;
-(bool)maximumZoomLevelBoundsCamera;
-(void)populateVisibleTileSets:(id)arg1 withTiles:(id)arg2 ;
-(bool)cancelFetchForKey:(const VKTileKey*)arg1 ;
-(long long)minimumDownloadZoomLevel;
-(void)fetchTileForKey:(const VKTileKey*)arg1 ;
-(void)forceDownload;
-(id)tileForKey:(const VKTileKey*)arg1 ;
-(bool)canFetchTileForKey:(const VKTileKey*)arg1 ;
-(VKTileKey)sourceKeyForRenderKey:(const VKTileKey*)arg1 ;
-(GEOTileKey)downloadKeyForSourceKey:(const VKTileKey*)arg1 ;
-(void)tileAvailabilityChanged:(id)arg1 ;
-(long long)maximumDownloadZoomLevel;
-(long long)zEquivalenceClass;
-(GEOTileKey)downloadKeyAtX:(unsigned)arg1 y:(unsigned)arg2 z:(unsigned)arg3 ;
-(void)fetchedTile:(id)arg1 forKey:(const VKTileKey*)arg2 ;
-(VKTileKey)nativeKeyForRenderKey:(const VKTileKey*)arg1 ;
-(id)tileForSourceKey:(const VKTileKey*)arg1 renderKey:(const VKTileKey*)arg2 ;
-(void)failedToDecodeSourceKey:(const VKTileKey*)arg1 ;
-(void)_fetchedTile:(id)arg1 ;
-(void)performDownload:(const GEOTileKey*)arg1 ;
-(void)fetchTileForKey:(const VKTileKey*)arg1 sourceKey:(const VKTileKey*)arg2 ;
-(void)cancelDownload:(const GEOTileKey*)arg1 ;
-(bool)cancelFetchForKey:(const VKTileKey*)arg1 sourceKey:(const VKTileKey*)arg2 ;
-(bool)mayUseNetwork;
-(void)willGoToNetwork;
-(void)didFinishWithNetwork;
-(void)didFailToLoadTileKey:(const GEOTileKey*)arg1 error:(id)arg2 ;
-(void)didFetchData:(id)arg1 forKey:(const GEOTileKey*)arg2 ;
-(id)tileForData:(id)arg1 downloadKey:(const GEOTileKey*)arg2 sourceKey:(const VKTileKey*)arg3 ;
-(void)didLoadTile:(id)arg1 forKey:(const VKTileKey*)arg2 ;
-(VKTileKey)sourceKeyForDownloadKey:(const GEOTileKey*)arg1 ;
-(bool)_shouldDecodeTile:(const VKTileKey*)arg1 ;
-(void)decodeData:(id)arg1 downloadKey:(const GEOTileKey*)arg2 sourceKey:(const VKTileKey*)arg3 ;
-(void)_failedToLoadSourceKey:(const VKTileKey*)arg1 downloadKey:(const GEOTileKey*)arg2 error:(id)arg3 ;
-(void)foreachTileInPool:(/*^block*/ id)arg1 ;
-(id)client;
@end

