/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:02:59 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomEvaluator.framework/SymptomEvaluator
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_dispatch_queue, OS_dispatch_source;
#import <SymptomEvaluator/SymptomEvaluator-Structs.h>
@class AnalyticsWorkspace, UsageAnalytics, ProcessAnalytics, AppAnalytics, ObjectAnalytics, NSObject, NSMutableDictionary, NSDate;

@interface AnalyticsEngine : NSObject {

	AnalyticsWorkspace* workspace;
	UsageAnalytics* uspace;
	ProcessAnalytics* pspace;
	AppAnalytics* aspace;
	ObjectAnalytics* calspace;
	NSObject<OS_dispatch_queue>* queue;
	NSMutableDictionary* processCache;
	NSMutableDictionary* appState;
	NSMutableDictionary* appCompactState;
	NSMutableDictionary* liveSocketCache;
	NSMutableDictionary* uuidCache;
	NStatManagerRef nstatManager;
	NStatManagerRef nstatInterfaceManager;
	NStatSourceRef nstatWifiSource;
	NStatSourceRef nstatCellSource;
	int cellularInterface;
	/*^block*/ id dataUsageRefreshCompletionBlock;
	NSDate* lastRefreshTimes[2];
	NSObject<OS_dispatch_source>* mem_alerts;
	NSObject<OS_dispatch_source>* flushUninstalledAppTimer;
	bool _haveCalendar;
	bool _haveTypicalUsage;

}

@property (assign) bool haveCalendar;                  //@synthesize haveCalendar=_haveCalendar - In the implementation block
@property (assign) bool haveTypicalUsage;              //@synthesize haveTypicalUsage=_haveTypicalUsage - In the implementation block
-(void)dealloc;
-(void).cxx_destruct;
-(id)fetchFromCacheWithName:(id)arg1 ;
-(void)refreshDataUsageWithCallbackOnQueue:(id)arg1 completionBlock:(/*^block*/ id)arg2 ;
-(bool)haveCalendar;
-(void)setHaveCalendar:(bool)arg1 ;
-(bool)haveTypicalUsage;
-(void)setHaveTypicalUsage:(bool)arg1 ;
-(void)resetDataUsageFor:(id)arg1 nameKind:(id)arg2 ;
-(id)initWithParams:(id)arg1 queue:(id)arg2 ;
-(bool)_initializeLocalCache;
-(void)_handleNetworkStatisticsData:(NStatSourceRef)arg1 socketClosed:(bool)arg2 ;
-(bool)_shouldAcceptNStatSource:(NStatSourceRef)arg1 withDescription:(id)arg2 ;
-(void)_saveAndUnloadAllState;
-(void)_removeUninstalledApplications;
-(void)_removeAllInfoForProcess:(id)arg1 withUUID:(id)arg2 ;
-(void)_refreshDataUsageWithTriggerType:(int)arg1 ;
-(void)_refreshDataUsageComplete;
-(id)_uuidCacheLookup:(id)arg1 timestamp:(id)arg2 ;
-(id)_uuidCacheAddUUID:(id)arg1 processName:(id)arg2 bundleID:(id)arg3 ;
-(id)_processFetchForName:(id)arg1 bundle:(id)arg2 ;
-(void)_updateDataUsageForProcess:(id)arg1 withOldCounts:(id)arg2 newCounts:(id)arg3 ;
-(void)_updateDataUsageHeaderOverheadForProcess:(id)arg1 withCounts:(id)arg2 properties:(id)arg3 ;
-(void)_stopMonitoringNetworkInterfaceSource:(NStatSourceRef)arg1 ;
-(NStatSourceRef)_startMonitoringNetworkInterface:(int)arg1 usingThreshold:(unsigned long long)arg2 isCellular:(bool)arg3 ;
-(void)_uuidCachePrune;
-(id)_liveUsageFetchForProcess:(id)arg1 ;
-(void)_saveAndUnloadSelectState;
-(void)_calendarUsageForApp:(id)arg1 givenLastRun:(id)arg2 ;
-(void)_compactUsageForApp:(id)arg1 intervalType:(int)arg2 givenLastRun:(id)arg3 ;
-(unsigned)_dumpMemoryStats;
-(void)_removeInfoFromWorkspaceForProcess:(id)arg1 ;
-(void)_uuidCacheRemove:(id)arg1 ;
-(void)_updateLiveUsage:(id)arg1 wifiIn:(long long)arg2 wifiOut:(long long)arg3 cellIn:(long long)arg4 cellOut:(long long)arg5 ;
-(id)_trafficEnvelopeToTier:(double)arg1 ;
-(void)_handleApplicationNotificationCompactForProcessName:(id)arg1 bundleName:(id)arg2 UUID:(id)arg3 edgeMode:(bool)arg4 ;
-(void)_handleApplicationNotificationStateChangedForProcessName:(id)arg1 bundleName:(id)arg2 UUID:(id)arg3 edgeMode:(bool)arg4 intervalType:(int)arg5 ;
-(id)_getQueue;
@end

