/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:01:00 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/DataAccess.framework/DataAccess
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <DataAccess/DataAccess-Structs.h>
@class ACAccount, NSMutableDictionary, DAStatusReport, DATaskManager, NSString, NSMutableArray, NSObject, NSArray, NSData, NSURL, NSSet;

@interface DAAccount : NSObject {

	ACAccount* _backingAccountInfo;
	bool _hasInitted;
	bool _shouldPromptForPassword;
	bool _shouldUseOpportunisticSockets;
	bool _wasUserInitiated;
	NSMutableDictionary* _haveWarnedAboutCertDict;
	DAStatusReport* _statusReport;
	CFDictionaryRef _consumers;
	CFURLStorageSessionRef _storageSession;
	DATaskManager* _taskManager;
	NSString* _clientToken;
	NSMutableArray* _pendingQueries;
	NSObject<OS_dispatch_queue>* _pendingQueryQueue;
	unsigned long long _lastQueryStartedTime;
	bool _shouldFailAllTasks;
	bool _isValidating;
	NSArray* _appIdsForPasswordPrompt;
	NSMutableDictionary* _dataclassPropertyURLsByDataclass;

}

@property (setter=setDAAccountVersion:) int daAccountVersion; 
@property (readonly) NSString * persistentUUID; 
@property (copy) NSString * accountDescription; 
@property (copy) NSString * username; 
@property (copy) NSString * user; 
@property (copy) NSString * host; 
@property (assign) long long port; 
@property (copy) NSString * password; 
@property (assign) bool useSSL; 
@property (readonly) int enabledDataclassesBitmask; 
@property (readonly) bool isChildAccount; 
@property (readonly) ACAccount * backingAccountInfo;                                              //@synthesize backingAccountInfo=_backingAccountInfo - In the implementation block
@property (nonatomic,readonly) DATaskManager * taskManager;                                       //@synthesize taskManager=_taskManager - In the implementation block
@property (readonly) int keychainAccessibilityType; 
@property (nonatomic,readonly) NSString * scheduleIdentifier; 
@property (retain) NSData * signingIdentityPersistentReference; 
@property (retain) NSData * encryptionIdentityPersistentReference; 
@property (assign) bool shouldDoInitialAutodiscovery; 
@property (readonly) bool shouldAutodiscoverAccountProperties; 
@property (readonly) NSString * scheme; 
@property (copy) NSURL * principalURL; 
@property (copy) NSString * principalPath; 
@property (readonly) NSString * clientToken; 
@property (copy) NSString * emailAddress; 
@property (copy) NSArray * emailAddresses; 
@property (assign) bool shouldPromptForPassword;                                                  //@synthesize shouldPromptForPassword=_shouldPromptForPassword - In the implementation block
@property (readonly) NSArray * appIdsForPasswordPrompt;                                           //@synthesize appIdsForPasswordPrompt=_appIdsForPasswordPrompt - In the implementation block
@property (nonatomic,readonly) bool shouldFailAllTasks;                                           //@synthesize shouldFailAllTasks=_shouldFailAllTasks - In the implementation block
@property (readonly) NSData * identityPersist; 
@property (assign) bool shouldUseOpportunisticSockets;                                            //@synthesize shouldUseOpportunisticSockets=_shouldUseOpportunisticSockets - In the implementation block
@property (assign) bool wasUserInitiated;                                                         //@synthesize wasUserInitiated=_wasUserInitiated - In the implementation block
@property (assign,nonatomic) bool isValidating;                                                   //@synthesize isValidating=_isValidating - In the implementation block
@property (nonatomic,readonly) NSString * userAgentHeader; 
@property (nonatomic,readonly) NSSet * serverComplianceClasses; 
@property (nonatomic,readonly) NSString * serverRoot; 
@property (retain) DAStatusReport * statusReport;                                                 //@synthesize statusReport=_statusReport - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * dataclassPropertyURLsByDataclass;              //@synthesize dataclassPropertyURLsByDataclass=_dataclassPropertyURLsByDataclass - In the implementation block
+(id)_leafAccountTypes;
+(id)oneshotListOfAccountIDs;
+(void)reacquireClientRestrictions:(id)arg1 ;
+(id)daAccountSubclassWithBackingAccountInfo:(id)arg1 ;
-(bool)isCardDAVAccount;
-(bool)isBookmarkDAVAccount;
-(void)getRootFolderWithConsumer:(id)arg1 ;
-(void)synchronizeBookmarkTreeWithConsumer:(id)arg1 hasRemoteChanges:(bool)arg2 ;
-(void)synchronizeNotesFolder:(id)arg1 noteContext:(id)arg2 previousTag:(id)arg3 actions:(id)arg4 changeSet:(id)arg5 notesToDeleteAfterSync:(id)arg6 isInitialUberSync:(bool)arg7 isResyncAfterConnectionFailed:(bool)arg8 consumer:(id)arg9 ;
-(id)defaultNotesFolder;
-(id)notesFolders;
-(void)synchronizeToDosFolder:(id)arg1 previousTag:(id)arg2 actions:(id)arg3 highestIdContext:(SCD_Struct_DA2*)arg4 isInitialUberSync:(bool)arg5 isResyncAfterConnectionFailed:(bool)arg6 consumer:(id)arg7 ;
-(int)toDosNumberOfPastDaysToSync;
-(void)setToDosNumberOfPastDaysToSync:(int)arg1 ;
-(id)defaultToDosFolder;
-(id)toDosFolders;
-(void)_reallyCancelSearchQuery:(id)arg1 ;
-(void)_reallyCancelAllSearchQueries;
-(void)_reallyPerformSearchQuery:(id)arg1 ;
-(bool)_reallySearchQueriesRunning;
-(id)pendingQueryQueue;
-(void)_dequeueQuery;
-(void)cancelAllSearchQueries;
-(bool)searchQueriesRunning;
-(int)supportsMailboxSearch;
-(int)supportsEmailFlagging;
-(void)performSearchQuery:(id)arg1 ;
-(void)cancelSearchQuery:(id)arg1 ;
-(bool)reattemptInvitationLinkageForMetaData:(id)arg1 inFolderWithId:(id)arg2 ;
-(id)unactionableICSRepresentationForMetaData:(id)arg1 inFolderWithId:(id)arg2 outSummary:(id*)arg3 ;
-(id)inboxFolder;
-(id)sentItemsFolder;
-(id)deletedItemsFolder;
-(id)draftsFolder;
-(void)synchronizeContactsFolder:(id)arg1 previousTag:(id)arg2 previousSyncToken:(id)arg3 actions:(id)arg4 highestIdContext:(SCD_Struct_DA3*)arg5 isInitialUberSync:(bool)arg6 isResyncAfterConnectionFailed:(bool)arg7 previousTagIsSuspect:(bool)arg8 consumer:(id)arg9 ;
-(id)defaultContactsFolder;
-(id)contactsFolders;
-(void)synchronizeEventsFolder:(id)arg1 previousTag:(id)arg2 actions:(id)arg3 highestIdContext:(SCD_Struct_DA2*)arg4 isInitialUberSync:(bool)arg5 isResyncAfterConnectionFailed:(bool)arg6 consumer:(id)arg7 ;
-(bool)sendEmailsForCalEvents:(id)arg1 consumer:(id)arg2 ;
-(id)beginDownloadingAttachmentWithUUID:(id)arg1 consumer:(id)arg2 ;
-(void)cancelDownloadingInstance:(id)arg1 error:(id)arg2 ;
-(id)respondToShareRequestForCalendar:(id)arg1 withResponse:(int)arg2 consumer:(id)arg3 ;
-(void)cancelShareResponseInstance:(id)arg1 error:(id)arg2 ;
-(id)defaultEventsFolder;
-(id)eventsFolders;
-(void)webLoginRequestedAtURL:(id)arg1 reasonString:(id)arg2 completionBlock:(/*^block*/ id)arg3 ;
-(void)_webLoginRequestedAtURL:(id)arg1 reasonString:(id)arg2 completionBlock:(/*^block*/ id)arg3 ;
-(void)handleValidationError:(id)arg1 completion:(/*^block*/ id)arg2 ;
-(id)localizedIdenticalAccountFailureMessage;
-(id)localizedInvalidPasswordMessage;
-(void)dropAssertionsAndRenewCredentialsWithHandler:(/*^block*/ id)arg1 ;
-(int)_actionForTrust:(SecTrustRef)arg1 host:(id)arg2 service:(id)arg3 ;
-(id)_serverSuffixesToAlwaysFail;
-(void)handleTrust:(SecTrustRef)arg1 forHost:(id)arg2 withCompletionBlock:(/*^block*/ id)arg3 ;
-(bool)handleTrustChallenge:(id)arg1 ;
-(void)tearDown;
-(id)user;
-(id)password;
-(void)setPort:(long long)arg1 ;
-(void)setUser:(id)arg1 ;
-(void)setPassword:(id)arg1 ;
-(void)setHost:(id)arg1 ;
-(void)dealloc;
-(id)description;
-(void)reload;
-(id)scheme;
-(id)host;
-(id)displayName;
-(id)additionalHeaderValues;
-(id)serverRoot;
-(id)userAgentHeader;
-(id)serverComplianceClasses;
-(void)clientTokenRequestedByServer;
-(id)clientToken;
-(id)oauthInfoProvider;
-(bool)handleCertificateError:(id)arg1 ;
-(void)setPrincipalURL:(id)arg1 ;
-(id)oauth2Token;
-(void)setEmailAddress:(id)arg1 ;
-(void)resetStatusReport;
-(void)_setPersistentUUID:(id)arg1 ;
-(id)dataclassProperties;
-(void)setAccountBoolProperty:(bool)arg1 forKey:(id)arg2 ;
-(id)passwordWithExpected:(bool)arg1 ;
-(id)dataclassPropertyURLsByDataclass;
-(id)urlFromDataclassPropertiesForDataclass:(id)arg1 ;
-(void)setIsValidating:(bool)arg1 ;
-(bool)shouldRemoveDBSyncDataOnAccountChange;
-(void)removeDBSyncData;
-(bool)monitorFoldersWithIDs:(id)arg1 ;
-(bool)_isIdentityManagedByProfile;
-(void)setIdentityCertificatePersistentID:(id)arg1 managedByProfile:(bool)arg2 ;
-(void)saveAccountPropertiesWithCompletionHandler:(/*^block*/ id)arg1 ;
-(id)_exceptionsDict;
-(void)setStatusReport:(id)arg1 ;
-(bool)wasUserInitiated;
-(int)keychainAccessibilityType;
-(int)daAccountVersion;
-(void)setDAAccountVersion:(int)arg1 ;
-(id)scheduleIdentifier;
-(bool)enabledForAnyDADataclasses:(int)arg1 ;
-(int)enabledDataclassesBitmask;
-(void)stopMonitoringFolderWithID:(id)arg1 ;
-(id)hostFromDataclassPropertiesForDataclass:(id)arg1 ;
-(bool)useSSLFromDataclassPropertiesForDataclass:(id)arg1 ;
-(long long)portFromDataclassPropertiesForDataclass:(id)arg1 ;
-(void)checkValidityOnAccountStore:(id)arg1 withConsumer:(id)arg2 ;
-(bool)shouldAutodiscoverAccountProperties;
-(void)accountDidChangeFromOldAccountInfo:(id)arg1 ;
-(bool)monitorFolderWithID:(id)arg1 ;
-(void)stopMonitoringFoldersWithIDs:(id)arg1 ;
-(void)stopMonitoringFolders;
-(void)removeClientCertificateData;
-(CFDataRef)exceptionsForDigest:(id)arg1 ;
-(void)setExceptions:(CFDataRef)arg1 forDigest:(id)arg2 ;
-(bool)isChildAccount;
-(bool)haveWarnedAboutCert:(id)arg1 forHost:(id)arg2 ;
-(void)setHaveWarnedAboutCert:(id)arg1 forHost:(id)arg2 ;
-(bool)resetCertWarnings;
-(bool)isLDAPAccount;
-(bool)isBookmarkDAVAccount;
-(bool)isCardDAVAccount;
-(bool)isCalDAVChildAccount;
-(bool)isSubscribedCalendarAccount;
-(bool)shouldPromptForPassword;
-(void)setShouldPromptForPassword:(bool)arg1 ;
-(void)setWasUserInitiated:(bool)arg1 ;
-(id)appIdsForPasswordPrompt;
-(void)setDataclassPropertyURLsByDataclass:(id)arg1 ;
-(id)principalPath;
-(void)setPrincipalPath:(id)arg1 ;
-(int)accountIntPropertyForKey:(id)arg1 ;
-(bool)saveModifiedPropertiesOnBackingAccount;
-(bool)upgradeAccount;
-(void)setShouldDoInitialAutodiscovery:(bool)arg1 ;
-(bool)shouldDoInitialAutodiscovery;
-(void)ingestBackingAccountInfoProperties;
-(id)spinnerIdentifiers;
-(bool)isCalDAVAccount;
-(id)addUsernameToURL:(id)arg1 ;
-(void)saveAccountProperties;
-(void)setShouldUseOpportunisticSockets:(bool)arg1 ;
-(id)taskManager;
-(bool)useSSL;
-(id)initWithBackingAccountInfo:(id)arg1 ;
-(void)setConsumer:(id)arg1 forTask:(id)arg2 ;
-(id)consumerForTask:(id)arg1 ;
-(void)removeConsumerForTask:(id)arg1 ;
-(id)stateString;
-(bool)isGoogleAccount;
-(void)setEnabled:(bool)arg1 forDADataclass:(int)arg2 ;
-(void)resetAccountID;
-(void)suspendMonitoringFoldersWithIDs:(id)arg1 ;
-(void)resumeMonitoringFoldersWithIDs:(id)arg1 ;
-(void)setUseSSL:(bool)arg1 ;
-(void)setAccountIntProperty:(int)arg1 forKey:(id)arg2 ;
-(bool)accountBoolPropertyForKey:(id)arg1 ;
-(id)domainOnly;
-(id)usernameWithoutDomain;
-(id)identityPersist;
-(bool)accountHasSignificantPropertyChangesFromOldAccountInfo:(id)arg1 ;
-(void)cleanupAccountFiles;
-(void)discoverInitialPropertiesWithConsumer:(id)arg1 ;
-(id)defaultContainerIdentifierForDADataclass:(int)arg1 ;
-(bool)autodiscoverAccountConfigurationWithConsumer:(id)arg1 ;
-(bool)isActiveSyncAccount;
-(bool)isEqualToAccount:(id)arg1 ;
-(id)onBehalfOfBundleIdentifier;
-(bool)accountContainsEmailAddress:(id)arg1 ;
-(id)statusReport;
-(CFURLStorageSessionRef)copyStorageSession;
-(id)customConnectionProperties;
-(bool)shouldFailAllTasks;
-(bool)shouldUseOpportunisticSockets;
-(bool)isValidating;
-(bool)isDisabled;
-(id)principalURL;
-(void)setEnabled:(bool)arg1 forDataclass:(id)arg2 ;
-(id)accountPropertyForKey:(id)arg1 ;
-(void)setAccountProperty:(id)arg1 forKey:(id)arg2 ;
-(id)accountDescription;
-(void)setUsername:(id)arg1 ;
-(void)setAccountDescription:(id)arg1 ;
-(void)removeAccountPropertyForKey:(id)arg1 ;
-(id)syncStoreIdentifier;
-(id)accountID;
-(id)emailAddresses;
-(void)setEmailAddresses:(id)arg1 ;
-(id)emailAddress;
-(id)backingAccountInfo;
-(bool)isHotmailAccount;
-(id)persistentUUID;
-(bool)enabledForDADataclass:(int)arg1 ;
-(void)shutdown;
-(id)signingIdentityPersistentReference;
-(oneway void)setSigningIdentityPersistentReference:(id)arg1 ;
-(id)encryptionIdentityPersistentReference;
-(oneway void)setEncryptionIdentityPersistentReference:(id)arg1 ;
-(bool)isEnabledForDataclass:(id)arg1 ;
-(id)username;
-(long long)port;
@end

