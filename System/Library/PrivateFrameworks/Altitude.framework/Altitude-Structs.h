/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:00:36 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/Altitude.framework/Altitude
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

typedef struct BitField<unsigned int> {
	unsigned mField;
} BitField<unsigned int>;

typedef struct GEOTileKey {
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned type : 6;
	unsigned pixelSize : 8;
	unsigned textScale : 8;
	unsigned provider : 8;
	unsigned expires : 1;
	unsigned reserved1 : 7;
	unsigned char reserved2[4];
} GEOTileKey;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> > >;

typedef struct _tree<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, std::__1::__map_value_compare<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > > {
	__tree_node<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, true> > __pair3_;
} tree<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, std::__1::__map_value_compare<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > >;

typedef struct map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > > {
	tree<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, std::__1::__map_value_compare<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > > __tree_;
} map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > >;

typedef struct shared_ptr<altitude::GeoServicesLoadJob> {
	GeoServicesLoadJob __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<altitude::GeoServicesLoadJob>;

typedef struct KaroMapImp<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp> {
	/*function pointer*/ void* _vptr$ReflectionInterface;
	ReflectionBase mPartOf;
	BitField<unsigned int> mFlags;
	unsigned mMappingsCount;
	GEOTileKey mDefaultKey;
	shared_ptr<altitude::GeoServicesLoadJob> mDefaultValue;
	unsigned mT0Flags;
	unsigned mT1Flags;
	map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > > mMap;
} KaroMapImp<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp>;

typedef struct Mutex {
	void mMutex;
} Mutex;

typedef struct {
	void opaque1;
	long long opaque2;
} SCD_Struct_Pi10;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct __IOSurfaceAccelerator* IOSurfaceAcceleratorRef;

typedef struct __IOSurface* IOSurfaceRef;

