/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:01:16 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

typedef struct GEOTileKey {
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned type : 6;
	unsigned pixelSize : 8;
	unsigned textScale : 8;
	unsigned provider : 8;
	unsigned expires : 1;
	unsigned reserved1 : 7;
	unsigned char reserved2[4];
} GEOTileKey;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned long long _high;
	unsigned long long _low;
} SCD_Struct_GE2;

typedef struct {
	unsigned sessionID : 1;
	unsigned clientImgFmt : 1;
	unsigned clientImgMaxHeight : 1;
	unsigned clientImgMaxWidth : 1;
	unsigned mapCenterX : 1;
	unsigned mapCenterY : 1;
	unsigned mapSpanX : 1;
	unsigned mapSpanY : 1;
	unsigned requestType : 1;
	unsigned tilesizeX : 1;
	unsigned tilesizeY : 1;
	unsigned zoomlevel : 1;
} SCD_Struct_GE3;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_GE4;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *> > >;

typedef struct _list_node_base<LoadItem, void *> {
	__list_node<LoadItem, void *> __prev_;
	__list_node<LoadItem, void *> __next_;
} list_node_base<LoadItem, void *>;

typedef struct list<LoadItem, std::__1::allocator<LoadItem> > {
	list_node_base<LoadItem, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *> > > __size_alloc_;
} list<LoadItem, std::__1::allocator<LoadItem> >;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	BOOL __opaque[56];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct _compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer> > {
	DispatchTimer __first_;
} compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer> >;

typedef struct unique_ptr<geo::DispatchTimer, std::__1::default_delete<geo::DispatchTimer> > {
	compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer> > __ptr_;
} unique_ptr<geo::DispatchTimer, std::__1::default_delete<geo::DispatchTimer> >;

typedef struct {
	double x;
	double y;
} SCD_Struct_GE12;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<ShrinkCacheRequester, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<ShrinkCacheRequester, void *> > >;

typedef struct _list_node_base<ShrinkCacheRequester, void *> {
	__list_node<ShrinkCacheRequester, void *> __prev_;
	__list_node<ShrinkCacheRequester, void *> __next_;
} list_node_base<ShrinkCacheRequester, void *>;

typedef struct list<ShrinkCacheRequester, std::__1::allocator<ShrinkCacheRequester> > {
	list_node_base<ShrinkCacheRequester, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<ShrinkCacheRequester, void *> > > __size_alloc_;
} list<ShrinkCacheRequester, std::__1::allocator<ShrinkCacheRequester> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, UsageData, std::__1::equal_to<GEOTileKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, UsageData, std::__1::equal_to<GEOTileKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> {
	__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > > {
	__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<_GEOTileKey, UsageData>, std::__1::__unordered_map_hasher<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, UsageData, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, UsageData> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, UsageData, std::__1::equal_to<GEOTileKey>, true> > __p3_;
} hash_table<std::__1::pair<_GEOTileKey, UsageData>, std::__1::__unordered_map_hasher<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, UsageData, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, UsageData> > >;

typedef struct unordered_map<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, UsageData> > > {
	hash_table<std::__1::pair<_GEOTileKey, UsageData>, std::__1::__unordered_map_hasher<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, UsageData, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, UsageData> > > __table_;
} unordered_map<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, UsageData> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<ErrorInfo> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<ErrorInfo> >;

typedef struct _compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *> > {
	ErrorInfo __first_;
} compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *> >;

typedef struct _split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *> > {
	ErrorInfo __first_;
	ErrorInfo __begin_;
	ErrorInfo __end_;
	compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *> > __end_cap_;
} split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *> >;

typedef struct deque<ErrorInfo, std::__1::allocator<ErrorInfo> > {
	split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<ErrorInfo> > __size_;
} deque<ErrorInfo, std::__1::allocator<ErrorInfo> >;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_GE30;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *> > >;

typedef struct _list_node_base<CacheItem, void *> {
	__list_node<CacheItem, void *> __prev_;
	__list_node<CacheItem, void *> __next_;
} list_node_base<CacheItem, void *>;

typedef struct list<CacheItem, std::__1::allocator<CacheItem> > {
	list_node_base<CacheItem, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *> > > __size_alloc_;
} list<CacheItem, std::__1::allocator<CacheItem> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> {
	__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > > {
	__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > >;

typedef struct _hash_table<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true> > __p3_;
} hash_table<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > >;

typedef struct unordered_map<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, eqkey, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > > {
	hash_table<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > > __table_;
} unordered_map<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, eqkey, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > >;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct {
	unsigned field1;
	double field2;
} SCD_Struct_GE46;

typedef struct {
	unsigned eastLng : 1;
	unsigned northLat : 1;
	unsigned southLat : 1;
	unsigned westLng : 1;
} SCD_Struct_GE47;

typedef struct {
	SCD_Struct_GE12 field1;
	SCD_Struct_GE12 field2;
} SCD_Struct_GE48;

typedef struct {
	SCD_Struct_GE12 field1;
	double field2;
	double field3;
} SCD_Struct_GE49;

typedef struct {
	unsigned course : 1;
	unsigned heading : 1;
	unsigned horizontalAccuracy : 1;
	unsigned speed : 1;
	unsigned timestamp : 1;
	unsigned verticalAccuracy : 1;
	unsigned altitude : 1;
	unsigned type : 1;
} SCD_Struct_GE50;

typedef struct {
	int field1;
	SCD_Struct_GE12 field2;
	double field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	double field9;
	double field10;
	int field11;
	double field12;
	int field13;
	SCD_Struct_GE12 field14;
	double field15;
} SCD_Struct_GE51;

typedef struct {
	unsigned height : 1;
	unsigned width : 1;
} SCD_Struct_GE52;

typedef struct {
	double _height;
	double _width;
	SCD_Struct_GE52 _has;
} SCD_Struct_GE53;

typedef struct {
	double field1;
	double field2;
	SCD_Struct_GE52 field3;
} SCD_Struct_GE54;

typedef struct {
	unsigned formattedAddressType : 1;
} SCD_Struct_GE55;

typedef struct {
	unsigned uID : 1;
	unsigned totalNumberOfPhotos : 1;
	unsigned version : 1;
	unsigned canBeCorrectedByBusinessOwner : 1;
	unsigned isClosed : 1;
	unsigned isUnverified : 1;
} SCD_Struct_GE56;

typedef struct {
	int list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE57;

typedef struct {
	unsigned sessionID : 1;
	unsigned departureTime : 1;
	unsigned mainTransportTypeMaxRouteCount : 1;
	unsigned timeSinceLastRerouteRequest : 1;
	unsigned getRouteForZilchPoints : 1;
} SCD_Struct_GE58;

typedef struct {
	int field1;
	int field2;
	SCD_Struct_GE52 field3;
} SCD_Struct_GE59;

typedef struct {
	unsigned area : 1;
	unsigned geoId : 1;
	unsigned uID : 1;
	unsigned addressGeocodeAccuracy : 1;
	unsigned localSearchProviderID : 1;
	unsigned type : 1;
	unsigned version : 1;
	unsigned waypointLabelType : 1;
	unsigned isDisputed : 1;
} SCD_Struct_GE60;

typedef struct {
	unsigned confidence : 1;
	unsigned travelDistance : 1;
	unsigned travelTime : 1;
} SCD_Struct_GE61;

typedef struct {
	unsigned list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE62;

typedef struct CGImage* CGImageRef;

typedef struct {
	int field1;
	unsigned field2;
	unsigned field3;
	int field4;
	unsigned field5;
	int field6;
	SCD_Struct_GE56 field7;
} SCD_Struct_GE64;

typedef struct {
	int field1;
	int field2;
	int field3;
	SCD_Struct_GE61 field4;
} SCD_Struct_GE65;

typedef struct {
	unsigned distance : 1;
	unsigned expectedTime : 1;
	unsigned hintFirstAnnouncementZilchIndex : 1;
	unsigned junctionType : 1;
	unsigned maneuverEndBasicIndex : 1;
	unsigned maneuverEndZilchIndex : 1;
	unsigned maneuverStartZilchIndex : 1;
	unsigned maneuverType : 1;
	unsigned overrideDrivingSide : 1;
	unsigned overrideTransportType : 1;
	unsigned stepID : 1;
	unsigned endsOnFwy : 1;
	unsigned toFreeway : 1;
	unsigned tollAhead : 1;
	unsigned tollPrior : 1;
} SCD_Struct_GE66;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
	SCD_Struct_GE4 field5;
	7 field6;
} SCD_Struct_GE67;

typedef struct {
	unsigned long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE68;

typedef struct {
	long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE69;

typedef struct {
	int _beginIndex;
	int _endIndex;
	int _stringType;
} SCD_Struct_GE70;

typedef struct {
	unsigned sessionGUID : 1;
	unsigned searchContextSubstring : 1;
	unsigned distanceTraveled : 1;
	unsigned geoId : 1;
	unsigned intersectingGeoId : 1;
	unsigned timeSinceMapEnteredForeground : 1;
	unsigned timeSinceMapViewportChanged : 1;
	unsigned timestamp : 1;
	unsigned businessSortOrder : 1;
	unsigned knownAccuracy : 1;
	unsigned localSearchProviderID : 1;
	unsigned maxBusinessReviews : 1;
	unsigned maxResults : 1;
	unsigned placeTypeLimit : 1;
	unsigned resultOffset : 1;
	unsigned searchSource : 1;
	unsigned sequenceNumber : 1;
	unsigned sessionID : 1;
	unsigned transportTypeForTravelTimes : 1;
	unsigned allowABTestResponse : 1;
	unsigned excludeAddressInResults : 1;
	unsigned includeBusinessCategories : 1;
	unsigned includeBusinessRating : 1;
	unsigned includeEntryPoints : 1;
	unsigned includeFeatureSets : 1;
	unsigned includeGeoId : 1;
	unsigned includeMatchedToken : 1;
	unsigned includePhonetics : 1;
	unsigned includeQuads : 1;
	unsigned includeRevgeoRequestTemplate : 1;
	unsigned includeSpokenNames : 1;
	unsigned includeStatusCodeInfo : 1;
	unsigned includeSuggestionsOnly : 1;
	unsigned includeTravelDistance : 1;
	unsigned includeTravelTime : 1;
	unsigned includeUnmatchedStrings : 1;
	unsigned isFromAPI : 1;
	unsigned isStrictMapRegion : 1;
	unsigned structuredSearch : 1;
	unsigned suppressResultsRequiringAttribution : 1;
} SCD_Struct_GE71;

typedef struct {
	PolylineCoordinate field1;
	PolylineCoordinate field2;
} SCD_Struct_GE72;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
	unsigned field5;
	unsigned field6;
} SCD_Struct_GE73;

typedef struct {
	unsigned field1;
	int field2;
	SCD_Struct_GE52 field3;
} SCD_Struct_GE74;

typedef struct {
	long long field1;
	long long field2;
} SCD_Struct_GE75;

typedef struct {
	double _x;
	double _y;
	int _z;
	SCD_Struct_GE55 _has;
} SCD_Struct_GE76;

typedef struct {
	double field1;
	double field2;
	int field3;
	SCD_Struct_GE55 field4;
} SCD_Struct_GE77;

typedef struct _CFURLRequest* CFURLRequestRef;

typedef struct {
	double _time;
	int _type;
	SCD_Struct_GE52 _has;
} SCD_Struct_GE79;

typedef struct {
	unsigned sessionID : 1;
	unsigned timepoint : 1;
	unsigned distanceLimitMeters : 1;
	unsigned transportType : 1;
	unsigned allowPartialResults : 1;
	unsigned includeDistance : 1;
	unsigned includeHistoricTravelTime : 1;
} SCD_Struct_GE80;

typedef struct {
	double field1;
	int field2;
	SCD_Struct_GE52 field3;
} SCD_Struct_GE81;

typedef struct {
	unsigned field1;
	unsigned field2;
} SCD_Struct_GE82;

typedef struct {
	unsigned long long field1;
	double field2;
	unsigned long long field3;
} SCD_Struct_GE83;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct {
	unsigned field1 : 1;
	unsigned field2 : 1;
	unsigned field3 : 1;
	unsigned field4 : 1;
	unsigned field5 : 1;
	unsigned field6 : 1;
	unsigned field7 : 1;
	unsigned field8 : 1;
	unsigned field9 : 1;
	unsigned field10 : 1;
	unsigned field11 : 1;
	unsigned field12 : 1;
	unsigned field13 : 1;
	unsigned field14 : 1;
	unsigned field15 : 1;
	unsigned field16 : 1;
	unsigned field17 : 1;
} SCD_Struct_GE86;

typedef struct {
	int field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
	unsigned field5;
	bool field6;
	bool field7;
	bool field8;
	bool field9;
	bool field10;
	bool field11;
	bool field12;
	bool field13;
	bool field14;
	bool field15;
	bool field16;
	bool field17;
	SCD_Struct_GE86 field18;
} SCD_Struct_GE87;

typedef struct {
	double field1;
	unsigned field2;
	bool field3;
	SCD_Struct_GE61 field4;
} SCD_Struct_GE88;

typedef struct {
	int _currentRouteTypeAtEndOfNav;
	unsigned _manuallyChangedRouteCount;
	unsigned _manuallyDisabledHFPCount;
	unsigned _manuallyEnabledHFPCount;
	unsigned _spokenPromptsCount;
	bool _bTHFPAvailableAtEndOfNav;
	bool _bTHFPRoutesAvailable;
	bool _currentRouteHFPEnabledAtEndOfNav;
	bool _everManuallyChangedRoute;
	bool _everManuallyEnabledHFPRoute;
	bool _everViewedAudioSheet;
	bool _everViewedAudioSheetBTAny;
	bool _everViewedAudioSheetBTHFP;
	bool _viewedAudioSheet;
	bool _viewedAudioSheetBTAny;
	bool _viewedAudioSheetBTHFP;
	bool _wirelessRoutesAvailable;
	SCD_Struct_GE86 _has;
} SCD_Struct_GE89;

typedef struct _CFURLConnection* CFURLConnectionRef;

typedef struct _CFURLResponse* CFURLResponseRef;

typedef struct __CFURLConnectionSession* CFURLConnectionSessionRef;

typedef struct {
	unsigned timepoint : 1;
	unsigned basicPointsToBeIncluded : 1;
	unsigned mainTransportType : 1;
	unsigned trafficType : 1;
	unsigned walkingLimitMeters : 1;
	unsigned includeContingencyRoutes : 1;
	unsigned includeHistoricTravelTime : 1;
	unsigned includeLaneGuidance : 1;
	unsigned includeManeuverIcons : 1;
	unsigned includePhonetics : 1;
	unsigned includeSubsteps : 1;
	unsigned includeTrafficAlongRoute : 1;
	unsigned includeTrafficIncidents : 1;
	unsigned includeZilchPoints : 1;
} SCD_Struct_GE93;

typedef struct {
	id field1;
	char* field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	unsigned long long field6;
	unsigned field7;
	unsigned long long field8;
	bool field9;
	unsigned long long field10;
	float field11;
	id field12;
	int field13;
} SCD_Struct_GE94;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
} SCD_Struct_GE95;

typedef struct {
	unsigned short field1[2];
	unsigned short field2[2];
} SCD_Struct_GE96;

typedef struct {
	SCD_Struct_GE94 field1;
	unsigned long long field2;
	unsigned long long field3;
	int field4;
	int field5;
	int field6;
	unsigned long long field7;
	unsigned long long field8;
	SCD_Struct_GE95 field9;
	/*function pointer*/ void* field10;
	SCD_Struct_GE96 field11;
	unsigned char field12;
} SCD_Struct_GE97;

typedef struct {
	float field1;
	float field2;
} SCD_Struct_GE98;

typedef struct {
	SCD_Struct_GE97 field1;
	SCD_Struct_GE98 field2;
	bool field3;
	unsigned long long field4;
	unsigned long long field5;
} SCD_Struct_GE99;

typedef struct {
	SCD_Struct_GE97 field1;
	unsigned long long field2;
	unsigned long long field3;
	bool field4;
} SCD_Struct_GE100;

typedef struct {
	SCD_Struct_GE94 field1;
	char* field2;
	unsigned long long field3;
} SCD_Struct_GE101;

typedef struct {
	bool field1;
	unsigned long long field2;
	id field3;
} SCD_Struct_GE102;

typedef struct {
	SCD_Struct_GE94 field1;
	SCD_Struct_GE98 field2;
	unsigned char field3;
	BOOL field4;
	BOOL field5;
	/*function pointer*/ void* field6;
} SCD_Struct_GE103;

typedef struct {
	unsigned short field1;
} SCD_Struct_GE104;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
	/*function pointer*/ void* field5;
} SCD_Struct_GE105;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
} SCD_Struct_GE106;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
	float field5;
	float field6;
} SCD_Struct_GE107;

typedef struct {
	/*function pointer*/ void* field1;
	unsigned long long field2;
	_ field3;
	N field4;
	unsigned short field5;
	R field6;
	a field7;
	n field8;
	g field9;
	e field10;
	unsigned long long field11;
} SCD_Struct_GE108;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	char* field3;
} SCD_Struct_GE109;

typedef struct {
	char* field1;
	char* field2;
	unsigned field3;
} SCD_Struct_GE110;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	unsigned char field3;
} SCD_Struct_GE111;

typedef struct {
	unsigned char field1;
	unsigned short field2;
} SCD_Struct_GE112;

typedef struct {
	unsigned field1;
	int field2;
	float field3;
	bool field4;
	bool field5;
	bool field6;
	bool field7;
	bool field8;
	SCD_Struct_GE112 field9[16];
} SCD_Struct_GE113;

typedef struct {
	SCD_Struct_GE106 field1;
	SCD_Struct_GE113 field2;
} SCD_Struct_GE114;

typedef struct {
	unsigned field1;
	bool field2;
} SCD_Struct_GE115;

typedef struct {
	/*function pointer*/ void* field1;
	unsigned long long field2;
	unsigned short field3;
	unsigned field4;
	char* field5;
	unsigned long long field6;
	SCD_Struct_GE115 field7;
} SCD_Struct_GE116;

typedef struct {
	char* field1;
	unsigned long long field2;
	unsigned long long field3;
} SCD_Struct_GE117;

typedef struct {
	unsigned char field1;
	SCD_Struct_GE117 field2;
	bool field3;
	char* field4;
	unsigned long long field5;
	unsigned long long field6;
} SCD_Struct_GE118;

typedef struct {
	unsigned key;
	int value;
} SCD_Struct_GE119;

typedef struct {
	unsigned businessID : 1;
	unsigned uID : 1;
	unsigned centerlineCount : 1;
	unsigned centerlineStart : 1;
	unsigned endLaneWidth : 1;
	unsigned endOffset : 1;
	unsigned endRoadOffset : 1;
	unsigned entryPointMask : 1;
	unsigned formOfWay : 1;
	unsigned minzoomRank : 1;
	unsigned placeType : 1;
	unsigned roadClass : 1;
	unsigned sectionCount : 1;
	unsigned sectionStart : 1;
	unsigned speedLimit : 1;
	unsigned startLaneWidth : 1;
	unsigned startOffset : 1;
	unsigned startRoadOffset : 1;
	unsigned styleGroup : 1;
	unsigned travelDirection : 1;
	unsigned type : 1;
	unsigned polyIsConvex : 1;
} SCD_Struct_GE120;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *> > >;

typedef struct _tree<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, _GEOAltitudeTriggerData> > > {
	__tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, _GEOAltitudeTriggerData> > >;

typedef struct map<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, _GEOAltitudeTriggerData> > > {
	tree<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, _GEOAltitudeTriggerData> > > __tree_;
} map<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, _GEOAltitudeTriggerData> > >;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
} SCD_Struct_GE126;

typedef struct {
	/*function pointer*/ void* field1;
	unsigned long long field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	/*function pointer*/ void* field6;
	/*function pointer*/ void* field7;
} SCD_Struct_GE127;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge> >;

typedef struct _compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *> > {
	/*function pointer*/ void* __first_;
} compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *> >;

typedef struct _split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *> > {
	/*function pointer*/ void* __first_;
	/*function pointer*/ void* __begin_;
	/*function pointer*/ void* __end_;
	compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *> > __end_cap_;
} split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *> >;

typedef struct deque<GEORoadEdge, std::__1::allocator<GEORoadEdge> > {
	split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge> > __size_;
} deque<GEORoadEdge, std::__1::allocator<GEORoadEdge> >;

typedef struct Vec2Imp<float> {
	float x;
	float y;
} Vec2Imp<float>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<GEOTileKey> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<GEOTileKey> >;

typedef struct _compressed_pair<float, std::__1::equal_to<GEOTileKey> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<GEOTileKey> >;

typedef struct _hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> {
	__hash_node<_GEOTileKey, void *> __next_;
} hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> > > {
	hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<_GEOTileKey, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > > {
	__hash_node<_GEOTileKey, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<_GEOTileKey, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<_GEOTileKey, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > > {
	compressed_pair<std::__1::__hash_node<_GEOTileKey, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<_GEOTileKey, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > >;

typedef struct _hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > {
	unique_ptr<std::__1::__hash_node<_GEOTileKey, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<GEOTileKey> > __p2_;
	compressed_pair<float, std::__1::equal_to<GEOTileKey> > __p3_;
} hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> >;

typedef struct unordered_set<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > {
	hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > __table_;
} unordered_set<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<GEORoadEdge> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<GEORoadEdge> >;

typedef struct _compressed_pair<float, std::__1::equal_to<GEORoadEdge> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<GEORoadEdge> >;

typedef struct _hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> {
	__hash_node<GEORoadEdge, void *> __next_;
} hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> > > {
	hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<GEORoadEdge, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > > {
	__hash_node<GEORoadEdge, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<GEORoadEdge, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<GEORoadEdge, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > > {
	compressed_pair<std::__1::__hash_node<GEORoadEdge, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<GEORoadEdge, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > >;

typedef struct _hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> > {
	unique_ptr<std::__1::__hash_node<GEORoadEdge, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<GEORoadEdge> > __p2_;
	compressed_pair<float, std::__1::equal_to<GEORoadEdge> > __p3_;
} hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> >;

typedef struct unordered_set<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> > {
	hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> > __table_;
} unordered_set<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> >;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct _compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel> > {
	ZilchMapModel __first_;
} compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel> >;

typedef struct unique_ptr<geo::ZilchMapModel, std::__1::default_delete<geo::ZilchMapModel> > {
	compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel> > __ptr_;
} unique_ptr<geo::ZilchMapModel, std::__1::default_delete<geo::ZilchMapModel> >;

typedef struct shared_ptr<zilch::Message> {
	Message __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<zilch::Message>;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	SCD_Struct_GE61 field4;
} SCD_Struct_GE157;

typedef struct {
	/*function pointer*/ void* road;
	unsigned long long vertexIndexA;
	unsigned long long vertexIndexB;
	unsigned long long junctionIndexA;
	unsigned long long junctionIndexB;
	/*function pointer*/ void* junctionA;
	/*function pointer*/ void* junctionB;
} SCD_Struct_GE158;

typedef struct {
	double list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE159;

