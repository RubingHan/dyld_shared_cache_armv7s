/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:02:00 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <OfficeImport/OfficeImport-Structs.h>
#import <CoreFoundation/NSCopying.h>

@interface NSBezierPathStub : NSObject <NSCopying> {

	long long _segmentCount;
	long long _segmentMax;
	PATHSEGMENT* _head;
	long long _lastSubpathIndex;
	long long _elementCount;
	double _lineWidth;
	CGRect _controlPointBounds;
	double _miterLimit;
	double _flatness;
	double* _dashedLinePattern;
	unsigned long long _dashedLineCount;
	double _dashedLinePhase;
	void* _path;
	id _private[4];
	struct {
		unsigned _flags : 8;
		unsigned _pathState : 2;
		unsigned _unused : 22;
	}  _bpFlags;

}
+(double)lineWidth;
+(void)setLineWidth:(double)arg1 ;
+(unsigned long long)lineCapStyle;
+(void)setLineCapStyle:(unsigned long long)arg1 ;
+(unsigned long long)lineJoinStyle;
+(void)setLineJoinStyle:(unsigned long long)arg1 ;
+(double)miterLimit;
+(void)setMiterLimit:(double)arg1 ;
+(double)flatness;
+(void)setFlatness:(double)arg1 ;
+(unsigned long long)windingRule;
+(void)setWindingRule:(unsigned long long)arg1 ;
+(id)bezierPath;
+(id)bezierPathWithRect:(CGRect)arg1 ;
+(id)bezierPathWithOvalInRect:(CGRect)arg1 ;
+(void)initialize;
+(void)fillRect:(CGRect)arg1 ;
+(CGContextRef)currentCGContext;
+(void)setCurrentCGContext:(CGContextRef)arg1 ;
+(id)bezierPathWithRoundedRect:(CGRect)arg1 xRadius:(double)arg2 yRadius:(double)arg3 ;
+(void)strokeRect:(CGRect)arg1 ;
+(void)clipRect:(CGRect)arg1 ;
+(void)strokeLineFromPoint:(CGPoint)arg1 toPoint:(CGPoint)arg2 ;
+(void)drawPackedGlyphs:(const char*)arg1 atPoint:(CGPoint)arg2 ;
+(void)setDefaultMiterLimit:(double)arg1 ;
+(double)defaultMiterLimit;
+(void)setDefaultFlatness:(double)arg1 ;
+(double)defaultFlatness;
+(void)setDefaultWindingRule:(unsigned long long)arg1 ;
+(unsigned long long)defaultWindingRule;
+(void)setDefaultLineCapStyle:(unsigned long long)arg1 ;
+(unsigned long long)defaultLineCapStyle;
+(void)setDefaultLineJoinStyle:(unsigned long long)arg1 ;
+(unsigned long long)defaultLineJoinStyle;
+(void)setDefaultLineWidth:(double)arg1 ;
+(double)defaultLineWidth;
+(void)drawString:(id)arg1 atPoint:(CGPoint)arg2 withFontName:(id)arg3 andHeight:(float)arg4 color:(id)arg5 alignToTop:(bool)arg6 currentTransformStruct:(CGAffineTransform)arg7 ;
-(id)description;
-(void)_deviceMoveToPoint:(CGPoint)arg1 ;
-(void)_deviceLineToPoint:(CGPoint)arg1 ;
-(void)_deviceCurveToPoint:(CGPoint)arg1 controlPoint1:(CGPoint)arg2 controlPoint2:(CGPoint)arg3 ;
-(void)_deviceClosePath;
-(void)_doUserPathWithOp:(unsigned char)arg1 inContext:(CGContextRef)arg2 ;
-(void)_addPathSegment:(long long)arg1 point:(CGPoint)arg2 ;
-(void)dealloc;
-(CGRect)bounds;
-(id)init;
-(void)moveToPoint:(CGPoint)arg1 ;
-(void)closePath;
-(void)addClip;
-(id)copyWithZone:(NSZone)arg1 ;
-(void)removeAllPoints;
-(id)bezierPathByReversingPath;
-(bool)isEmpty;
-(CGPoint)currentPoint;
-(bool)containsPoint:(CGPoint)arg1 ;
-(void)setLineDash:(const double*)arg1 count:(long long)arg2 phase:(double)arg3 ;
-(void)getLineDash:(double*)arg1 count:(long long*)arg2 phase:(double*)arg3 ;
-(void)fill;
-(void)stroke;
-(void)lineToPoint:(CGPoint)arg1 ;
-(void)appendBezierPath:(id)arg1 ;
-(void)appendBezierPathWithRect:(CGRect)arg1 ;
-(void)appendBezierPathWithOvalInRect:(CGRect)arg1 ;
-(void)appendBezierPathWithArcWithCenter:(CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(bool)arg5 ;
-(double)lineWidth;
-(void)setLineWidth:(double)arg1 ;
-(unsigned long long)lineCapStyle;
-(void)setLineCapStyle:(unsigned long long)arg1 ;
-(unsigned long long)lineJoinStyle;
-(void)setLineJoinStyle:(unsigned long long)arg1 ;
-(double)miterLimit;
-(void)setMiterLimit:(double)arg1 ;
-(double)flatness;
-(void)setFlatness:(double)arg1 ;
-(id).cxx_construct;
-(long long)elementCount;
-(unsigned long long)elementAtIndex:(long long)arg1 ;
-(void)appendBezierPathWithRoundedRect:(CGRect)arg1 xRadius:(double)arg2 yRadius:(double)arg3 ;
-(unsigned long long)windingRule;
-(void)setWindingRule:(unsigned long long)arg1 ;
-(unsigned long long)elementAtIndex:(long long)arg1 associatedPoints:(CGPoint*)arg2 ;
-(void)subdivideBezierWithFlatness:(double)arg1 startPoint:(CGPoint)arg2 controlPoint1:(CGPoint)arg3 controlPoint2:(CGPoint)arg4 endPoint:(CGPoint)arg5 ;
-(void)flattenIntoPath:(id)arg1 ;
-(void)_doPath;
-(CGRect)controlPointBounds;
-(long long)_segmentIndexForElementIndex:(long long)arg1 ;
-(void)appendBezierPathWithArcWithCenter:(CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 ;
-(void)transformUsingAffineTransform:(id)arg1 ;
-(void)_appendArcSegmentWithCenter:(CGPoint)arg1 radius:(double)arg2 angle1:(double)arg3 angle2:(double)arg4 ;
-(void)curveToPoint:(CGPoint)arg1 controlPoint1:(CGPoint)arg2 controlPoint2:(CGPoint)arg3 ;
-(id)_copyFlattenedPath;
-(void)relativeMoveToPoint:(CGPoint)arg1 ;
-(void)relativeLineToPoint:(CGPoint)arg1 ;
-(void)relativeCurveToPoint:(CGPoint)arg1 controlPoint1:(CGPoint)arg2 controlPoint2:(CGPoint)arg3 ;
-(void)setClip;
-(id)bezierPathByFlatteningPath;
-(void)setAssociatedPoints:(CGPoint*)arg1 atIndex:(long long)arg2 ;
-(void)appendBezierPathWithPoints:(CGPoint*)arg1 count:(long long)arg2 ;
-(void)appendBezierPathWithArcFromPoint:(CGPoint)arg1 toPoint:(CGPoint)arg2 radius:(double)arg3 ;
-(int)_locationOfPoint:(CGPoint)arg1 ;
-(bool)isHitByPoint:(CGPoint)arg1 ;
-(bool)isHitByRect:(CGRect)arg1 ;
-(bool)isHitByPath:(id)arg1 ;
-(bool)isStrokeHitByPoint:(CGPoint)arg1 ;
-(bool)isStrokeHitByRect:(CGRect)arg1 ;
-(bool)isStrokeHitByPath:(id)arg1 ;
-(bool)cachesBezierPath;
-(void)setCachesBezierPath:(bool)arg1 ;
-(void)finalize;
@end

