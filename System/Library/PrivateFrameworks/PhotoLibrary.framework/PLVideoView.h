/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:02:05 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <PhotoLibrary/PhotoLibrary-Structs.h>
#import <UIKit/UIView.h>
#import <UIKit/UIMovieScrubberDelegate.h>
#import <UIKit/UIMovieScrubberDataSource.h>
#import <PhotoLibrary/PLMoviePlayerControllerDelegate.h>
#import <PhotoLibrary/PLSlalomRegionEditorDelegate.h>

@protocol PLVideoViewDelegate, OS_dispatch_queue, PLVideoOverlayButton;
@class PLManagedAsset, NSString, NSURL, PLPhotoTileViewController, PLVideoPosterFrameView, UIView, PLVideoEditingOverlayView, UIImage, NSTimer, NSDictionary, PLPhotoBakedThumbnails, AVAssetExportSession, PLProgressStack, PLMoviePlayerController, NSArray, NSLock, NSObject, NSMutableArray, UIMovieScrubber, PLSlalomRegionEditor, NSMutableDictionary, UIActivityIndicatorView, AVAsset, PLSlalomRangeMapper, UIImageView;

@interface PLVideoView : UIView <UIMovieScrubberDelegate, UIMovieScrubberDataSource, PLMoviePlayerControllerDelegate, PLSlalomRegionEditorDelegate> {

	PLManagedAsset* _videoCameraImage;
	NSString* _pathToOriginalVideo;
	NSURL* _videoURL;
	PLPhotoTileViewController* _imageTile;
	PLVideoPosterFrameView* _posterFrameView;
	UIView* _videoOverlayBackgroundView;
	PLVideoEditingOverlayView* _trimMessageView;
	UIImage* _posterFrameImage;
	UIImage* _snapshotImage;
	double _scrubberWidth;
	unsigned long long _scaleMode;
	UIView* _scrubberBackgroundView;
	UIView* _scrubberTitleView;
	NSTimer* _scrubberUpdateTimer;
	NSDictionary* _thumbnailOptionsDict;
	CGSize _thumbnailSize;
	PLPhotoBakedThumbnails* _bakedLandscapeThumbnails;
	PLPhotoBakedThumbnails* _bakedPortraitThumbnails;
	AVAssetExportSession* _exportSession;
	double _remakerStartTime;
	double _remakerEndTime;
	NSString* _trimmedPath;
	NSString* _videoPathAfterTrim;
	NSTimer* _trimProgressTimer;
	PLManagedAsset* _trimmedVideoClip;
	PLProgressStack* _trimProgressStack;
	float _progress;
	long long _interfaceOrientation;
	PLMoviePlayerController* _moviePlayer;
	long long _orientationWhenLastDisplayed;
	<PLVideoViewDelegate>* _delegate;
	double _maximumTrimLength;
	double _lastScrubbedValue;
	double _lastActualValue;
	double _duration;
	double _cachedCurrentPlaybackTime;
	NSArray* _imageGenerators;
	NSLock* _thumbnailReqlock;
	NSObject<OS_dispatch_queue>* _thumbnailReqQueue;
	AVAssetExportSession* _airplayExportSession;
	bool _isAirPlay;
	unsigned _showsPlayButton : 1;
	unsigned _showsScrubber : 1;
	unsigned _canEdit : 1;
	unsigned _loadMediaImmediately : 1;
	unsigned _scrubberIsSubview : 1;
	unsigned _viewWillAppear : 1;
	unsigned _didLayout : 1;
	unsigned _wasPlayingBeforeScrub : 1;
	unsigned _playFromBeginning : 1;
	unsigned _needsReloadScrubberThumbnails : 1;
	unsigned _playing : 1;
	unsigned _editing : 1;
	unsigned _disableEditAfterTrim : 1;
	unsigned _scrubbing : 1;
	unsigned _scrubbingToRight : 1;
	unsigned _deleteOriginalFile : 1;
	unsigned _passthroughTrimming : 1;
	unsigned _preparingMoviePlayer : 1;
	unsigned _preparedMoviePlayer : 1;
	unsigned _isMoviePlayerActive : 1;
	unsigned _moviePlayerIsReady : 1;
	unsigned _moviePlayerIsReadyForDisplay : 1;
	unsigned _moviePlayerDidBuffer : 1;
	unsigned _showingOverlay : 1;
	unsigned _showingScrubber : 1;
	unsigned _showScrubberWhenMovieIsReady : 1;
	unsigned _playbackDidBegin : 1;
	unsigned _loadScrubberThumbnails : 1;
	unsigned _videoIsLandscape : 1;
	unsigned _canCreateMetadata : 1;
	unsigned _createPreviewPosterFrame : 1;
	unsigned _startedDeliveringNotificationsToMainThread : 1;
	unsigned _isTrimming : 1;
	unsigned _wasTrimmedInPlace : 1;
	unsigned _remakingFailed : 1;
	NSMutableArray* _summaryThumbnailRequestTimestamps;
	NSMutableArray* _detailThumbnailRequestTimestamps;
	UIMovieScrubber* _scrubber;
	PLSlalomRegionEditor* _slalomRegionEditor;
	NSMutableDictionary* _cachedThumbnails;
	NSArray* _landscapeSummaryThumbnailTimestamps;
	NSArray* _portraitSummaryThumbnailTimestamps;
	UIActivityIndicatorView* _spinner;
	UIActivityIndicatorView* _shadowSpinner;
	UIView<PLVideoOverlayButton>* _videoOverlayPlayButton;
	bool _allowSlalomEditor;
	bool _prepareMoviePlayerForScrubberAutomatically;
	bool _shouldPlayVideoWhenViewAppears;
	bool __didInsertMoviePlayerView;
	bool __didEditSlalom;
	AVAsset* __slalomOriginalAsset;
	NSArray* __slalomRegions;
	PLSlalomRangeMapper* __slalomTimeRangeMapper;

}

@property (nonatomic,readonly) NSString * pathForVideoFile; 
@property (assign,nonatomic) <PLVideoViewDelegate> * delegate; 
@property (assign,nonatomic) PLPhotoTileViewController * imageTile; 
@property (nonatomic,readonly) PLManagedAsset * videoCameraImage; 
@property (nonatomic,readonly) long long interfaceOrientation;                                                            //@synthesize interfaceOrientation=_interfaceOrientation - In the implementation block
@property (nonatomic,retain) PLManagedAsset * trimmedVideoClip; 
@property (assign,nonatomic) bool allowSlalomEditor;                                                                      //@synthesize allowSlalomEditor=_allowSlalomEditor - In the implementation block
@property (nonatomic,readonly) UIView * scrubberBackgroundView;                                                           //@synthesize scrubberBackgroundView=_scrubberBackgroundView - In the implementation block
@property (nonatomic,readonly) UIImage * posterFrameImage; 
@property (nonatomic,readonly) PLVideoPosterFrameView * posterFrameView;                                                  //@synthesize posterFrameView=_posterFrameView - In the implementation block
@property (nonatomic,readonly) double duration; 
@property (assign,getter=isEditing,nonatomic) bool editing; 
@property (nonatomic,readonly) double startTime; 
@property (nonatomic,readonly) double endTime; 
@property (nonatomic,readonly) NSString * videoPathAfterTrim; 
@property (nonatomic,readonly) UIImageView * previewImageView; 
@property (assign,nonatomic) bool showsPlayOverlay; 
@property (assign,nonatomic) bool showsScrubber; 
@property (assign,nonatomic) bool prepareMoviePlayerForScrubberAutomatically;                                             //@synthesize prepareMoviePlayerForScrubberAutomatically=_prepareMoviePlayerForScrubberAutomatically - In the implementation block
@property (assign,nonatomic) bool loadMediaImmediately; 
@property (assign,nonatomic) bool shouldPlayVideoWhenViewAppears;                                                         //@synthesize shouldPlayVideoWhenViewAppears=_shouldPlayVideoWhenViewAppears - In the implementation block
@property (assign,nonatomic) bool canEdit; 
@property (assign,nonatomic) bool scrubberIsSubview; 
@property (assign,nonatomic) double scrubberWidth;                                                                        //@synthesize scrubberWidth=_scrubberWidth - In the implementation block
@property (assign,nonatomic) double currentTime; 
@property (nonatomic,retain) PLProgressStack * trimProgressStack;                                                         //@synthesize trimProgressStack=_trimProgressStack - In the implementation block
@property (nonatomic,readonly) NSString * _pathForOriginalFile; 
@property (nonatomic,readonly) NSString * _pathForVideoPreviewFile; 
@property (nonatomic,readonly) NSString * _pathForPrebakedLandscapeScrubberThumbnails; 
@property (nonatomic,readonly) NSString * _pathForPrebakedPortraitScrubberThumbnails; 
@property (nonatomic,readonly) bool _mediaIsPlayable; 
@property (nonatomic,readonly) bool _didSetPhotoData; 
@property (assign,nonatomic) bool _didInsertMoviePlayerView;                                                              //@synthesize _didInsertMoviePlayerView=__didInsertMoviePlayerView - In the implementation block
@property (setter=_setSlalomOriginalAsset:,nonatomic,retain) AVAsset * _slalomOriginalAsset;                              //@synthesize _slalomOriginalAsset=__slalomOriginalAsset - In the implementation block
@property (setter=_setSlalomRegions:,nonatomic,retain) NSArray * _slalomRegions;                                          //@synthesize _slalomRegions=__slalomRegions - In the implementation block
@property (setter=_setSlalomTimeRangeMapper:,nonatomic,retain) PLSlalomRangeMapper * _slalomTimeRangeMapper;              //@synthesize _slalomTimeRangeMapper=__slalomTimeRangeMapper - In the implementation block
@property (assign,setter=_setDidEditSlalom:,nonatomic) bool _didEditSlalom;                                               //@synthesize _didEditSlalom=__didEditSlalom - In the implementation block
+(id)videoViewForVideoFileAtURL:(id)arg1 ;
+(void)_enqueueOverlayPlayButton:(id)arg1 ;
+(id)_dequeueOverlayPlayButton;
-(void)viewDidAppear;
-(void)play;
-(double)currentTime;
-(void)setCurrentTime:(double)arg1 ;
-(void)toggleScaleMode:(float)arg1 ;
-(bool)isPlaying;
-(void)moviePlayerHeadsetPlayPausePressed:(id)arg1 ;
-(void)moviePlayerHeadsetNextTrackPressed:(id)arg1 ;
-(void)moviePlayerHeadsetPreviousTrackPressed:(id)arg1 ;
-(void)moviePlayerBufferingStateDidChange:(id)arg1 ;
-(void)moviePlayerReadyToPlay:(id)arg1 ;
-(void)moviePlayerPlaybackStateDidChange:(id)arg1 fromPlaybackState:(unsigned long long)arg2 ;
-(void)moviePlayerPlaybackRateDidChange:(id)arg1 ;
-(void)moviePlayerDurationAvailable:(id)arg1 ;
-(void)moviePlayerPlaybackDidEnd:(id)arg1 ;
-(bool)moviePlayerExitRequest:(id)arg1 exitReason:(int)arg2 ;
-(void)_screenDidConnect:(id)arg1 ;
-(void)_screenDidDisconnect:(id)arg1 ;
-(void)dealloc;
-(void)setDelegate:(id)arg1 ;
-(id)hitTest:(CGPoint)arg1 withEvent:(id)arg2 ;
-(void)setFrame:(CGRect)arg1 ;
-(void)layoutSubviews;
-(id)description;
-(id)delegate;
-(double)duration;
-(long long)interfaceOrientation;
-(void)touchesEnded:(id)arg1 withEvent:(id)arg2 ;
-(void)didMoveToSuperview;
-(void)willMoveToSuperview:(id)arg1 ;
-(void)setProgress:(id)arg1 ;
-(bool)isEditing;
-(void)setEditing:(bool)arg1 animated:(bool)arg2 ;
-(void)setEditing:(bool)arg1 ;
-(void)viewWillAppear:(bool)arg1 ;
-(void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2 ;
-(void)_setDuration:(double)arg1 ;
-(void)_reset;
-(void)movieScrubber:(id)arg1 requestThumbnailImageForTimestamp:(id)arg2 isSummaryThumbnail:(bool)arg3 ;
-(void)movieScrubber:(id)arg1 valueDidChange:(double)arg2 ;
-(void)movieScrubber:(id)arg1 editingStartValueDidChange:(double)arg2 ;
-(void)movieScrubber:(id)arg1 editingEndValueDidChange:(double)arg2 ;
-(void)movieScrubberWillBeginRequestingThumbnails:(id)arg1 ;
-(void)movieScrubberDidFinishRequestingThumbnails:(id)arg1 ;
-(void)movieScrubberWillBeginEditing:(id)arg1 ;
-(void)movieScrubberDidCancelEditing:(id)arg1 ;
-(void)movieScrubberDidBeginEditing:(id)arg1 ;
-(void)movieScrubberEditingAnimationFinished:(id)arg1 ;
-(void)movieScrubber:(id)arg1 widthDelta:(float)arg2 originXDelta:(float)arg3 ;
-(void)movieScrubberDidBeginAnimatingZoom:(id)arg1 ;
-(void)movieScrubberDidEndAnimatingZoom:(id)arg1 ;
-(void)movieScrubber:(id)arg1 willZoomToMinimumValue:(double)arg2 maximumValue:(double)arg3 ;
-(double)movieScrubberDuration:(id)arg1 ;
-(void)movieScrubberDidBeginScrubbing:(id)arg1 withHandle:(int)arg2 ;
-(void)movieScrubberDidEndScrubbing:(id)arg1 withHandle:(int)arg2 ;
-(id)movieScrubber:(id)arg1 evenlySpacedTimestamps:(int)arg2 startingAt:(id)arg3 endingAt:(id)arg4 ;
-(void)movieScrubber:(id)arg1 requestThumbnailImageForTimestamp:(id)arg2 ;
-(double)movieScrubberThumbnailAspectRatio:(id)arg1 ;
-(void)setMaximumTrimLength:(double)arg1 ;
-(double)startTime;
-(void)stop;
-(void)pause;
-(void)setCanEdit:(bool)arg1 ;
-(void)setPrepareMoviePlayerForScrubberAutomatically:(bool)arg1 ;
-(void)setShowsPlayOverlay:(bool)arg1 ;
-(void)setLoadMediaImmediately:(bool)arg1 ;
-(bool)playingToAirTunes;
-(bool)playingToVideoOut;
-(void)forceStop;
-(bool)isTrimming;
-(void)removeVideoOverlay;
-(bool)deleteOriginalFileAfterTrim;
-(void)setShowsScrubber:(bool)arg1 ;
-(id)imageTile;
-(id)videoCameraImage;
-(id)newPreviewImageData:(id*)arg1 ;
-(void)trimUsingMode:(int)arg1 saveACopy:(bool)arg2 ;
-(id)videoPathAfterTrim;
-(id)trimmedVideoClip;
-(bool)shouldShowCopyCalloutAtPoint:(CGPoint)arg1 ;
-(id)initWithFrame:(CGRect)arg1 videoCameraImage:(id)arg2 orientation:(long long)arg3 ;
-(void)setImageTile:(id)arg1 ;
-(void)setScrubberIsSubview:(bool)arg1 ;
-(id)scrubberBackgroundView;
-(void)hideTrimMessage;
-(void)showTrimMessage:(id)arg1 withBottomY:(float)arg2 ;
-(id)previewImageView;
-(id)_initWithFrame:(CGRect)arg1 videoCameraImage:(id)arg2 orientation:(long long)arg3 ;
-(bool)_canAccessVideo;
-(void)_tearDownMoviePlayer;
-(void)setTrimProgressStack:(id)arg1 ;
-(void)_clearImageGenerators;
-(void)_cancelAirplayExportSession;
-(bool)_playerIsAirplay;
-(void)_setupMoviePlayerIfNecessary;
-(bool)_didInsertMoviePlayerView;
-(void)_hideTrimMessageView:(bool)arg1 ;
-(bool)_shouldShowSlalomEditor;
-(double)_scrubberBackgroundHeight;
-(double)scrubberWidth;
-(bool)canEdit;
-(void)_updateSlalomRegionEditor;
-(void)_updateForEditing;
-(bool)allowSlalomEditor;
-(bool)_mediaIsPlayable;
-(void)playButtonClicked:(id)arg1 ;
-(void)_videoOverlayFadeOutDidFinish;
-(void)_updateScrubberFrame;
-(void)_playbackFinished;
-(bool)_mediaIsStreamedVideo;
-(void)_verifyOrRestartPlayback;
-(void)_displayPlaySpinner;
-(void)_updateSnapshotImage;
-(void)_didBeginPlayback;
-(void)_removePlaySpinner;
-(id)_thumbnailSourceAsset;
-(void)_configureImageGenerator:(id)arg1 thumbnailSize:(CGSize)arg2 forSummaryThumbnails:(bool)arg3 ;
-(void)_savePreviewPosterFrameImage:(CGImageRef)arg1 ;
-(id)_pathForVideoPreviewFile;
-(void)_insertMoviePlayerViewIfNecessary;
-(void)_updateScaleModeForSize:(CGSize)arg1 ;
-(void)_requestPreviewPosterFrameForVideoSize:(CGSize)arg1 ;
-(void)_setNeedsReloadScrubberThumbnails:(bool)arg1 ;
-(void)_updateScrubberVisibilityWithDuration:(double)arg1 ;
-(void)_updatePosterFrameVisibility;
-(bool)_canPlayStreamedVideoWithLocalVideo;
-(bool)_didSetPhotoData;
-(bool)_shouldPlayFlattenedVideo;
-(bool)_isFlattenedVideoUpToDate;
-(id)_filePathForFlattenedVideo;
-(bool)_prepareMoviePlayerIfNeeded;
-(void)_flattenVideoWithCompletionHandler:(/*^block*/ id)arg1 ;
-(id)_pathForOriginalFile;
-(bool)_canCreateMetadata;
-(id)_assetForVideoPath:(id)arg1 ;
-(void)_setSlalomOriginalAsset:(id)arg1 ;
-(void)_updateSlalomRegions:(id)arg1 forceSetAsset:(bool)arg2 ;
-(void)_setSlalomRegions:(id)arg1 ;
-(void)_setSlalomTimeRangeMapper:(id)arg1 ;
-(id)_slalomOriginalAsset;
-(double)_movieTimeFromScrubberTime:(double)arg1 ;
-(void)_scrubToMovieTime:(double)arg1 ;
-(void)_setMoviePlayerActive:(bool)arg1 ;
-(void)_setPlaybackDidBegin:(bool)arg1 ;
-(void)setShowsScrubber:(bool)arg1 duration:(double)arg2 ;
-(void)_showVideoOverlay;
-(double)_movieScrubberDuration;
-(double)_scrubberStartTime;
-(id)_pathForPrebakedLandscapeScrubberThumbnails;
-(id)_pathForPrebakedPortraitScrubberThumbnails;
-(void)_addThumbnailRequestForTimestamp:(id)arg1 isSummaryThumbnail:(bool)arg2 ;
-(id)_loadThumbnailsIntoDictionary:(id)arg1 isLandscape:(bool)arg2 aspectRatio:(float)arg3 ;
-(void)_updateScrubberValue;
-(void)_removeScrubberUpdateTimer;
-(void)_hideVideoOverlay:(bool)arg1 ;
-(void)_invalidateSnapshotImage;
-(void)_didScrubToValue:(double)arg1 withHandle:(int)arg2 ;
-(void)_serviceImageGenerationRequests;
-(double)_thumbnailTimeFromScrubberTime:(double)arg1 ;
-(void)_saveCachedThumbnailsIfNecessary;
-(void)_setPlaying:(bool)arg1 ;
-(void)_resetSlalomData;
-(void)_scrubberAnimationFinished;
-(void)setTrimmedVideoClip:(id)arg1 ;
-(void)_informDelegateAboutProgressChange:(float)arg1 ;
-(void)_stopDeliveringNotifications;
-(void)_updateTrimProgress;
-(id)trimProgressStack;
-(void)_trimProgressChanged:(id)arg1 ;
-(void)cancelTrim;
-(void)_removeTrimProgressTimer;
-(void)_startDeliveringNotificationsToMainThread;
-(void)_thumbnailsWereRegenerated:(id)arg1 error:(id)arg2 contextInfo:(void*)arg3 ;
-(bool)_canEditDuration:(double)arg1 ;
-(void)_exportCompletedWithSuccess:(bool)arg1 ;
-(void)_resetTrimProgressTimer;
-(void)_resetScrubberUpdateTimer;
-(void)_createScrubberIfNeeded;
-(void)_reloadScrubberThumbnailsIfNeeded;
-(void)_updatePosterImageView;
-(bool)loadMediaImmediately;
-(id)_videoSnapshot;
-(bool)_mediaIsVideo;
-(double)_scrubberTimeFromMovieTime:(double)arg1 ;
-(bool)_scrubberTimeNeedsMapping;
-(id)_slalomTimeRangeMapper;
-(void)_handleScreenConnectionChange:(bool)arg1 ;
-(id)_slalomRegions;
-(void)_scrubToSlalomRegionEditorStartHandle:(bool)arg1 ;
-(bool)_didEditSlalom;
-(void)_setDidEditSlalom:(bool)arg1 ;
-(id)_filePathForFlattenedVideoMetadata;
-(id)_readMetadataFromPath:(id)arg1 ;
-(id)_metadataForFlattenedVideo;
-(void)_deleteFileAtPath:(id)arg1 ;
-(void)_writeMetadata:(id)arg1 toPath:(id)arg2 ;
-(void)moviePlayerControllerDidBecomeActiveController:(id)arg1 ;
-(void)moviePlayerControllerWillResignAsActiveController:(id)arg1 ;
-(void)moviePlayerReadyToDisplay:(id)arg1 ;
-(void)moviePlayerUpdatedDestinationPlaceholder:(id)arg1 ;
-(void)moviePlayerWasSuspendedDuringPlayback:(id)arg1 ;
-(void)moviePlayerEncounteredAuthenticationError:(id)arg1 ;
-(bool)moviePlayerControllerShouldAllowExternalPlayback:(id)arg1 ;
-(void)moviePlayerDidChangeExternalPlaybackType:(id)arg1 ;
-(id)moviePlayerRequestsPickedAirplayRoute:(id)arg1 ;
-(void)slalomRegionEditorDidBeginEditing:(id)arg1 withStartHandle:(bool)arg2 ;
-(void)slalomRegionEditorDidEndEditing:(id)arg1 ;
-(void)slalomRegionEditorStartValueChanged:(id)arg1 ;
-(void)slalomRegionEditorEndValueChanged:(id)arg1 ;
-(bool)slalomRegionEditorRequestForceZoom:(id)arg1 ;
-(void)slalomRegionEditorRequestForceUnzoom:(id)arg1 ;
-(id)videoOverlayPlayButton;
-(id)movieScrubber:(id)arg1 timestampsStartingAt:(id)arg2 endingAt:(id)arg3 maxCount:(int)arg4 ;
-(void)importerFinishedProcessingTrimmedVideo:(id)arg1 ;
-(bool)wasTrimmedInPlace;
-(void)handleDoubleTap;
-(void)viewDidDisappear;
-(void)setPosterFrameImage:(id)arg1 ;
-(id)posterFrameImage;
-(bool)showsPlayOverlay;
-(bool)showsScrubber;
-(bool)scrubberIsSubview;
-(id)_moviePlayer;
-(void)setScrubberWidth:(double)arg1 ;
-(void)setAllowSlalomEditor:(bool)arg1 ;
-(bool)prepareMoviePlayerForScrubberAutomatically;
-(void)set_didInsertMoviePlayerView:(bool)arg1 ;
-(id)pathForVideoFile;
-(void)_networkReachabilityDidChange:(id)arg1 ;
-(void)_cancelRemaking:(id)arg1 ;
-(bool)shouldPlayVideoWhenViewAppears;
-(void)setShouldPlayVideoWhenViewAppears:(bool)arg1 ;
-(id)posterFrameView;
-(id)videoScrubber;
-(void)prepareMoviePlayer;
-(id)slalomRegionEditor;
-(double)endTime;
@end

