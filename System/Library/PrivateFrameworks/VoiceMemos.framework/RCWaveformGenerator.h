/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:03:16 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_dispatch_semaphore, OS_dispatch_queue;
#import <VoiceMemos/VoiceMemos-Structs.h>
@class NSObject, NSMutableArray, NSMutableDictionary, RCExtAudioFilePipe, NSOperationQueue, NSError;

@interface RCWaveformGenerator : NSObject {

	long long _state;
	NSObject<OS_dispatch_semaphore>* _digestPausedSemaphore;
	NSObject<OS_dispatch_queue>* _queue;
	NSObject<OS_dispatch_queue>* _notificationQueue;
	double _totalDigestedTime;
	double _totalFlushedTime;
	NSMutableArray* _weakObservers;
	NSMutableDictionary* _internalFinishedLoadingBlocksByUUID;
	RCExtAudioFilePipe* _activeExtAudioFile;
	NSOperationQueue* _loadingQueue;
	PowerMeter _samplePowerMeter;
	bool _isSampleRateKnown;
	vector<float, std::__1::allocator<float> >* _powerLevelBuffer;
	unsigned long long _powerLevelsConsumedSinceLastFlush;
	unsigned long long _framesConsumedSinceLastFlush;
	long long _framesNeededForNextDB;
	long long _framesNeededForNextFlush;
	NSError* _loadingError;
	unsigned long long _pauseCount;
	bool _canceled;
	double _segmentFlushInterval;
	long long _overviewUnitsPerSecond;

}

@property (nonatomic,readonly) double segmentFlushInterval;                 //@synthesize segmentFlushInterval=_segmentFlushInterval - In the implementation block
@property (assign,nonatomic) long long overviewUnitsPerSecond;              //@synthesize overviewUnitsPerSecond=_overviewUnitsPerSecond - In the implementation block
@property (nonatomic,readonly) long long state;                             //@synthesize state=_state - In the implementation block
@property (nonatomic,readonly) bool canceled;                               //@synthesize canceled=_canceled - In the implementation block
@property (nonatomic,readonly) bool loadable; 
@property (assign,nonatomic) bool paused; 
@property (nonatomic,readonly) double totalDigestedTime; 
@property (nonatomic,readonly) double totalFlushedTime; 
-(bool)_isCanceled;
-(long long)state;
-(void)setPaused:(bool)arg1 ;
-(id).cxx_construct;
-(void).cxx_destruct;
-(bool)paused;
-(void)removeSegmentOutputObserver:(id)arg1 ;
-(void)addSegmentOutputObserver:(id)arg1 ;
-(double)totalDigestedTime;
-(id)initWithSegmentFlushInterval:(double)arg1 ;
-(long long)overviewUnitsPerSecond;
-(void)setOverviewUnitsPerSecond:(long long)arg1 ;
-(void)_appendPowerMeterValuesFromSampleBuffer:(opaqueCMSampleBufferRef)arg1 ;
-(void)_appendAveragePowerLevel:(float)arg1 ;
-(void)_appendPowerMeterValuesFromDataInAudioFile:(id)arg1 ;
-(void)_appendAveragePowerLevelsByDigestingWaveform:(id)arg1 ;
-(void)_performObserversBlock:(/*^block*/ id)arg1 ;
-(void)_finishLoadingByTerminating:(bool)arg1 beforeDate:(id)arg2 loadingFinishedBlock:(/*^block*/ id)arg3 ;
-(void)_performLoadingFinishedBlock:(/*^block*/ id)arg1 internalBlockUUID:(id)arg2 isTimeout:(bool)arg3 ;
-(void)_performInternalFinishedLoadingBlocksAndFinishObservers;
-(id)_onQueueCopySegmentOutputObservers;
-(void)_onLoadingQueue_pushAveragePowerLevel:(float)arg1 ;
-(void)_onLoadingQueue_appendPowerMeterValuesFromRawAudioData:(void*)arg1 frameCount:(long long)arg2 format:(const AudioStreamBasicDescription*)arg3 isPredigest:(bool)arg4 ;
-(void)_onLoadingQueue_flushRemainingData;
-(id)initWithSamplingParametersFromGenerator:(id)arg1 ;
-(void)_appendAveragePowerLevelsByDigestingTimeRange:(SCD_Struct_RC0)arg1 inExtAudioFile:(id)arg2 sourceFormat:(AudioStreamBasicDescription*)arg3 outputFormat:(AudioStreamBasicDescription*)arg4 ;
-(void)finishLoadingBeforeDate:(id)arg1 loadingFinishedBlock:(/*^block*/ id)arg2 ;
-(void)_onLoadingQueue_appendSegment:(id)arg1 ;
-(void)_onLoadingQueue_flushWithNextSegmentWithEndTime:(double)arg1 isPredigest:(bool)arg2 ;
-(void)_onLoadingQueue_digestAveragePowerLevel:(float)arg1 ;
-(void)_onLoadingQueue_flushWaveformSegment:(id)arg1 ;
-(bool)appendAveragePowerLevelsByDigestingSampleBuffer:(opaqueCMSampleBufferRef)arg1 ;
-(bool)appendAveragePowerLevel:(float)arg1 ;
-(bool)appendAveragePowerLevelsByDigestingContentsAudioFileURL:(id)arg1 ;
-(bool)appendAveragePowerLevelsByDigestingWaveform:(id)arg1 ;
-(bool)loadable;
-(void)beginLoading;
-(void)terminateLoadingImmediately;
-(double)totalFlushedTime;
-(id)synchronouslyApproximateWaveformSegmentsByReadingAheadTimeRange:(SCD_Struct_RC0)arg1 ;
-(double)segmentFlushInterval;
-(bool)canceled;
@end

