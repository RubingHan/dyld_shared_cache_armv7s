/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:03:06 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <UIFoundation/UIFoundation-Structs.h>
#import <CoreFoundation/NSCoding.h>
#import <UIFoundation/NSGlyphStorage.h>

@protocol NSTextContainerView;
@class NSTextStorage, NSGlyphGenerator, NSTypesetter, NSMutableArray, NSStorage, NSRunStorage, NSTextContainer, UIView, UIFont, NSArray;

@interface NSLayoutManager : NSObject <NSCoding, NSGlyphStorage> {

	NSTextStorage* _textStorage;
	NSGlyphGenerator* _glyphGenerator;
	NSTypesetter* _typesetter;
	NSMutableArray* _textContainers;
	NSStorage* _containerUsedRects;
	NSRunStorage* _containerRuns;
	NSTextContainer* _extraLineFragmentContainer;
	struct {
		unsigned containersAreFull : 1;
		unsigned glyphsMightDrawOutsideLines : 1;
		unsigned backgroundLayoutEnabled : 1;
		unsigned resizingInProgress : 1;
		unsigned allowScreenFonts : 1;
		unsigned cachedRectArrayInUse : 1;
		unsigned displayInvalidationInProgress : 1;
		unsigned insertionPointNeedsUpdate : 1;
		unsigned layoutManagerInDirtyList : 1;
		unsigned originalFontOverride : 1;
		unsigned showInvisibleCharacters : 1;
		unsigned showControlCharacters : 1;
		unsigned delegateRespondsToDidInvalidate : 1;
		unsigned delegateRespondsToDidComplete : 1;
		unsigned glyphFormat : 2;
		unsigned textStorageRespondsToIsEditing : 1;
		unsigned notifyEditedInProgress : 1;
		unsigned containersChanged : 1;
		unsigned isGeneratingGlyphs : 1;
		unsigned hasNonGeneratedGlyphData : 1;
		unsigned loggedBGLayoutException : 1;
		unsigned syncAlignmentToDirection : 1;
		unsigned defaultAttachmentScaling : 2;
		unsigned usesFontLeading : 1;
		unsigned seenRightToLeft : 1;
		unsigned ignoresViewTransformations : 1;
		unsigned needToFlushGlyph : 1;
		unsigned flipsIfNeeded : 1;
		unsigned allowNonContig : 1;
		unsigned useNonContig : 1;
		unsigned inBackgroundLayout : 1;
	}  _lmFlags;
	id _delegate;
	unsigned short _textViewResizeDisableStack;
	unsigned short _displayInvalidationDisableStack;
	NSRange _deferredDisplayCharRange;
	UIView<NSTextContainerView>* _firstTextView;
	CGRect* _cachedRectArray;
	unsigned long long _cachedRectArrayCapacity;
	char* _glyphBuffer;
	unsigned long long _glyphBufferSize;
	NSRange _cachedLocationNominalGlyphRange;
	unsigned long long _cachedLocationGlyphIndex;
	CGPoint _cachedLocation;
	NSRange _cachedFontCharRange;
	UIFont* _cachedFont;
	unsigned long long _firstUnlaidGlyphIndex;
	unsigned long long _firstUnlaidCharIndex;
	NSRange _newlyFilledGlyphRange;
	id _extraData;

}

@property (assign) bool allowsOriginalFontMetricsOverride; 
@property (assign,nonatomic) NSTextStorage * textStorage; 
@property (nonatomic,readonly) NSArray * textContainers; 
@property (assign,nonatomic) <NSLayoutManagerDelegate> * delegate; 
@property (assign,nonatomic) bool showsInvisibleCharacters; 
@property (assign,nonatomic) bool showsControlCharacters; 
@property (assign,nonatomic) double hyphenationFactor; 
@property (assign,nonatomic) bool usesFontLeading; 
@property (assign,nonatomic) bool allowsNonContiguousLayout; 
@property (nonatomic,readonly) bool hasNonContiguousLayout; 
@property (nonatomic,readonly) unsigned long long numberOfGlyphs; 
@property (nonatomic,readonly) CGRect extraLineFragmentRect; 
@property (nonatomic,readonly) CGRect extraLineFragmentUsedRect; 
@property (nonatomic,readonly) NSTextContainer * extraLineFragmentTextContainer; 
+(id)_defaultLinkAttributes;
+(void)initialize;
+(bool)_usesScreenFonts;
+(bool)_ignoresViewTransformations;
+(bool)_showsInvisibleCharacters;
+(bool)_showsControlCharacters;
-(id)_commonTextViewController;
-(void)coordinateAccess:(/*^block*/ id)arg1 ;
-(double)baselineOffsetForGlyphAtIndex:(unsigned long long)arg1 ;
-(void)_setDrawsDebugBaselines:(bool)arg1 ;
-(bool)_drawsDebugBaselines;
-(NSRange)rangeOfCharacterClusterAtIndex:(unsigned long long)arg1 type:(long long)arg2 ;
-(bool)_drawsUnderlinesLikeWebKit;
-(NSRange)_primitiveCharacterRangeForGlyphRange:(NSRange)arg1 ;
-(NSRange)_blockRangeForCharRange:(NSRange)arg1 ;
-(NSRange)_primitiveGlyphRangeForCharacterRange:(NSRange)arg1 ;
-(NSRange)_blockRowRangeForCharRange:(NSRange)arg1 completeRows:(bool*)arg2 ;
-(NSRange)_blockRowRangeForCharRange:(NSRange)arg1 ;
-(unsigned long long)_glyphIndexForCharacterIndex:(unsigned long long)arg1 startOfRange:(bool)arg2 okToFillHoles:(bool)arg3 considerNulls:(bool)arg4 ;
-(void)_fillGlyphHoleForCharacterRange:(NSRange)arg1 startGlyphIndex:(unsigned long long)arg2 desiredNumberOfCharacters:(unsigned long long)arg3 ;
-(bool)_doOptimizedLayoutStartingAtGlyphIndex:(unsigned long long)arg1 forCharacterRange:(NSRange)arg2 inTextContainer:(id)arg3 lineLimit:(unsigned long long)arg4 nextGlyphIndex:(unsigned long long*)arg5 ;
-(void)_invalidateGlyphsForExtendedCharacterRange:(NSRange)arg1 changeInLength:(long long)arg2 includeBlocks:(bool)arg3 ;
-(void)_doLayoutWithFullContainerStartingAtGlyphIndex:(unsigned long long)arg1 nextGlyphIndex:(unsigned long long*)arg2 ;
-(void)_invalidateLayoutForExtendedCharacterRange:(NSRange)arg1 isSoft:(bool)arg2 invalidateUsage:(bool)arg3 ;
-(void)_invalidateUsageForTextContainersInRange:(NSRange)arg1 ;
-(void)_resizeTextViewForTextContainer:(id)arg1 ;
-(void)_invalidateInsertionPoint;
-(void)_invalidateDisplayIfNeeded;
-(void)_invalidateLayoutForExtendedCharacterRange:(NSRange)arg1 isSoft:(bool)arg2 ;
-(void)_fillLayoutHoleForCharacterRange:(NSRange)arg1 desiredNumberOfLines:(unsigned long long)arg2 isSoft:(bool)arg3 ;
-(unsigned long long)_smallEncodingGlyphIndexForCharacterIndex:(unsigned long long)arg1 startOfRange:(bool)arg2 okToFillHoles:(bool)arg3 considerNulls:(bool)arg4 ;
-(void)_mergeLayoutHoles;
-(void)_fillLayoutHoleAtIndex:(unsigned long long)arg1 desiredNumberOfLines:(unsigned long long)arg2 ;
-(id)_lineFragmentDescriptionForGlyphRange:(NSRange)arg1 includeGlyphLocations:(bool)arg2 ;
-(id)_lineFragmentDescription:(bool)arg1 ;
-(id)_glyphDescriptionForGlyphRange:(NSRange)arg1 ;
-(unsigned long long)_indexOfFirstGlyphInTextContainer:(id)arg1 okToFillHoles:(bool)arg2 ;
-(void)_recalculateUsageForTextContainerAtIndex:(unsigned long long)arg1 ;
-(void)_growCachedRectArrayToSize:(unsigned long long)arg1 ;
-(CGRect*)_rectArrayForRange:(NSRange)arg1 withinSelectionRange:(NSRange)arg2 rangeIsCharRange:(bool)arg3 singleRectOnly:(bool)arg4 fullLineRectsOnly:(bool)arg5 inTextContainer:(id)arg6 rectCount:(unsigned long long*)arg7 rangeWithinContainer:(NSRange*)arg8 glyphsDrawOutsideLines:(bool*)arg9 rectArray:(CGRect*)arg10 rectArrayCapacity:(unsigned long long)arg11 ;
-(CGRect*)_rectArrayForRange:(NSRange)arg1 withinSelectionRange:(NSRange)arg2 rangeIsCharRange:(bool)arg3 singleRectOnly:(bool)arg4 fullLineRectsOnly:(bool)arg5 inTextContainer:(id)arg6 rectCount:(unsigned long long*)arg7 rangeWithinContainer:(NSRange*)arg8 glyphsDrawOutsideLines:(bool*)arg9 ;
-(NSRange)_glyphRangeForCharacterRange:(NSRange)arg1 actualCharacterRange:(NSRange*)arg2 okToFillHoles:(bool)arg3 ;
-(NSRange)_firstPassGlyphRangeForBoundingRect:(CGRect)arg1 inTextContainer:(id)arg2 hintGlyphRange:(NSRange)arg3 okToFillHoles:(bool)arg4 ;
-(NSRange)_firstPassGlyphRangeForBoundingRect:(CGRect)arg1 inTextContainer:(id)arg2 okToFillHoles:(bool)arg3 ;
-(void)_noteFirstTextViewVisibleCharacterRangeIfAfterIndex:(unsigned long long)arg1 ;
-(void)_setRowArrayCache:(id)arg1 ;
-(void)_markSelfAsDirtyForBackgroundLayout:(id)arg1 ;
-(bool)_hasSeenRightToLeft;
-(void)showAttachment:(id)arg1 inRect:(CGRect)arg2 textContainer:(id)arg3 characterIndex:(unsigned long long)arg4 ;
-(void)setBaselineOffset:(double)arg1 forGlyphAtIndex:(unsigned long long)arg2 ;
-(void)_invalidateGlyphsForExtendedCharacterRange:(NSRange)arg1 changeInLength:(long long)arg2 ;
-(void)_mergeGlyphHoles;
-(NSRange)_blockRangeForGlyphRange:(NSRange)arg1 ;
-(NSRange)_blockRowRangeForGlyphRange:(NSRange)arg1 completeRows:(bool*)arg2 ;
-(NSRange)_blockRowRangeForGlyphRange:(NSRange)arg1 ;
-(id)_rowArrayCache;
-(NSRange)_extendedCharRangeForInvalidation:(NSRange)arg1 editedCharRange:(NSRange)arg2 ;
-(void)_adjustCharacterIndicesForRawGlyphRange:(NSRange)arg1 byDelta:(long long)arg2 ;
-(bool)_canDoLayout;
-(void)_fillGlyphHoleAtIndex:(unsigned long long)arg1 desiredNumberOfCharacters:(unsigned long long)arg2 ;
-(unsigned long long)_smallEncodingGlyphIndexForCharacterIndex:(unsigned long long)arg1 startOfRange:(bool)arg2 okToFillHoles:(bool)arg3 ;
-(unsigned long long)_glyphIndexForCharacterIndex:(unsigned long long)arg1 startOfRange:(bool)arg2 okToFillHoles:(bool)arg3 ;
-(id)_containerDescription;
-(id)_lineFragmentDescription;
-(id)_glyphLocationDescription;
-(id)_glyphDescription;
-(id)_glyphHoleDescription;
-(id)_layoutHoleDescription;
-(id)_glyphTreeDescription;
-(id)_layoutTreeDescription;
-(id)_blockDescription;
-(void)_updateUsageForTextContainer:(id)arg1 addingUsedRect:(CGRect)arg2 ;
-(NSStoredContainerUsage*)_validatedStoredUsageForTextContainerAtIndex:(unsigned long long)arg1 ;
-(id)_selectedRanges;
-(void)_fixSelectionAfterChangeInCharacterRange:(NSRange)arg1 changeInLength:(long long)arg2 ;
-(CGRect)_boundingRectForGlyphRange:(NSRange)arg1 inTextContainer:(id)arg2 fast:(bool)arg3 fullLineRectsOnly:(bool)arg4 ;
-(NSRange)_glyphRangeForBoundingRect:(CGRect)arg1 inTextContainer:(id)arg2 fast:(bool)arg3 okToFillHoles:(bool)arg4 ;
-(void)_firstTextViewChanged;
-(void)_drawBackgroundForGlyphRange:(NSRange)arg1 atPoint:(CGPoint)arg2 parameters:(NSDrawingParameters*)arg3 ;
-(id)selectedTextAttributesForCharacterAtIndex:(unsigned long long)arg1 effectiveRange:(NSRange*)arg2 ;
-(char*)_packedGlyphs:(unsigned long long)arg1 range:(NSRange)arg2 length:(unsigned long long*)arg3 ;
-(void)_drawGlyphsForGlyphRange:(NSRange)arg1 atPoint:(CGPoint)arg2 ;
-(unsigned)_glyphAtIndex:(unsigned long long)arg1 characterIndex:(unsigned long long*)arg2 glyphInscription:(unsigned long long*)arg3 isValidIndex:(bool*)arg4 ;
-(bool)_needToFlushGlyph;
-(void)_setNeedToFlushGlyph:(bool)arg1 ;
-(void)_simpleInsertGlyph:(unsigned)arg1 atGlyphIndex:(unsigned long long)arg2 characterIndex:(unsigned long long)arg3 elastic:(bool)arg4 ;
-(void)_simpleDeleteGlyphsInRange:(NSRange)arg1 ;
-(void)_insertGlyphs:(unsigned*)arg1 elasticAttributes:(bool*)arg2 count:(unsigned long long)arg3 atGlyphIndex:(unsigned long long)arg4 characterIndex:(unsigned long long)arg5 ;
-(void)_promoteGlyphStoreToFormat:(unsigned long long)arg1 ;
-(id)_attachmentSizesRun;
-(CGRect)_currentAttachmentRect;
-(unsigned long long)_currentAttachmentIndex;
-(void)_setCurrentAttachmentRect:(CGRect)arg1 index:(unsigned long long)arg2 ;
-(void)_clearCurrentAttachmentSettings;
-(void)_clearTemporaryAttributes;
-(void)_clearTemporaryAttributesForCharacterRange:(NSRange)arg1 changeInLength:(long long)arg2 ;
-(void)setAllowsOriginalFontMetricsOverride:(bool)arg1 ;
-(bool)allowsOriginalFontMetricsOverride;
-(void)_setHasSeenRightToLeft:(bool)arg1 ;
-(bool)flipsIfNeeded;
-(void)setFlipsIfNeeded:(bool)arg1 ;
-(void)setLineFragmentRect:(CGRect)arg1 forGlyphRange:(NSRange)arg2 usedRect:(CGRect)arg3 baselineOffset:(double)arg4 ;
-(bool)ignoresViewTransformations;
-(void)setIgnoresViewTransformations:(bool)arg1 ;
-(bool)ignoresAntialiasThreshold;
-(void)setIgnoresAntialiasThreshold:(bool)arg1 ;
-(bool)_alwaysDrawsActive;
-(void)_setAlwaysDrawsActive:(bool)arg1 ;
-(id)_insertionPointHelperForGlyphAtIndex:(unsigned long long)arg1 ;
-(long long)getLineFragmentInsertionPointArraysForCharacterAtIndex:(unsigned long long)arg1 inDisplayOrder:(bool)arg2 positions:(double*)arg3 characterIndexes:(unsigned long long*)arg4 count:(unsigned long long*)arg5 alternatePositions:(double*)arg6 characterIndexes:(unsigned long long*)arg7 count:(unsigned long long*)arg8 ;
-(id)_selectionRangesForInsertionPointRange:(NSRange)arg1 ;
-(void)_setDrawsUnderlinesLikeWebKit:(bool)arg1 ;
-(id)circleImageWithSize:(CGSize)arg1 bufferWidth:(double)arg2 usingColor:(id)arg3 ;
-(void)_drawLineForGlyphRange:(NSRange)arg1 inContext:(CGContextRef)arg2 from:(double)arg3 to:(double)arg4 at:(double)arg5 thickness:(double)arg6 lineOrigin:(CGPoint)arg7 breakForDescenders:(bool)arg8 flipped:(bool)arg9 ;
-(void)_showCGGlyphs:(const unsigned short*)arg1 positions:(const CGPoint*)arg2 count:(unsigned long long)arg3 font:(id)arg4 matrix:(CGAffineTransform)arg5 attributes:(id)arg6 inContext:(CGContextRef)arg7 ;
-(void)showAttachmentCell:(id)arg1 inRect:(CGRect)arg2 characterIndex:(unsigned long long)arg3 ;
-(void)drawSpellingUnderlineForGlyphRange:(NSRange)arg1 spellingState:(long long)arg2 inGlyphRange:(NSRange)arg3 lineFragmentRect:(CGRect)arg4 lineFragmentGlyphRange:(NSRange)arg5 containerOrigin:(CGPoint)arg6 ;
-(void)_drawLineForGlyphRange:(NSRange)arg1 inContext:(CGContextRef)arg2 from:(double)arg3 to:(double)arg4 at:(double)arg5 thickness:(double)arg6 lineOrigin:(CGPoint)arg7 breakForDescenders:(bool)arg8 ;
-(void)_drawLineForGlyphRange:(NSRange)arg1 type:(long long)arg2 baselineOffset:(double)arg3 lineFragmentRect:(CGRect)arg4 lineFragmentGlyphRange:(NSRange)arg5 containerOrigin:(CGPoint)arg6 isStrikethrough:(bool)arg7 ;
-(void)_lineGlyphRange:(NSRange)arg1 type:(long long)arg2 lineFragmentRect:(CGRect)arg3 lineFragmentGlyphRange:(NSRange)arg4 containerOrigin:(CGPoint)arg5 isStrikethrough:(bool)arg6 ;
-(void)dealloc;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(void)setDelegate:(id)arg1 ;
-(id)init;
-(id)description;
-(id)delegate;
-(void)_commonInit;
-(void)showCGGlyphs:(const unsigned short*)arg1 positions:(const CGPoint*)arg2 count:(unsigned long long)arg3 font:(id)arg4 matrix:(CGAffineTransform)arg5 attributes:(id)arg6 inContext:(CGContextRef)arg7 ;
-(void)addTextContainer:(id)arg1 ;
-(void)setUsesFontLeading:(bool)arg1 ;
-(id)textStorage;
-(void)ensureLayoutForTextContainer:(id)arg1 ;
-(void)addTemporaryAttribute:(id)arg1 value:(id)arg2 forCharacterRange:(NSRange)arg3 ;
-(void)invalidateDisplayForCharacterRange:(NSRange)arg1 ;
-(id)textContainerForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(NSRange*)arg2 ;
-(CGRect)boundingRectForGlyphRange:(NSRange)arg1 inTextContainer:(id)arg2 ;
-(void)ensureLayoutForCharacterRange:(NSRange)arg1 ;
-(void)ensureLayoutForBoundingRect:(CGRect)arg1 inTextContainer:(id)arg2 ;
-(NSRange)glyphRangeForBoundingRect:(CGRect)arg1 inTextContainer:(id)arg2 ;
-(NSRange)glyphRangeForCharacterRange:(NSRange)arg1 actualCharacterRange:(NSRange*)arg2 ;
-(void)drawGlyphsForGlyphRange:(NSRange)arg1 atPoint:(CGPoint)arg2 ;
-(void)drawBackgroundForGlyphRange:(NSRange)arg1 atPoint:(CGPoint)arg2 ;
-(void)invalidateGlyphsForCharacterRange:(NSRange)arg1 changeInLength:(long long)arg2 actualCharacterRange:(NSRange*)arg3 ;
-(void)invalidateLayoutForCharacterRange:(NSRange)arg1 actualCharacterRange:(NSRange*)arg2 ;
-(void)setGlyphs:(const unsigned short*)arg1 properties:(const long long*)arg2 characterIndexes:(const unsigned long long*)arg3 font:(id)arg4 forGlyphRange:(NSRange)arg5 ;
-(NSRange)glyphRangeForTextContainer:(id)arg1 ;
-(unsigned long long)getGlyphsInRange:(NSRange)arg1 glyphs:(unsigned short*)arg2 properties:(long long*)arg3 characterIndexes:(unsigned long long*)arg4 bidiLevels:(char*)arg5 ;
-(void)setNotShownAttribute:(bool)arg1 forGlyphAtIndex:(unsigned long long)arg2 ;
-(unsigned long long)numberOfGlyphs;
-(id)attributedString;
-(bool)allowsNonContiguousLayout;
-(CGRect)lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(NSRange*)arg2 ;
-(void)setAllowsNonContiguousLayout:(bool)arg1 ;
-(CGRect)usedRectForTextContainer:(id)arg1 ;
-(double)defaultLineHeightForFont:(id)arg1 ;
-(void)_setGlyphsPerLineEstimate:(unsigned long long)arg1 offsetPerLineEstimate:(double)arg2 ;
-(id)textContainers;
-(void)enumerateLineFragmentsForGlyphRange:(NSRange)arg1 usingBlock:(/*^block*/ id)arg2 ;
-(NSRange)glyphRangeForBoundingRectWithoutAdditionalLayout:(CGRect)arg1 inTextContainer:(id)arg2 ;
-(NSRange)characterRangeForGlyphRange:(NSRange)arg1 actualGlyphRange:(NSRange*)arg2 ;
-(bool)hasNonContiguousLayout;
-(unsigned long long)firstUnlaidGlyphIndex;
-(CGRect*)rectArrayForCharacterRange:(NSRange)arg1 withinSelectedCharacterRange:(NSRange)arg2 inTextContainer:(id)arg3 rectCount:(unsigned long long*)arg4 ;
-(void)ensureLayoutForGlyphRange:(NSRange)arg1 ;
-(CGRect)lineFragmentRectForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(NSRange*)arg2 ;
-(void)removeTemporaryAttribute:(id)arg1 forCharacterRange:(NSRange)arg2 ;
-(id)temporaryAttribute:(id)arg1 atCharacterIndex:(unsigned long long)arg2 longestEffectiveRange:(NSRange*)arg3 inRange:(NSRange)arg4 ;
-(id)extraLineFragmentTextContainer;
-(void)enumerateEnclosingRectsForCharacterRange:(NSRange)arg1 withinSelectedCharacterRange:(NSRange)arg2 inTextContainer:(id)arg3 usingBlock:(/*^block*/ id)arg4 ;
-(unsigned long long)glyphIndexForPoint:(CGPoint)arg1 inTextContainer:(id)arg2 fractionOfDistanceThroughGlyph:(double*)arg3 ;
-(unsigned long long)characterIndexForPoint:(CGPoint)arg1 inTextContainer:(id)arg2 fractionOfDistanceBetweenInsertionPoints:(double*)arg3 ;
-(long long)propertyForGlyphAtIndex:(unsigned long long)arg1 ;
-(unsigned long long)glyphIndexForCharacterAtIndex:(unsigned long long)arg1 ;
-(CGRect)extraLineFragmentRect;
-(unsigned long long)getLineFragmentInsertionPointsForCharacterAtIndex:(unsigned long long)arg1 alternatePositions:(bool)arg2 inDisplayOrder:(bool)arg3 positions:(double*)arg4 characterIndexes:(unsigned long long*)arg5 ;
-(void)enumerateEnclosingRectsForGlyphRange:(NSRange)arg1 withinSelectedGlyphRange:(NSRange)arg2 inTextContainer:(id)arg3 usingBlock:(/*^block*/ id)arg4 ;
-(unsigned long long)layoutOptions;
-(CGRect)extraLineFragmentUsedRect;
-(void)setBackgroundLayoutEnabled:(bool)arg1 ;
-(void)setSynchronizesAlignmentToDirection:(bool)arg1 ;
-(id)typesetter;
-(CGPoint)locationForGlyphAtIndex:(unsigned long long)arg1 ;
-(long long)intAttribute:(long long)arg1 forGlyphAtIndex:(unsigned long long)arg2 ;
-(CGRect*)rectArrayForGlyphRange:(NSRange)arg1 withinSelectedGlyphRange:(NSRange)arg2 inTextContainer:(id)arg3 rectCount:(unsigned long long*)arg4 ;
-(unsigned long long)characterIndexForGlyphAtIndex:(unsigned long long)arg1 ;
-(unsigned short)glyphAtIndex:(unsigned long long)arg1 ;
-(bool)notShownAttributeForGlyphAtIndex:(unsigned long long)arg1 ;
-(id)temporaryAttribute:(id)arg1 atCharacterIndex:(unsigned long long)arg2 effectiveRange:(NSRange*)arg3 ;
-(double)defaultBaselineOffsetForFont:(id)arg1 ;
-(void)drawUnderlineForGlyphRange:(NSRange)arg1 underlineType:(long long)arg2 baselineOffset:(double)arg3 lineFragmentRect:(CGRect)arg4 lineFragmentGlyphRange:(NSRange)arg5 containerOrigin:(CGPoint)arg6 ;
-(void)drawStrikethroughForGlyphRange:(NSRange)arg1 strikethroughType:(long long)arg2 baselineOffset:(double)arg3 lineFragmentRect:(CGRect)arg4 lineFragmentGlyphRange:(NSRange)arg5 containerOrigin:(CGPoint)arg6 ;
-(void)setExtraLineFragmentRect:(CGRect)arg1 usedRect:(CGRect)arg2 textContainer:(id)arg3 ;
-(void)setTextContainer:(id)arg1 forGlyphRange:(NSRange)arg2 ;
-(void)setLineFragmentRect:(CGRect)arg1 forGlyphRange:(NSRange)arg2 usedRect:(CGRect)arg3 ;
-(void)setLocation:(CGPoint)arg1 forStartOfGlyphRange:(NSRange)arg2 ;
-(CGRect)layoutRectForTextBlock:(id)arg1 atIndex:(unsigned long long)arg2 effectiveRange:(NSRange*)arg3 ;
-(void)invalidateDisplayForGlyphRange:(NSRange)arg1 ;
-(id)substituteFontForFont:(id)arg1 ;
-(CGSize)attachmentSizeForGlyphAtIndex:(unsigned long long)arg1 ;
-(CGRect)boundsRectForTextBlock:(id)arg1 atIndex:(unsigned long long)arg2 effectiveRange:(NSRange*)arg3 ;
-(id)temporaryAttributesAtCharacterIndex:(unsigned long long)arg1 longestEffectiveRange:(NSRange*)arg2 inRange:(NSRange)arg3 ;
-(void)fillBackgroundRectArray:(const CGRect*)arg1 count:(unsigned long long)arg2 forCharacterRange:(NSRange)arg3 color:(id)arg4 ;
-(void)underlineGlyphRange:(NSRange)arg1 underlineType:(long long)arg2 lineFragmentRect:(CGRect)arg3 lineFragmentGlyphRange:(NSRange)arg4 containerOrigin:(CGPoint)arg5 ;
-(void)strikethroughGlyphRange:(NSRange)arg1 strikethroughType:(long long)arg2 lineFragmentRect:(CGRect)arg3 lineFragmentGlyphRange:(NSRange)arg4 containerOrigin:(CGPoint)arg5 ;
-(void)getFirstUnlaidCharacterIndex:(unsigned long long*)arg1 glyphIndex:(unsigned long long*)arg2 ;
-(bool)synchronizesAlignmentToDirection;
-(long long)typesetterBehavior;
-(double)hyphenationFactor;
-(bool)usesFontLeading;
-(void)insertGlyph:(unsigned)arg1 atGlyphIndex:(unsigned long long)arg2 characterIndex:(unsigned long long)arg3 ;
-(void)setEllipsisGlyphAttribute:(bool)arg1 forGlyphAtIndex:(unsigned long long)arg2 ;
-(void)setAttachmentSize:(CGSize)arg1 forGlyphRange:(NSRange)arg2 ;
-(void)setTypesetterBehavior:(long long)arg1 ;
-(void)deleteGlyphsInRange:(NSRange)arg1 ;
-(void)insertGlyphs:(const unsigned*)arg1 length:(unsigned long long)arg2 forStartingGlyphAtIndex:(unsigned long long)arg3 characterIndex:(unsigned long long)arg4 ;
-(void)setIntAttribute:(long long)arg1 value:(long long)arg2 forGlyphAtIndex:(unsigned long long)arg3 ;
-(id)glyphGenerator;
-(void)setGlyphGenerator:(id)arg1 ;
-(void)insertTextContainer:(id)arg1 atIndex:(unsigned long long)arg2 ;
-(NSRange)_characterRangeCurrentlyInAndAfterContainer:(id)arg1 ;
-(void)textContainerChangedTextView:(id)arg1 ;
-(void)invalidateLayoutForCharacterRange:(NSRange)arg1 isSoft:(bool)arg2 actualCharacterRange:(NSRange*)arg3 ;
-(void)_invalidateGlyphsForCharacterRange:(NSRange)arg1 editedCharacterRange:(NSRange)arg2 changeInLength:(long long)arg3 actualCharacterRange:(NSRange*)arg4 ;
-(void)_primitiveInvalidateDisplayForGlyphRange:(NSRange)arg1 ;
-(void)_forceDisplayToBeCorrectForViewsWithUnlaidGlyphs;
-(void)textStorage:(id)arg1 edited:(unsigned long long)arg2 range:(NSRange)arg3 changeInLength:(long long)arg4 invalidatedRange:(NSRange)arg5 ;
-(void)ensureGlyphsForCharacterRange:(NSRange)arg1 ;
-(void)_primitiveDeleteGlyphsInRange:(NSRange)arg1 ;
-(unsigned short)glyphAtIndex:(unsigned long long)arg1 isValidIndex:(bool*)arg2 ;
-(unsigned long long)getGlyphsInRange:(NSRange)arg1 glyphs:(unsigned*)arg2 characterIndexes:(unsigned long long*)arg3 glyphInscriptions:(unsigned long long*)arg4 elasticBits:(bool*)arg5 bidiLevels:(char*)arg6 ;
-(unsigned long long)firstUnlaidCharacterIndex;
-(CGRect)lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(NSRange*)arg2 withoutAdditionalLayout:(bool)arg3 ;
-(double)fractionOfDistanceThroughGlyphForPoint:(CGPoint)arg1 inTextContainer:(id)arg2 ;
-(unsigned long long)glyphIndexForPoint:(CGPoint)arg1 inTextContainer:(id)arg2 ;
-(id)temporaryAttributesAtCharacterIndex:(unsigned long long)arg1 effectiveRange:(NSRange*)arg2 ;
-(bool)usesScreenFonts;
-(void)setTextStorage:(id)arg1 ;
-(void)replaceTextStorage:(id)arg1 ;
-(id)_glyphGenerator;
-(void)_setGlyphGenerator:(id)arg1 ;
-(void)setTypesetter:(id)arg1 ;
-(void)removeTextContainerAtIndex:(unsigned long long)arg1 ;
-(void)textContainerChangedGeometry:(id)arg1 ;
-(void)textContainerChangedTextView:(id)arg1 fromTextView:(id)arg2 ;
-(void)_setGlyphsPerLineEstimate:(unsigned long long)arg1 integerOffsetPerLineEstimate:(unsigned long long)arg2 ;
-(bool)backgroundLayoutEnabled;
-(void)setUsesScreenFonts:(bool)arg1 ;
-(void)setShowsInvisibleCharacters:(bool)arg1 ;
-(bool)showsInvisibleCharacters;
-(void)setShowsControlCharacters:(bool)arg1 ;
-(bool)showsControlCharacters;
-(void)setHyphenationFactor:(double)arg1 ;
-(void)processEditingForTextStorage:(id)arg1 edited:(unsigned long long)arg2 range:(NSRange)arg3 changeInLength:(long long)arg4 invalidatedRange:(NSRange)arg5 ;
-(void)ensureGlyphsForGlyphRange:(NSRange)arg1 ;
-(void)replaceGlyphAtIndex:(unsigned long long)arg1 withGlyph:(unsigned)arg2 ;
-(void)setCharacterIndex:(unsigned long long)arg1 forGlyphAtIndex:(unsigned long long)arg2 ;
-(void)invalidateGlyphsOnLayoutInvalidationForGlyphRange:(NSRange)arg1 ;
-(bool)isValidGlyphIndex:(unsigned long long)arg1 ;
-(unsigned long long)getGlyphsInRange:(NSRange)arg1 glyphs:(unsigned*)arg2 characterIndexes:(unsigned long long*)arg3 glyphInscriptions:(unsigned long long*)arg4 elasticBits:(bool*)arg5 ;
-(unsigned long long)getGlyphs:(unsigned*)arg1 range:(NSRange)arg2 ;
-(void)setLocation:(CGPoint)arg1 forStartOfGlyphRange:(NSRange)arg2 coalesceRuns:(bool)arg3 ;
-(void)setLocations:(CGPoint*)arg1 startingGlyphIndexes:(unsigned long long*)arg2 count:(unsigned long long)arg3 forGlyphRange:(NSRange)arg4 ;
-(void)setDrawsOutsideLineFragment:(bool)arg1 forGlyphAtIndex:(unsigned long long)arg2 ;
-(id)textContainerForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(NSRange*)arg2 withoutAdditionalLayout:(bool)arg3 ;
-(CGRect)lineFragmentRectForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(NSRange*)arg2 withoutAdditionalLayout:(bool)arg3 ;
-(CGRect)lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(NSRange*)arg2 allowLayout:(bool)arg3 ;
-(bool)drawsOutsideLineFragmentForGlyphAtIndex:(unsigned long long)arg1 ;
-(NSRange)truncatedGlyphRangeInLineFragmentForGlyphAtIndex:(unsigned long long)arg1 ;
-(void)setLayoutRect:(CGRect)arg1 forTextBlock:(id)arg2 glyphRange:(NSRange)arg3 ;
-(void)setBoundsRect:(CGRect)arg1 forTextBlock:(id)arg2 glyphRange:(NSRange)arg3 ;
-(CGRect)layoutRectForTextBlock:(id)arg1 glyphRange:(NSRange)arg2 ;
-(CGRect)boundsRectForTextBlock:(id)arg1 glyphRange:(NSRange)arg2 ;
-(NSRange)rangeOfNominallySpacedGlyphsContainingIndex:(unsigned long long)arg1 ;
-(void)setTemporaryAttributes:(id)arg1 forCharacterRange:(NSRange)arg2 ;
-(void)addTemporaryAttributes:(id)arg1 forCharacterRange:(NSRange)arg2 ;
-(id)_temporaryAttribute:(id)arg1 atCharacterIndex:(unsigned long long)arg2 effectiveRange:(NSRange*)arg3 ;
-(id)_temporaryAttribute:(id)arg1 atCharacterIndex:(unsigned long long)arg2 longestEffectiveRange:(NSRange*)arg3 inRange:(NSRange)arg4 ;
-(id)_temporaryAttributesAtCharacterIndex:(unsigned long long)arg1 longestEffectiveRange:(NSRange*)arg2 inRange:(NSRange)arg3 ;
-(void)finalize;
@end

