/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:01:09 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/GameKitServices.framework/Frameworks/AVConference.framework/AVConference
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <AVConference/AVConference-Structs.h>
#import <AVConference/VCCallSessionDelegate.h>
#import <AVConference/GKNATObserverDelegate.h>

@protocol VideoConferenceDelegate, VideoConferenceRealTimeChannel, OS_dispatch_queue, VideoConferenceSpeakingDelegate, VideoConferenceChannelQualityDelegate;
@class NSObject, VideoConferenceManager, AVAudioManager, NSMutableDictionary, NSArray, CALayer, VCVideoRule, CameraConferenceSynchronizer, NSString, VCCallSession, NSDictionary, GKNATObserver;

@interface VideoConference : NSObject <VCCallSessionDelegate, GKNATObserverDelegate> {

	NSObject<VideoConferenceDelegate>* delegate;
	VideoConferenceManager* manager;
	AVAudioManager* audioManager;
	opaque_pthread_rwlock_t stateLock;
	NSMutableDictionary* sessionDict;
	NSArray* sessionArray;
	bool outputMeteringEnabled;
	bool inputMeteringEnabled;
	float outputMeterLevel;
	float inputMeterLevel;
	bool microphoneMuted;
	NSObject<VideoConferenceRealTimeChannel>* rtChannel;
	NSObject<OS_dispatch_queue>* audioManagerQueue;
	void* remoteVideoLayer;
	void* remoteVideoBackLayer;
	int remoteVideoSlot;
	int remoteVideoSlotBack;
	CALayer* remoteVideoSubLayer;
	CALayer* remoteVideoSubLayerBack;
	CAImageQueueRef remoteCAImageQueue;
	CAImageQueueRef remoteCAImageQueueBack;
	OpaqueFigImageQueueRef remoteVideoImageQueue;
	OpaqueFigImageQueueRef remoteVideoImageQueueBack;
	int localFrameWidth;
	int localFrameHeight;
	int remoteFrameWidth;
	int remoteFrameHeight;
	VCVideoRule* conferenceCaptureRule;
	CameraConferenceSynchronizer* synchronizer;
	tagHANDLE* hVR;
	tagHANDLE* hVT;
	bool isRecvVideo;
	double dAudioHostTime;
	opaque_pthread_mutex_t xRemoteLayer;
	opaque_pthread_mutex_t xAudioTS;
	unsigned dwAudioTS;
	bool forceNoICE;
	bool useViceroyBlobFormat;
	int chatMode;
	bool isFocus;
	NSString* currentFocus;
	VCCallSession* currentFocusSession;
	bool hasMic;
	float conferenceVolume;
	NSArray* mutedPeers;
	NSArray* connectedPeers;
	unsigned talkingPeersLimit;
	unsigned char speakingArray[16];
	NSObject<VideoConferenceSpeakingDelegate>* speakingDelegate;
	NSObject<VideoConferenceChannelQualityDelegate>* qualityDelegate;
	float longTerm;
	float shortTerm;
	bool isTalking;
	unsigned talkTime;
	int packetsPerBundle;
	unsigned recvRTPTimeStamp;
	bool disableVAD;
	bool isAttemptingRelay;
	bool requiresWifi;
	unsigned preferredCodec;
	int upstreamBandwidth;
	int downstreamBandwidth;
	bool useAFRC;
	bool isGKVoiceChat;
	bool isUsingSuppression;
	bool shouldTimeoutPackets;
	unsigned char requestedCameraType;
	bool useCompressedConnectionData;
	NSDictionary* natTypeDictionary;
	opaque_pthread_mutex_t natMutex;
	opaque_pthread_cond_t natCond;
	unsigned lastSentAudioSampleTime;
	double lastReceivedAudioTimestamp;
	int audioTimeStampDelta;
	GKNATObserver* natObserver;
	unsigned mostRecentStartedCall;
	unsigned lastActiveCall;
	bool bweOperatingModeInitialized;
	bool useNewBWEMode;
	bool useActiveProbingSenderLog;
	bool useFakeLargeFrameMode;
	bool shouldPrioritizeParticipantIDForSIPInvite;
	bool shouldResumeAudio;
	bool shouldResumeVideo;
	int currentCamera;
	unsigned timeStampUpdateCounter;
	NSObject<OS_dispatch_queue>* delegateNotificationQueue;
	int conferenceOperatingMode;
	bool isValid;

}

@property (assign,nonatomic) bool useCompressedConnectionData; 
@property (getter=isSpeakerPhoneEnabled) bool enableSpeakerPhone; 
@property (assign,nonatomic) bool requiresWifi; 
@property (assign,nonatomic) bool shouldPrioritizeParticipantIDForSIPInvite; 
@property (assign,nonatomic) NSObject<VideoConferenceDelegate> * delegate; 
@property (assign,nonatomic) bool useViceroyBlobFormat; 
@property (assign,getter=isMicrophoneMuted,nonatomic) bool microphoneMuted; 
@property (assign,getter=isOutputMeteringEnabled,nonatomic) bool outputMeteringEnabled; 
@property (assign,getter=isInputMeteringEnabled,nonatomic) bool inputMeteringEnabled; 
@property (nonatomic,readonly) float outputMeterLevel; 
@property (nonatomic,readonly) float inputMeterLevel; 
@property (setter=setRTChannel:) NSObject<VideoConferenceRealTimeChannel> * rtChannel; 
@property (assign,nonatomic) int chatMode; 
@property (assign,nonatomic) bool isFocus; 
@property (nonatomic,copy) NSString * currentFocus; 
@property (assign,nonatomic) int packetsPerBundle; 
@property (assign) bool hasMic; 
@property (assign) float conferenceVolume; 
@property (assign) NSObject<VideoConferenceSpeakingDelegate> * speakingDelegate; 
@property (assign) NSObject<VideoConferenceChannelQualityDelegate> * qualityDelegate; 
@property (assign) unsigned talkingPeersLimit; 
@property (assign) bool disableVAD; 
@property (assign) bool shouldTimeoutPackets; 
@property (assign) int upstreamBandwidth; 
@property (assign) int downstreamBandwidth; 
@property (assign,nonatomic) void* remoteVideoLayer; 
@property (assign,nonatomic) void* remoteVideoBackLayer; 
@property (readonly) CALayer * remoteVideoSubLayer; 
@property (readonly) CALayer * remoteVideoSubLayerBack; 
@property (readonly) int localFrameHeight; 
@property (readonly) int localFrameWidth; 
@property (assign,nonatomic) unsigned preferredCodec; 
@property (assign,nonatomic) bool isUsingSuppression; 
@property (assign,nonatomic) bool isGKVoiceChat; 
@property (nonatomic,readonly) VCVideoRule * conferenceCaptureRule; 
@property (assign) unsigned lastActiveCall; 
@property (assign) bool isValid; 
-(void)NATTypeDictionaryUpdated:(id)arg1 ;
-(bool)initiateResolutionChangeToWidth:(int)arg1 height:(int)arg2 rate:(int)arg3 ;
-(bool)onCaptureFrame:(CVBufferRef)arg1 frameTime:(SCD_Struct_VC16)arg2 cameraStatusBits:(unsigned char)arg3 ;
-(void)avConferencePreviewError:(id)arg1 ;
-(void)session:(id)arg1 withCallID:(unsigned)arg2 videoIsDegraded:(bool)arg3 isRemote:(bool)arg4 ;
-(void)session:(id)arg1 remoteMediaStalled:(bool)arg2 ;
-(void)session:(id)arg1 receivedNoPacketsForSeconds:(double)arg2 ;
-(void)session:(id)arg1 packMeters:(char*)arg2 withLength:(char*)arg3 ;
-(void)didChangeLocalVariablesForSession:(id)arg1 ;
-(void)session:(id)arg1 sendRelayResponse:(id)arg2 ;
-(int)currentCameraID;
-(void)session:(id)arg1 sendIPChangeRequest:(id)arg2 withCallID:(unsigned)arg3 ;
-(void)session:(id)arg1 cancelRelayRequest:(id)arg2 ;
-(void)session:(id)arg1 withCallID:(unsigned)arg2 networkHint:(bool)arg3 ;
-(void)session:(id)arg1 didStart:(bool)arg2 connectionType:(unsigned)arg3 localUseCell:(unsigned)arg4 remoteUseCell:(unsigned)arg5 error:(id)arg6 ;
-(void)session:(id)arg1 didStopWithError:(id)arg2 ;
-(void)session:(id)arg1 didStopWithDelay:(long long)arg2 error:(id)arg3 ;
-(void)remoteVideoDidPause:(bool)arg1 callID:(unsigned)arg2 ;
-(void)remoteAudioDidPause:(bool)arg1 callID:(unsigned)arg2 ;
-(void)session:(id)arg1 didChangeRemoteScreenAttributes:(id)arg2 ;
-(bool)session:(id)arg1 startVideoIO:(id*)arg2 captureRule:(id)arg3 isUnpausing:(bool)arg4 ;
-(bool)stopVideoIO:(bool)arg1 error:(id*)arg2 ;
-(bool)didDetectBandwidth:(bool)arg1 upstreamBandwidth:(int)arg2 downstreamBandwidth:(int)arg3 ;
-(void)session:(id)arg1 inititiateRelayRequest:(id)arg2 ;
-(void)setBWEOptions:(bool)arg1 UseNewBWEMode:(bool)arg2 FakeLargeFrameMode:(bool)arg3 ProbingSenderLog:(bool)arg4 ;
-(void)session:(id)arg1 didReceiveARPLData:(id)arg2 fromCallID:(unsigned)arg3 ;
-(void)session:(id)arg1 didChangeVideoRule:(id)arg2 ;
-(bool)session:(id)arg1 receivedRemoteFrame:(CVBufferRef)arg2 atTime:(SCD_Struct_VC16)arg3 withScreenAttributes:(id)arg4 videoAttributes:(id)arg5 isFirstFrame:(bool)arg6 ;
-(void)session:(id)arg1 didSeeThermalChange:(double)arg2 ;
-(void)unlock;
-(void)getNSError:(id*)arg1 code:(long long)arg2 detailedCode:(long long)arg3 returnCode:(long long)arg4 filePath:(id)arg5 description:(id)arg6 reason:(id)arg7 ;
-(void)getNSError:(id*)arg1 code:(long long)arg2 detailedCode:(long long)arg3 filePath:(id)arg4 description:(id)arg5 reason:(id)arg6 ;
-(void)wrlock;
-(void)rdlock;
-(void)stopCallID:(unsigned)arg1 didRemoteCancel:(bool)arg2 error:(id)arg3 ;
-(int)tryrdlock;
-(void)markUnfinishedSessions;
-(void)cleanupProc:(id)arg1 ;
-(void)threadSafeCleanupSession:(id)arg1 ;
-(void)cleanupSession:(id)arg1 withDelay:(unsigned long long)arg2 ;
-(void)cleanupSession:(id)arg1 didRemoteCancel:(bool)arg2 ;
-(unsigned)connectionResultCallbackForCallID:(unsigned)arg1 result:(tagCONNRESULT*)arg2 didReceiveICEPacket:(bool)arg3 didUseRelay:(bool)arg4 secretKey:(CFDataRef)arg5 skeResult:(int)arg6 ;
-(void)defaultCleanupSession:(id)arg1 ;
-(bool)setPauseAudio:(bool)arg1 ;
-(bool)setPauseVideo:(bool)arg1 ;
-(id)sessionForParticipantID:(id)arg1 ;
-(id)openSessionForParticipant:(id)arg1 ;
-(id)sessionForIncomingParticipantID:(id)arg1 ;
-(id)sessionForIncomingConnectionResult:(tagCONNRESULT*)arg1 ;
-(id)loopbackSessionWaitingForSIPInvite;
-(bool)matchesCallID:(unsigned)arg1 ;
-(bool)matchesOpenSessionForParticipantID:(id)arg1 ;
-(unsigned)callIDForOpenSessionWithParticipantID:(id)arg1 ;
-(bool)matchesParticipantID:(id)arg1 ;
-(bool)hasSessionWaitingForSIPInvite;
-(bool)matchesIncomingConnectionResult:(tagCONNRESULT*)arg1 ;
-(int)stateForCallID:(unsigned)arg1 ;
-(int)sipCallbackNotification:(int)arg1 callID:(unsigned)arg2 msgIn:(const char*)arg3 msgOut:(char*)arg4 optional:(void*)arg5 confIndex:(int*)arg6 ;
-(bool)updateSpeaking:(unsigned)arg1 timeStamp:(unsigned)arg2 ;
-(unsigned char)powerFloatToInt:(float)arg1 ;
-(int)captureAsFocus:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 timeStampDelta:(int)arg5 averagePower:(unsigned char)arg6 ;
-(int)captureAsFocusClient:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 averagePower:(unsigned char)arg5 ;
-(int)captureMeshMode:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 bufferedSamples:(int)arg5 hostTime:(double)arg6 ;
-(bool)recvSamplesForSession:(id)arg1 samples:(char*)arg2 numBytes:(int)arg3 numSamples:(int)arg4 storeTimestamp:(unsigned)arg5 ;
-(unsigned)pruneQuietestPeers:(unsigned)arg1 talking:(unsigned)arg2 mask:(unsigned)arg3 meters:(char*)arg4 ;
-(unsigned)calculateTalkingMaskAtTimeStamp:(unsigned)arg1 samples:(char*)arg2 numBytes:(int)arg3 numSamples:(int)arg4 ;
-(void)calculateMixingArrays:(unsigned*)arg1 talkingMask:(unsigned)arg2 ;
-(int)pullDecodedAsFocus:(char*)arg1 timestamp:(unsigned)arg2 numBytes:(int)arg3 numSamples:(int)arg4 ;
-(int)pullDecodedAsFocusClient:(char*)arg1 timestamp:(unsigned)arg2 numBytes:(int)arg3 numSamples:(int)arg4 ;
-(int)pullDecodedMeshMode:(char*)arg1 timestamp:(unsigned)arg2 numBytes:(int)arg3 numSamples:(int)arg4 ;
-(void)updateMeter:(unsigned char)arg1 forParticipant:(id)arg2 atIndex:(unsigned)arg3 ;
-(void)updateMeters:(unsigned short)arg1 ;
-(float)powerIntToFloat:(unsigned char)arg1 ;
-(bool)onCaptureSound:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 timeStampDelta:(int)arg5 bufferedSamples:(int)arg6 hostTime:(double)arg7 averagePower:(float)arg8 voiceActivity:(unsigned)arg9 ;
-(bool)onPlaySound:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 averagePower:(float)arg5 ;
-(void)dealloc;
-(void)setDelegate:(id)arg1 ;
-(id)init;
-(id)delegate;
-(bool)isValid;
-(bool)setActive:(bool)arg1 ;
-(void)stopAllCalls:(id)arg1 ;
-(void)cleanupManager;
-(void)setRemoteVideoLayer:(void*)arg1 ;
-(void)setRemoteVideoBackLayer:(void*)arg1 ;
-(double)networkQualityForCallID:(unsigned)arg1 ;
-(void)setConferenceOperatingMode:(int)arg1 ;
-(unsigned)initializeNewCall;
-(void)setUseViceroyBlobFormat:(bool)arg1 ;
-(void)sendARPLData:(id)arg1 toCallID:(unsigned)arg2 ;
-(id)callMetadataForCallID:(unsigned)arg1 ;
-(void)setPeerCN:(id)arg1 callID:(unsigned)arg2 ;
-(void)setSessionID:(id)arg1 callID:(unsigned)arg2 ;
-(bool)requiresWifi;
-(void)setRequiresWifi:(bool)arg1 ;
-(void)stopCallID:(unsigned)arg1 ;
-(void)remoteCancelledCallID:(unsigned)arg1 ;
-(void)setCallReport:(unsigned)arg1 withReport:(id)arg2 ;
-(void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2 ;
-(void)processRemoteIPChange:(id)arg1 callID:(unsigned)arg2 ;
-(bool)isOutputMeteringEnabled;
-(void)setOutputMeteringEnabled:(bool)arg1 ;
-(bool)isInputMeteringEnabled;
-(void)setInputMeteringEnabled:(bool)arg1 ;
-(float)outputMeterLevel;
-(bool)getIsAudioPaused:(bool*)arg1 callID:(unsigned)arg2 error:(id*)arg3 ;
-(bool)getIsVideoPaused:(bool*)arg1 callID:(unsigned)arg2 error:(id*)arg3 ;
-(float)inputMeterLevel;
-(void)setMicrophoneMuted:(bool)arg1 ;
-(bool)isMicrophoneMuted;
-(void*)remoteVideoLayer;
-(void*)remoteVideoBackLayer;
-(double)localFramerateForCallID:(unsigned)arg1 ;
-(double)localBitrateForCallID:(unsigned)arg1 ;
-(double)remoteFramerateForCallID:(unsigned)arg1 ;
-(double)remoteBitrateForCallID:(unsigned)arg1 ;
-(int)localFrameHeight;
-(int)localFrameWidth;
-(double)remotePacketLossRateForCallID:(unsigned)arg1 ;
-(double)localPacketLossRateForCallID:(unsigned)arg1 ;
-(double)roundTripTimeForCallID:(unsigned)arg1 ;
-(id)statsForCallID:(unsigned)arg1 ;
-(void)setEnableSpeakerPhone:(bool)arg1 ;
-(bool)isSpeakerPhoneEnabled;
-(int)natType;
-(bool)setPauseAudio:(bool)arg1 callID:(unsigned)arg2 error:(id*)arg3 ;
-(bool)setPauseVideo:(bool)arg1 callID:(unsigned)arg2 error:(id*)arg3 ;
-(void)processRelayRequestResponse:(unsigned)arg1 responseDict:(id)arg2 didOriginateRequest:(bool)arg3 ;
-(void)processRelayUpdate:(unsigned)arg1 updateDict:(id)arg2 didOriginateRequest:(bool)arg3 ;
-(void)handleCellTechChange:(int)arg1 cellularMaxPktLen:(unsigned short)arg2 ;
-(void)setQualityDelegate:(id)arg1 ;
-(id)qualityDelegate;
-(bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned)arg2 usingInviteData:(id)arg3 isCaller:(bool)arg4 capabilities:(id)arg5 error:(id*)arg6 ;
-(id)inviteDataForParticipantID:(id)arg1 callID:(unsigned*)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(double)arg4 error:(id*)arg5 ;
-(void)setPacketsPerBundle:(int)arg1 ;
-(int)packetsPerBundle;
-(void)setIsGKVoiceChat:(bool)arg1 ;
-(bool)isGKVoiceChat;
-(id)rtChannel;
-(bool)useCompressedConnectionData;
-(void)setUseCompressedConnectionData:(bool)arg1 ;
-(bool)shouldTimeoutPackets;
-(void)setShouldTimeoutPackets:(bool)arg1 ;
-(void)cleanupQueues;
-(void)warmupForCall:(int)arg1 ;
-(id)newSession;
-(int)natTypeForCallSessions:(const char*)arg1 ;
-(void)setIsUsingSuppression:(bool)arg1 ;
-(void)notifyDelegateOfLocalVariablesChange;
-(bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned)arg2 usingInviteData:(id)arg3 isCaller:(bool)arg4 relayResponseDict:(id)arg5 didOriginateRelayRequest:(bool)arg6 capabilities:(id)arg7 error:(id*)arg8 ;
-(void)setCallReportProtobuf:(unsigned)arg1 withProtobufData:(id)arg2 forMetricID:(long long)arg3 ;
-(void)createVideoImageQueues;
-(double)packetLossRateForCallID:(unsigned)arg1 ;
-(void)setChatMode:(int)arg1 ;
-(void)setIsFocus:(bool)arg1 ;
-(void)inviteDataForParticipantID:(id)arg1 callID:(unsigned)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(unsigned long long)arg4 block:(/*^block*/ id)arg5 queue:(id)arg6 caller:(id)arg7 ;
-(void)connectionBlobForParticipantID:(id)arg1 callID:(unsigned)arg2 block:(/*^block*/ id)arg3 queue:(id)arg4 caller:(id)arg5 ;
-(id)connectionBlobForParticipantID:(id)arg1 callID:(unsigned*)arg2 error:(id*)arg3 ;
-(bool)shouldSendAudioForCallID:(unsigned)arg1 ;
-(void)setSendAudio:(bool)arg1 forCallID:(unsigned)arg2 ;
-(int)conferenceOperatingMode;
-(bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned)arg2 oldCallID:(unsigned)arg3 usingInviteData:(id)arg4 isCaller:(bool)arg5 relayResponseDict:(id)arg6 didOriginateRelayRequest:(bool)arg7 capabilities:(id)arg8 error:(id*)arg9 ;
-(void)setCurrentFocus:(id)arg1 ;
-(void)updatedMutedPeers:(id)arg1 forParticipantID:(id)arg2 ;
-(void)updatedConnectedPeers:(id)arg1 ;
-(int)remoteVideoSlot:(bool)arg1 ;
-(CGSize)remoteFrameSizeForCallID:(unsigned)arg1 ;
-(void)forceNoICE:(bool)arg1 ;
-(void)setHasMic:(bool)arg1 ;
-(bool)hasMic;
-(void)setConferenceVolume:(float)arg1 ;
-(float)conferenceVolume;
-(void)setRTChannel:(id)arg1 ;
-(int)chatMode;
-(bool)isFocus;
-(id)currentFocus;
-(unsigned)preferredCodec;
-(void)setPreferredCodec:(unsigned)arg1 ;
-(int)upstreamBandwidth;
-(void)setUpstreamBandwidth:(int)arg1 ;
-(int)downstreamBandwidth;
-(void)setDownstreamBandwidth:(int)arg1 ;
-(id)speakingDelegate;
-(void)setSpeakingDelegate:(id)arg1 ;
-(bool)useViceroyBlobFormat;
-(bool)isUsingSuppression;
-(unsigned)talkingPeersLimit;
-(void)setTalkingPeersLimit:(unsigned)arg1 ;
-(bool)disableVAD;
-(void)setDisableVAD:(bool)arg1 ;
-(bool)shouldPrioritizeParticipantIDForSIPInvite;
-(void)setShouldPrioritizeParticipantIDForSIPInvite:(bool)arg1 ;
-(id)conferenceCaptureRule;
-(unsigned)lastActiveCall;
-(void)setLastActiveCall:(unsigned)arg1 ;
-(void)setIsValid:(bool)arg1 ;
-(id)remoteVideoSubLayer;
-(id)remoteVideoSubLayerBack;
@end

