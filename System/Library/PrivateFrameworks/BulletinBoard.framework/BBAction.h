/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:00:42 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <BulletinBoard/BulletinBoard-Structs.h>
#import <CoreFoundation/NSCopying.h>
#import <CoreFoundation/NSCoding.h>

@class NSURL, NSString, NSDictionary;

@interface BBAction : NSObject <NSCopying, NSCoding> {

	/*^block*/ id _internalBlock;
	bool _deliverResponse;
	NSURL* _launchURL;
	NSString* _launchBundleID;
	bool _launchCanBypassPinLock;
	NSString* _activatePluginName;
	NSDictionary* _activatePluginContext;
	long long _actionType;

}

@property (nonatomic,retain) NSURL * launchURL;                               //@synthesize launchURL=_launchURL - In the implementation block
@property (nonatomic,copy) NSString * launchBundleID;                         //@synthesize launchBundleID=_launchBundleID - In the implementation block
@property (assign,nonatomic) bool launchCanBypassPinLock;                     //@synthesize launchCanBypassPinLock=_launchCanBypassPinLock - In the implementation block
@property (nonatomic,copy) NSString * activatePluginName;                     //@synthesize activatePluginName=_activatePluginName - In the implementation block
@property (nonatomic,copy) NSDictionary * activatePluginContext;              //@synthesize activatePluginContext=_activatePluginContext - In the implementation block
@property (assign,nonatomic) bool canBypassPinLock; 
@property (nonatomic,copy) id internalBlock;                                  //@synthesize internalBlock=_internalBlock - In the implementation block
@property (assign,nonatomic) long long actionType;                            //@synthesize actionType=_actionType - In the implementation block
+(id)action;
+(id)actionWithCallblock:(/*^block*/ id)arg1 ;
+(id)actionWithLaunchURL:(id)arg1 callblock:(/*^block*/ id)arg2 ;
+(id)actionWithLaunchBundleID:(id)arg1 callblock:(/*^block*/ id)arg2 ;
+(id)actionWithActivatePluginName:(id)arg1 activationContext:(id)arg2 ;
-(id)bundleID;
-(void)dealloc;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(bool)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)copyWithZone:(NSZone)arg1 ;
-(id)url;
-(bool)deliverResponse:(id)arg1 ;
-(void)setCallblock:(/*^block*/ id)arg1 ;
-(void)setLaunchBundleID:(id)arg1 ;
-(id)initWithActivatePluginName:(id)arg1 activationContext:(id)arg2 ;
-(void)setActivatePluginName:(id)arg1 ;
-(void)setActivatePluginContext:(id)arg1 ;
-(void)setInternalBlock:(/*^block*/ id)arg1 ;
-(bool)launchCanBypassPinLock;
-(void)setLaunchCanBypassPinLock:(bool)arg1 ;
-(/*^block*/ id)internalBlock;
-(id)launchBundleID;
-(id)activatePluginName;
-(id)activatePluginContext;
-(bool)canBypassPinLock;
-(void)setCanBypassPinLock:(bool)arg1 ;
-(id)partialDescription;
-(bool)hasLaunchInfo;
-(bool)isURLLaunchAction;
-(bool)isAppLaunchAction;
-(void)setActionType:(long long)arg1 ;
-(long long)actionType;
-(void)setLaunchURL:(id)arg1 ;
-(id)launchURL;
@end

