/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:01:20 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/IMDaemonCore.framework/IMDaemonCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <IMDaemonCore/IMSystemMonitorListener.h>

@class NSBundle, NSString, NSDictionary;

@interface IMDService : NSObject <IMSystemMonitorListener> {

	NSBundle* _bundle;
	Class _sessionClass;
	NSString* _internalName;
	NSDictionary* _accountDefaults;
	NSDictionary* _serviceDefaults;
	NSDictionary* _serviceProperties;
	NSDictionary* _cachedServiceDefaults;
	NSDictionary* _cachedSetupServiceDefaults;
	bool _blockPrefWriting;

}

@property (nonatomic,readonly) Class sessionClass; 
@property (nonatomic,readonly) Class accountClass; 
@property (nonatomic,readonly) NSDictionary * serviceProperties;                    //@synthesize serviceProperties=_serviceProperties - In the implementation block
@property (nonatomic,readonly) NSBundle * bundle;                                   //@synthesize bundle=_bundle - In the implementation block
@property (nonatomic,readonly) NSString * internalName; 
@property (nonatomic,readonly) NSString * serviceDomain; 
@property (nonatomic,readonly) bool isIDSBased; 
@property (nonatomic,readonly) NSDictionary * serviceDefaults; 
@property (nonatomic,readonly) NSDictionary * serviceDefaultsForSetup; 
@property (nonatomic,readonly) NSDictionary * defaultAccountSettings; 
@property (nonatomic,readonly) bool serviceRequiresSingleAccount; 
@property (nonatomic,readonly) bool shouldCreateActiveAccounts; 
@property (nonatomic,readonly) bool serviceWantsNullHostReachability; 
@property (nonatomic,readonly) bool serviceIgnoresNetworkConnectivity; 
@property (nonatomic,readonly) bool shouldForceAccountsActive; 
@property (nonatomic,readonly) bool shouldForceAccountsConnected; 
@property (nonatomic,readonly) bool serviceNeedsLogin; 
@property (nonatomic,readonly) bool serviceNeedsPassword; 
@property (nonatomic,readonly) bool serviceShouldBeAlwaysLoggedIn; 
@property (nonatomic,readonly) bool serviceRequiresHost; 
@property (nonatomic,readonly) bool serviceSupportsRegistration; 
@property (nonatomic,readonly) bool serviceChatsIgnoreLoginStatus; 
@property (nonatomic,readonly) bool serviceSupportsPresence; 
@property (nonatomic,readonly) bool supportsDatabase; 
@property (nonatomic,readonly) bool disallowDeactivation; 
@property (nonatomic,readonly) long long serviceProtocolVersion; 
-(void)dealloc;
-(id)description;
-(id)bundle;
-(id)initWithBundle:(id)arg1 ;
-(void)accountAdded:(id)arg1 ;
-(id)serviceDomain;
-(void)systemDidEnterMemoryPressure;
-(void)systemDidStartBackup;
-(id)internalName;
-(id)serviceProperties;
-(id)serviceDefaults;
-(id)defaultAccountSettings;
-(void)accountRemoved:(id)arg1 ;
-(void)disableAccount:(id)arg1 ;
-(void)delayedSaveSettings;
-(Class)sessionClass;
-(bool)shouldForceAccountsConnected;
-(bool)isIDSBased;
-(bool)serviceRequiresSingleAccount;
-(bool)shouldCreateActiveAccounts;
-(bool)disallowDeactivation;
-(bool)shouldForceAccountsActive;
-(void)saveSettings;
-(void)enableAccount:(id)arg1 ;
-(id)_copyServicePropertiesFromIMServiceBundle:(id)arg1 ;
-(void)synchronizeServiceDefaults;
-(void)unloadServiceBundle;
-(void)_reallyUnloadServiceBundle;
-(long long)serviceProtocolVersion;
-(id)_serviceDomain;
-(id)oldInternalName;
-(void)loadServiceBundle;
-(id)_defaultDefaults;
-(id)_serviceDefaultsForDomain:(id)arg1 ;
-(id)_oldServiceDomain;
-(void)purgeMemoryCaches;
-(id)serviceDefaultsForSetup;
-(bool)clearOneTimeImportAccounts;
-(id)newAccountWithAccountDefaults:(id)arg1 accountID:(id)arg2 ;
-(bool)supportsDatabase;
-(bool)serviceSupportsRegistration;
-(bool)serviceIgnoresNetworkConnectivity;
-(bool)serviceWantsNullHostReachability;
-(bool)serviceNeedsLogin;
-(bool)serviceNeedsPassword;
-(bool)serviceShouldBeAlwaysLoggedIn;
-(bool)serviceRequiresHost;
-(bool)serviceChatsIgnoreLoginStatus;
-(bool)serviceSupportsPresence;
-(Class)accountClass;
@end

