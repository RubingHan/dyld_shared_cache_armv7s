/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:01:41 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/Notes.framework/Notes
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <Notes/Notes-Structs.h>
@class NSManagedObjectModel, NSManagedObjectContext, NSPersistentStoreCoordinator, NSPredicate, NoteStoreObject, NoteAccountObject, CPExclusiveLock, AccountUtilities, NSNumber, NSString, NSMutableDictionary;

@interface NoteContext : NSObject {

	NSManagedObjectModel* _managedObjectModel;
	NSManagedObjectContext* _managedObjectContext;
	NSPersistentStoreCoordinator* _persistentStoreCoordinator;
	NSPredicate* _searchPredicate;
	NoteStoreObject* _localStore;
	NoteAccountObject* _localAccount;
	CXIndexRef __SharedNoteStoreSearchIndex;
	CPExclusiveLock* __SharedNoteStoreSearchIndexLock;
	int __SharedNoteStoreSearchIndexCount;
	bool _isIndexing;
	AccountUtilities* _accountUtilities;
	NSManagedObjectContext* _nextIdContext;
	CPExclusiveLock* _nextIdLock;
	NSNumber* _nextId;
	CPExclusiveLock* _objectCreationLock;
	unsigned long long _notificationCount;
	bool _logChanges;
	bool _indexInBatches;
	bool _hasPriorityInSaveConflicts;
	bool _inMigrator;
	NSString* _testingFilePrefix;
	NSString* _testingFilePath;
	NSMutableDictionary* _notePropertyObjectsRealized;

}

@property (nonatomic,readonly) bool isIndexing;                                            //@synthesize isIndexing=_isIndexing - In the implementation block
@property (nonatomic,readonly) NSManagedObjectContext * managedObjectContext; 
@property (nonatomic,retain) AccountUtilities * accountUtilities;                          //@synthesize accountUtilities=_accountUtilities - In the implementation block
+(bool)databaseIsCorrupt:(id)arg1 ;
+(bool)shouldLogIndexing;
-(void)clearCaches;
-(id)storeOptions;
-(void)setPropertyValue:(id)arg1 forKey:(id)arg2 ;
-(id)rootDirectory;
-(id)propertyValueForKey:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(void)invalidate;
-(void).cxx_destruct;
-(id)managedObjectModel;
-(id)managedObjectContext;
-(bool)save:(id*)arg1 ;
-(id)storeForObjectID:(id)arg1 ;
-(id)newlyAddedStore;
-(bool)deleteStore:(id)arg1 ;
-(id)allVisibleNotesInCollection:(id)arg1 ;
-(id)newlyAddedNote;
-(void)deleteNoteRegardlessOfConstraints:(id)arg1 ;
-(id)notesForIntegerIds:(id)arg1 ;
-(id)allNotesWithoutBodiesInCollection:(id)arg1 ;
-(id)localAccount;
-(bool)deleteAccount:(id)arg1 ;
-(id)allAccounts;
-(id)accountForAccountId:(id)arg1 ;
-(id)newlyAddedAccount;
-(void)enableChangeLogging:(bool)arg1 ;
-(bool)saveOutsideApp:(id*)arg1 ;
-(void)deleteChanges:(id)arg1 ;
-(void)deleteNote:(id)arg1 ;
-(unsigned long long)countOfNotesInCollection:(id)arg1 ;
-(id)allNotesInCollection:(id)arg1 ;
-(id)accountUtilities;
-(bool)forceDeleteAccount:(id)arg1 ;
-(void)_createLocalAccount:(id*)arg1 andStore:(id*)arg2 ;
-(id)urlForPersistentStore;
-(void)setUpUniqueObjects;
-(bool)setUpLocalAccountAndStore;
-(bool)setUpLastIndexTid;
-(bool)saveSilently:(id*)arg1 ;
-(id)pathForPersistentStore;
-(id)pathForIndex;
-(void)removeSqliteAndIdxFiles;
-(void)removeConflictingSqliteAndIdxFiles;
-(void)handleMigration;
-(void)updateSearchIndex:(id)arg1 ;
-(bool)shouldObserveDarwinNotifications;
-(void)managedObjectContextWillSaveNotification:(id)arg1 ;
-(id)initWithTestingFilePrefix:(id)arg1 inMigrator:(bool)arg2 ;
-(id)initWithTestingFilePrefix:(id)arg1 atPath:(id)arg2 inMigrator:(bool)arg3 ;
-(id)initWithTestingFilePrefix:(id)arg1 atPath:(id)arg2 inMigrator:(bool)arg3 accountUtilities:(id)arg4 ;
-(void)setUpCoreDataStack;
-(id)initWithTestingFilePrefix:(id)arg1 ;
-(void)tearDownCoreDataStack;
-(id)newFetchRequestForNotes;
-(id)visibleNotesPredicate;
-(id)nextIndex;
-(id)allVisibleNotesMatchingPredicate:(id)arg1 ;
-(unsigned long long)countOfVisibleNotesMatchingPredicate:(id)arg1 ;
-(id)allNotesMatchingPredicate:(id)arg1 ;
-(unsigned long long)countOfNotesMatchingPredicate:(id)arg1 ;
-(id)liveNotesNeedingBodiesPredicate;
-(void)forceSetUpUniqueObjects;
-(id)allAccountsAsFaults:(bool)arg1 prefechedRelationshipKeyPaths:(id)arg2 ;
-(id)localStore;
-(unsigned long long)countOfStores;
-(id)_notePropertyObjectForKey:(id)arg1 ;
-(id)getNextIdObject;
-(id)notesToResumeIndexing;
-(void)saveNotesToResumeIndexing:(id)arg1 ;
-(void)indexNotes:(id)arg1 ;
-(void)destroySearchIndex;
-(bool)shouldResumeIndexing;
-(CXIndexRef)searchIndex:(char*)arg1 ;
-(void)cleanUpLocks;
-(void)trackChanges:(id)arg1 ;
-(id)noteChangeWithType:(int)arg1 store:(id)arg2 ;
-(id)copyNotesForSearch:(void*)arg1 predicate:(id)arg2 complete:(char*)arg3 ;
-(void*)newSearchContextWithText:(id)arg1 ;
-(id)allNotes;
-(id)initForMigrator;
-(id)newFRCForCollection:(id)arg1 delegate:(id)arg2 ;
-(void)sortNotes:(id)arg1 ;
-(id)collectionForObjectID:(id)arg1 ;
-(id)allVisibleNotes;
-(unsigned long long)countOfVisibleNotes;
-(unsigned long long)countOfVisibleNotesInCollection:(id)arg1 ;
-(id)visibleNoteForObjectID:(id)arg1 ;
-(id)visibleNotesForIntegerIds:(id)arg1 ;
-(unsigned long long)countOfNotes;
-(id)noteForObjectID:(id)arg1 ;
-(id)collectionForInfo:(id)arg1 ;
-(id)allStores;
-(id)faultedInStoresForAccounts:(id)arg1 ;
-(id)defaultStoreForNewNote;
-(bool)shouldDisableLocalStore;
-(bool)hasMultipleEnabledStores;
-(void)setHasPriorityInSaveConflicts:(bool)arg1 ;
-(void)wrapUpIndexing;
-(void)resumeIndexing;
-(void)indexInBatches:(bool)arg1 ;
-(void)receiveDarwinNotificationWithChangeLogging:(bool)arg1 ;
-(void)resetNotificationCount;
-(id)copyNotesForSearch:(void*)arg1 complete:(char*)arg2 ;
-(id)findNotesWithText:(id)arg1 betweenDate:(id)arg2 andDate:(id)arg3 ;
-(bool)noteIsSafeToAccess:(id)arg1 ;
-(bool)deleteIndexFile;
-(bool)isIndexing;
-(void)setAccountUtilities:(id)arg1 ;
-(id)persistentStoreCoordinator;
-(long long)context:(id)arg1 shouldHandleInaccessibleFault:(id)arg2 forObjectID:(id)arg3 andTrigger:(id)arg4 ;
@end

