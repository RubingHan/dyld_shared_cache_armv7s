/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:03:26 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/XPCObjects.framework/XPCObjects
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <XPCObjects/XPCObjects-Structs.h>
#import <CoreFoundation/NSCopying.h>

@protocol OS_xpc_object, OS_dispatch_queue, XPCProxyTarget;
@class NSObject, Protocol, NSArray;

@interface XPCProxy : NSObject <NSCopying> {

	NSObject<OS_xpc_object>* _connection;
	NSObject<OS_dispatch_queue>* _queue;
	NSObject<OS_dispatch_queue>* _internalQueue;
	<XPCProxyTarget>* _target;
	Class _remoteClass;
	Protocol* _remoteProtocol;
	/*^block*/ id _errorHandler;
	bool _invalidated;
	bool _useTraditionalEncoder;
	NSArray* _whitelistedClassNames;

}

@property (assign) Protocol * remoteProtocol;                                     //@synthesize remoteProtocol=_remoteProtocol - In the implementation block
@property (copy) id errorHandler;                                                 //@synthesize errorHandler=_errorHandler - In the implementation block
@property (nonatomic,readonly) NSObject<OS_xpc_object> * connection;              //@synthesize connection=_connection - In the implementation block
@property (assign,nonatomic) bool useTraditionalEncoder;                          //@synthesize useTraditionalEncoder=_useTraditionalEncoder - In the implementation block
@property (assign) <XPCProxyTarget> * target;                                     //@synthesize target=_target - In the implementation block
@property (assign) Class remoteClass;                                             //@synthesize remoteClass=_remoteClass - In the implementation block
+(void)initialize;
-(id)_awaitingReply;
-(id)remoteObjectProxyWithErrorHandler:(/*^block*/ id)arg1 ;
-(id)_uikit_disconnect;
-(id)proxyWithNewTarget:(id)arg1 queue:(id)arg2 errorHandler:(/*^block*/ id)arg3 ;
-(id)proxyWithNewTarget:(id)arg1 label:(id)arg2 errorHandler:(/*^block*/ id)arg3 ;
-(id)_disconnectionInvocation;
-(/*^block*/ id)errorHandler;
-(void)dealloc;
-(void)invalidate;
-(id)methodSignatureForSelector:(SEL)arg1 ;
-(void)setTarget:(id)arg1 ;
-(id)copyWithZone:(NSZone)arg1 ;
-(id)target;
-(void)forwardInvocation:(id)arg1 ;
-(id)connection;
-(void)setRemoteProtocol:(id)arg1 ;
-(id)initWithConnection:(id)arg1 queue:(id)arg2 target:(id)arg3 ;
-(void)setErrorHandler:(/*^block*/ id)arg1 ;
-(id)remoteProtocol;
-(void)restrictDecodingToWhitelistedClassNames:(id)arg1 ;
-(void)setRemoteClass:(Class)arg1 ;
-(id)_errorForXpcError:(id)arg1 ;
-(id)_invocationForMessage:(id)arg1 ;
-(id)_proxyDescription;
-(Class)remoteClass;
-(id)_newMessageAndReplyHandler:(/*^block*/ id*)arg1 forInvocation:(id)arg2 ;
-(SEL)_selectorForMessage:(id)arg1 ;
-(void)_getInvocationArgument:(void*)arg1 argumentType:(const char*)arg2 class:(Class*)arg3 forXpcArgument:(id)arg4 message:(id)arg5 ;
-(id)_newXpcArgumentForInvocationArgumentAt:(void*)arg1 ofType:(const char*)arg2 ;
-(id)_objectForXpcEncoding:(id)arg1 ;
-(id)_newXpcEncodingForObject:(id)arg1 ;
-(bool)useTraditionalEncoder;
-(void)setUseTraditionalEncoder:(bool)arg1 ;
@end

