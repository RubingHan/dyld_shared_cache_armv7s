/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:01:35 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <MusicLibrary/MusicLibrary-Structs.h>
#import <MusicLibrary/ML3Entity.h>

@class ML3Predicate, NSString, NSArray;

@interface ML3Container : ML3Entity

@property (readonly) ML3Predicate * staticPredicate; 
@property (readonly) ML3Predicate * dynamicPredicate; 
@property (getter=isLimitedByCount,readonly) bool limitedByCount; 
@property (getter=isLimitOrderingDescending,readonly) bool limitOrderingDescending; 
@property (readonly) NSString * limitingProperty; 
@property (readonly) NSArray * limitOrderingTerms; 
@property (readonly) long long limitValue; 
@property (readonly) NSArray * cloudDisplayOrderingTerms; 
@property (readonly) NSArray * displayOrderingTerms; 
+(id)propertyForMPMediaEntityProperty:(id)arg1 ;
+(void)initialize;
+(id)defaultOrderingProperties;
+(id)persistentIDColumnForTable:(id)arg1 ;
+(long long)revisionTrackingCode;
+(id)joinClausesForProperty:(id)arg1 ;
+(id)foreignDatabaseTableForProperty:(id)arg1 ;
+(id)foreignColumnForProperty:(id)arg1 ;
+(id)databaseTable;
+(id)extraTablesToDelete;
+(bool)deleteFromLibrary:(id)arg1 deletionType:(int)arg2 persistentIDs:(const long long*)arg3 count:(unsigned long long)arg4 ;
+(id)defaultFilterPredicates;
+(id)sectionPropertyForProperty:(id)arg1 ;
+(void)populateDynamicContainersInLibrary:(id)arg1 ;
+(void)populateSortOrdersOfPropertyValues:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3 ;
+(bool)hasCriterionInCriteriaList:(SearchCriteriaListRef)arg1 forITDBTrackField:(int)arg2 ;
+(id)nextFilepathForPlaylistType:(int)arg1 withPersistentID:(unsigned long long)arg2 inLibrary:(id)arg3 ;
+(id)predicateForCriteriaList:(SearchCriteriaListRef)arg1 dynamicCriteria:(bool)arg2 ;
+(void)_insertNewSmartPlaylist:(id)arg1 criteriaBlob:(id)arg2 evaluationOrder:(unsigned)arg3 limited:(bool)arg4 trackOrder:(unsigned)arg5 distinguishedKind:(int)arg6 inLibrary:(id)arg7 cachedNameOrders:(id)arg8 ;
+(void)populateDynamicContainersWithTrackPersistentID:(id)arg1 inLibrary:(id)arg2 createBuiltinSmartPlaylists:(bool)arg3 ;
+(bool)createMissingBuiltInSmartPlaylists:(id)arg1 ;
+(id)__mediaTypesForTracksWithDatabaseConnection:(id)arg1 tracksPersistentIDsEnumerationBlock:(/*^block*/ id)arg2 ;
+(void)_updateContainedMediaTypeInContainerWithPersistentID:(long long)arg1 connection:(id)arg2 itemUpdateBlock:(/*^block*/ id)arg3 ;
+(void)_clearContainerMediaTypeInContainerWithPersistentID:(long long)arg1 connection:(id)arg2 ;
+(id)_mediaTypesForTracksInContainerWithPersistentID:(long long)arg1 connection:(id)arg2 ;
+(void)_addMediaTypesToContainerWithPersistentID:(long long)arg1 mediaTypes:(id)arg2 connection:(id)arg3 ;
+(void)_reloadContainedMediaTypesForContainerWithPersistID:(long long)arg1 connection:(id)arg2 ;
+(void)_removeMediaTypesFromContainerWithPersistentID:(long long)arg1 mediaTypes:(id)arg2 connection:(id)arg3 ;
+(id)_mediaTypesForTracksWithSwappedPersistentIDsInArray:(id)arg1 connection:(id)arg2 ;
+(id)_mediaTypesForTracksWithSwappedPersistentIDs:(const long long*)arg1 count:(int)arg2 connection:(id)arg3 ;
+(bool)smartCriteriaCanBeEvaluated:(id)arg1 ;
+(bool)updateBuiltInSmartPlaylistNamesForCurrentLanguage:(id)arg1 ;
+(id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)arg1 ;
+(void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)arg1 inLibrary:(id)arg2 ;
+(void)populateStaticItemsOfDynamicContainersInLibrary:(id)arg1 ;
+(void)populateDynamicContainersInLibrary:(id)arg1 createBuiltinSmartPlaylists:(bool)arg2 ;
+(void)populateDynamicContainersWithTrackPersistentID:(id)arg1 inLibrary:(id)arg2 ;
+(void)populateMediaTypesOfStaticContainersInLibrary:(id)arg1 ;
-(bool)removeAllTracks;
-(bool)addTrackWithPersistentID:(long long)arg1 ;
-(id)initWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3 ;
-(void)setValues:(id)arg1 forProperties:(id)arg2 async:(bool)arg3 withCompletionBlock:(/*^block*/ id)arg4 ;
-(void)_setContainerSeedItemPersistentIDValue:(id)arg1 ;
-(SearchCriteriaListRef)importedCriteriaList;
-(bool)isEvaluationOrderingDescending;
-(bool)isLimitOrderingDescending;
-(id)limitOrderingTerms;
-(id)evaluationOrderingTerms;
-(id)staticPredicate;
-(id)populateSQLWithStaticTrackPersistentID:(id)arg1 ;
-(id)populateStatementParametersWithStaticTrackPersistentID:(id)arg1 ;
-(bool)setTracksWithPersistentIDs:(const long long*)arg1 count:(unsigned long long)arg2 ;
-(bool)setContainsTrack:(bool)arg1 forPersistentID:(long long)arg2 notify:(bool)arg3 ;
-(bool)_setSwappedItemPersistentIDs:(const long long*)arg1 reloadContainedMediaTypes:(bool)arg2 mediaTypesToRemove:(id)arg3 mediaTypesToAdd:(id)arg4 size:(int)arg5 notify:(bool)arg6 ;
-(bool)_setSwappedItemPersistentIDs:(const long long*)arg1 reloadContainedMediaTypes:(bool)arg2 size:(int)arg3 notify:(bool)arg4 ;
-(void)_accessCurrentSwappedPersisentIDsUsingBlock:(/*^block*/ id)arg1 ;
-(bool)_setSwappedItemPersistentIDs:(const long long*)arg1 mediaTypesToRemove:(id)arg2 mediaTypesToAdd:(id)arg3 size:(int)arg4 notify:(bool)arg5 ;
-(bool)removeTracksAtIndexes:(id)arg1 notify:(bool)arg2 ;
-(bool)addTracksWithPersistentIDs:(long long*)arg1 count:(unsigned long long)arg2 notify:(bool)arg3 ;
-(bool)removeTracksAtIndexes:(id)arg1 notify:(bool)arg2 indexesTransformBlock:(/*^block*/ id)arg3 ;
-(bool)addTracksWithPersistentIDs:(long long*)arg1 count:(unsigned long long)arg2 ;
-(bool)_setSwappedItemPersistentIDs:(const long long*)arg1 reloadContainedMediaTypes:(bool)arg2 size:(int)arg3 ;
-(bool)setTracksWithPersistentIDs:(const long long*)arg1 count:(unsigned long long)arg2 notify:(bool)arg3 ;
-(id)dynamicPredicate;
-(bool)isLimitedByCount;
-(id)limitingProperty;
-(long long)limitValue;
-(id)cloudDisplayOrderingTerms;
-(id)displayOrderingTerms;
-(bool)removeTracksAtIndexes:(id)arg1 ;
-(bool)removeTracksWithPersistentIDs:(const long long*)arg1 atFilteredIndexes:(id)arg2 ;
-(bool)moveTrackFromIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2 ;
-(bool)setTracksWithSwappedPersistentIDData:(id)arg1 ;
@end

