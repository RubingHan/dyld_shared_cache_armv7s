/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:01:37 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

typedef struct {
	unsigned field1;
	char* field2;
	unsigned field3;
	unsigned long long field4;
	unsigned long long field5;
	unsigned field6;
	long long field7;
	bool field8;
	bool field9;
	bool field10;
	bool field11;
	bool field12;
} SCD_Struct_ML0;

typedef struct CGContext* CGContextRef;

typedef struct CGImage* CGImageRef;

typedef struct CGColorSpace* CGColorSpaceRef;

typedef struct {
	bool field1;
	unsigned field2;
} SCD_Struct_ML4;

typedef struct _NSZone* NSZoneRef;

typedef struct iPhoneSortKeyBuilder* iPhoneSortKeyBuilderRef;

typedef struct {
	long long field1;
	long long field2;
} SCD_Struct_ML7;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct SearchCriteriaList* SearchCriteriaListRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct ChapterData* ChapterDataRef;

typedef struct _compressed_pair<long long *, std::__1::allocator<long long> > {
	long long __first_;
} compressed_pair<long long *, std::__1::allocator<long long> >;

typedef struct vector<long long, std::__1::allocator<long long> > {
	long long __begin_;
	long long __end_;
	compressed_pair<long long *, std::__1::allocator<long long> > __end_cap_;
} vector<long long, std::__1::allocator<long long> >;

typedef struct _compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > {
	char* __first_;
} compressed_pair<unsigned char *, std::__1::allocator<unsigned char> >;

typedef struct vector<unsigned char, std::__1::allocator<unsigned char> > {
	char* __begin_;
	char* __end_;
	compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > __end_cap_;
} vector<unsigned char, std::__1::allocator<unsigned char> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, ML3CollectionPIDSet, std::__1::hash<long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, ML3CollectionPIDSet, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, ML3CollectionPIDSet, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, ML3CollectionPIDSet, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> {
	__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> > > {
	__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<long long, ML3CollectionPIDSet>, std::__1::__unordered_map_hasher<long long, ML3CollectionPIDSet, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, ML3CollectionPIDSet, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, ML3CollectionPIDSet> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3CollectionPIDSet>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, ML3CollectionPIDSet, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, ML3CollectionPIDSet, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::pair<long long, ML3CollectionPIDSet>, std::__1::__unordered_map_hasher<long long, ML3CollectionPIDSet, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, ML3CollectionPIDSet, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, ML3CollectionPIDSet> > >;

typedef struct unordered_map<long long, ML3CollectionPIDSet, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ML3CollectionPIDSet> > > {
	hash_table<std::__1::pair<long long, ML3CollectionPIDSet>, std::__1::__unordered_map_hasher<long long, ML3CollectionPIDSet, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, ML3CollectionPIDSet, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, ML3CollectionPIDSet> > > __table_;
} unordered_map<long long, ML3CollectionPIDSet, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ML3CollectionPIDSet> > >;

typedef struct {
	unsigned addCount;
	unsigned updateCount;
	unsigned deleteCount;
	double importStartTime;
} SCD_Struct_ML26;

typedef struct _compressed_pair<MLRowDataSource **, std::__1::allocator<MLRowDataSource *> > {
	MLRowDataSource __first_;
} compressed_pair<MLRowDataSource **, std::__1::allocator<MLRowDataSource *> >;

typedef struct vector<MLRowDataSource *, std::__1::allocator<MLRowDataSource *> > {
	MLRowDataSource __begin_;
	MLRowDataSource __end_;
	compressed_pair<MLRowDataSource **, std::__1::allocator<MLRowDataSource *> > __end_cap_;
} vector<MLRowDataSource *, std::__1::allocator<MLRowDataSource *> >;

typedef struct {
	long long field1;
	long long field2;
	long long field3;
	long long field4;
	long long field5;
	long long field6;
	long long field7;
} SCD_Struct_ML29;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, unsigned long, std::__1::less<unsigned int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, unsigned long, std::__1::less<unsigned int>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, unsigned long>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, unsigned long>, void *> > >;

typedef struct _tree<std::__1::pair<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, unsigned long, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, unsigned long> > > {
	__tree_node<std::__1::pair<unsigned int, unsigned long>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, unsigned long>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, unsigned long, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::pair<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, unsigned long, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, unsigned long> > >;

typedef struct map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long> > > {
	tree<std::__1::pair<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, unsigned long, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, unsigned long> > > __tree_;
} map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, NSString *, std::__1::hash<long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, NSString *, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, NSString *, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, NSString *, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> {
	__hash_node<std::__1::pair<long long, NSString *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> > > {
	__hash_node<std::__1::pair<long long, NSString *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<long long, NSString *>, std::__1::__unordered_map_hasher<long long, NSString *, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, NSString *, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, NSString *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, NSString *, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, NSString *, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::pair<long long, NSString *>, std::__1::__unordered_map_hasher<long long, NSString *, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, NSString *, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, NSString *> > >;

typedef struct unordered_map<long long, NSString *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, NSString *> > > {
	hash_table<std::__1::pair<long long, NSString *>, std::__1::__unordered_map_hasher<long long, NSString *, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, NSString *, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, NSString *> > > __table_;
} unordered_map<long long, NSString *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, NSString *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<long long, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<long long, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<long long> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<long long> >;

typedef struct _compressed_pair<float, std::__1::equal_to<long long> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<long long> >;

typedef struct _hash_node_base<std::__1::__hash_node<long long, void *> *> {
	__hash_node<long long, void *> __next_;
} hash_node_base<std::__1::__hash_node<long long, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long long, void *> *>, std::__1::allocator<std::__1::__hash_node<long long, void *> > > {
	hash_node_base<std::__1::__hash_node<long long, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long long, void *> *>, std::__1::allocator<std::__1::__hash_node<long long, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<long long, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *> *> > > {
	__hash_node<long long, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *> *> > > {
	compressed_pair<std::__1::__hash_node<long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *> *> > >;

typedef struct _hash_table<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long> > {
	unique_ptr<std::__1::__hash_node<long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long long, void *> *>, std::__1::allocator<std::__1::__hash_node<long long, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<long long> > __p2_;
	compressed_pair<float, std::__1::equal_to<long long> > __p3_;
} hash_table<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long> >;

typedef struct unordered_set<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long> > {
	hash_table<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long> > __table_;
} unordered_set<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long> >;

typedef struct shared_ptr<ML3VirtualTableDataSource> {
	ML3VirtualTableDataSource __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ML3VirtualTableDataSource>;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct sqlite3_blob* sqlite3_blobRef;

typedef struct sqlite3* sqlite3Ref;

