/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:00:50 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/Conference.framework/Conference
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <Conference/Conference-Structs.h>
#import <Conference/IMAVControllerDelegate.h>

@class IMAVChat, NSMutableArray;

@interface CNFConferenceController : NSObject <IMAVControllerDelegate> {

	bool _isConnected;
	long long _type;
	IMAVChat* _activeAVChat;
	NSMutableArray* _avChatList;

}

@property (nonatomic,readonly) IMAVChat * avChat;                                  //@synthesize activeAVChat=_activeAVChat - In the implementation block
@property (nonatomic,@dynamic,readonly) bool isFullConferenceCapable; 
@property (nonatomic,readonly) unsigned localCameraType; 
@property (nonatomic,readonly) unsigned remoteCameraType; 
@property (nonatomic,readonly) unsigned remoteCameraOrientation; 
@property (nonatomic,readonly) CGSize remoteCameraAspectRatio; 
@property (nonatomic,readonly) long long type;                                     //@synthesize type=_type - In the implementation block
+(id)sharedInstance;
+(bool)connect;
+(bool)disconnect;
+(long long)conferenceControllerType;
+(CFPhoneNumberRef)newPhoneNumberRefForDestinationId:(id)arg1 useNetworkCountryCode:(bool)arg2 ;
-(bool)havePreviouslyConferencedWithID:(id)arg1 ;
-(id)_countryCode;
-(void)dealloc;
-(id)init;
-(long long)type;
-(id)remoteParticipant;
-(CGSize)localCameraAspectRatioForOrientation:(unsigned)arg1 ;
-(bool)faceTimeMuted;
-(bool)inFaceTime;
-(bool)_chat:(id)arg1 isCrossInvitationWithChat:(id)arg2 ;
-(bool)isFullConferenceCapable;
-(void)avChatStateChanged:(id)arg1 ;
-(void)iChatAgentDisconnected;
-(void)iChatAgentConnected;
-(void)faceTimeHistoryChanged:(id)arg1 ;
-(void)connectToService;
-(void)disconnectFromService;
-(id)_imHandleFromID:(id)arg1 countryCode:(id)arg2 ;
-(bool)faceTimeIsAvailable;
-(id)_imHandleFromURL:(id)arg1 ;
-(id)sendFaceTimeInvitationTo:(id)arg1 isVideo:(bool)arg2 ;
-(bool)isInvitationListener;
-(unsigned)remoteCameraOrientation;
-(unsigned)remoteCameraType;
-(unsigned)localCameraType;
-(void)endFaceTime;
-(bool)_activeChatExists;
-(void)_handleEndAVChat:(id)arg1 withReason:(unsigned)arg2 error:(int)arg3 ;
-(bool)faceTimeInvitationExists;
-(bool)activeFaceTimeCallExists;
-(void)_cleanUpAfterAVChat;
-(void)_handleConferenceConnecting:(id)arg1 ;
-(void)_handleConferenceEnded:(id)arg1 withReason:(unsigned)arg2 withError:(int)arg3 ;
-(void)_handleAVChatStateChangedToState:(unsigned)arg1 ;
-(int)activationState;
-(void)activateFaceTime;
-(void)setNeedsPushReliability:(bool)arg1 ;
-(bool)validFaceTimeAccountExistsForDestinationID:(id)arg1 ;
-(bool)canSendFaceTimeInvitationTo:(id)arg1 ;
-(id)sendFaceTimeInvitationTo:(id)arg1 ;
-(id)avChatForConferenceID:(id)arg1 ;
-(void)acceptFaceTimeInvitationForChat:(id)arg1 ;
-(void)declineFaceTimeInvitationForChat:(id)arg1 ;
-(void)setFaceTimeMuted:(bool)arg1 ;
-(bool)faceTimePaused;
-(void)setFaceTimePaused:(bool)arg1 ;
-(CGSize)remoteCameraAspectRatio;
-(bool)activeFaceTimeAudioCallExists;
-(id)currentCallRemoteUserId;
-(id)currentCallConnectedDate;
-(void)invitedToIMAVChat:(id)arg1 ;
-(void)inviteFailedFromIMHandle:(id)arg1 reason:(long long)arg2 ;
-(id)avChat;
-(id)_initWithType:(long long)arg1 ;
@end

