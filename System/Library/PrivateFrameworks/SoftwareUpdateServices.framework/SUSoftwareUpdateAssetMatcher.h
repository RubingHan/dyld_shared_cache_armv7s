/*
* This header is generated by classdump-dyld 0.2
* on Tuesday, October 21, 2014 at 10:02:41 PM Eastern European Summer Time
* Operating System: Version 7.1 (Build 11D167)
* Image Source: /System/Library/PrivateFrameworks/SoftwareUpdateServices.framework/SoftwareUpdateServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <SoftwareUpdateServices/SUAssetStateMatcher.h>

@class NSString, SUPreferences;

@interface SUSoftwareUpdateAssetMatcher : SUAssetStateMatcher {

	NSString* _fromBuild;
	NSString* _fromVersion;
	NSString* _fromProductType;
	NSString* _fromReleaseType;
	bool _checkTatsu;
	SUPreferences* _preferences;

}

@property (nonatomic,readonly) NSString * fromVersion;                         //@synthesize fromVersion=_fromVersion - In the implementation block
@property (nonatomic,readonly) NSString * fromBuild;                           //@synthesize fromBuild=_fromBuild - In the implementation block
@property (nonatomic,readonly) NSString * fromProductType;                     //@synthesize fromProductType=_fromProductType - In the implementation block
@property (nonatomic,readonly) NSString * fromReleaseType;                     //@synthesize fromReleaseType=_fromReleaseType - In the implementation block
@property (assign,nonatomic) bool compareWithTatsuForEligibility;              //@synthesize checkTatsu=_checkTatsu - In the implementation block
@property (nonatomic,retain) SUPreferences * preferences;                      //@synthesize preferences=_preferences - In the implementation block
+(id)matcherForCurrentDeviceWithInterestedStates:(int)arg1 ;
+(id)matcherForCurrentDevice;
-(void)dealloc;
-(void)setPreferences:(id)arg1 ;
-(id)preferences;
-(id)_findMatchFromCandidates:(id)arg1 error:(id*)arg2 ;
-(id)initWithVersion:(id)arg1 build:(id)arg2 productType:(id)arg3 releaseType:(id)arg4 interestedStates:(int)arg5 ;
-(bool)_isPossibleSoftwareUpdate:(id)arg1 ;
-(bool)_isDeviceEligibleForUpdate:(id)arg1 ;
-(id)_copyMatchingAssetsAfterSortingAndFiltering:(id)arg1 ;
-(unsigned long long)_getIndexOfHighestVersionedAsset:(id)arg1 usingFirstKey:(id)arg2 secondKey:(id)arg3 ;
-(id)_createSortedAndFilteredAssetResults:(id)arg1 usingFirstKey:(id)arg2 secondKey:(id)arg3 ;
-(id)fromBuild;
-(id)fromVersion;
-(id)fromProductType;
-(id)fromReleaseType;
-(bool)compareWithTatsuForEligibility;
-(void)setCompareWithTatsuForEligibility:(bool)arg1 ;
@end

